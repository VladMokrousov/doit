{"version":3,"sources":["types.ts","components/page-title/index.tsx","components/page-title/page-title.tsx","pages/main-page.tsx","validationSchemas.ts","helpers.ts","services/firebase-service.ts","context/AppContext.tsx","context/TooltipContext.tsx","assets/img/delete-icon.svg","pages/todos-page/components/todo-item-content/index.tsx","pages/todos-page/components/todo-item-content/todo-item-content.tsx","pages/todos-page/components/todos-table/tableHeaderConfig.ts","pages/todos-page/components/todos-table/index.tsx","pages/todos-page/components/todos-table/todos-table.tsx","components/portal/index.tsx","components/portal/portal.tsx","components/customInput/customInput.tsx","pages/todos-page/components/todos-modal-content/index.tsx","pages/todos-page/components/todos-modal-content/todos-modal-content.tsx","pages/todos-page/components/search-panel/index.tsx","pages/todos-page/components/search-panel/search-panel.tsx","pages/todos-page/components/status-filter/index.tsx","pages/todos-page/components/status-filter/status-filter.tsx","pages/todos-page/components/todos-control-panel/todos-control-panel.tsx","components/modal/index.tsx","components/modal/modal.tsx","pages/todos-page/index.tsx","pages/notes-page/components/note-item-content/index.tsx","pages/notes-page/components/note-item-content/note-item-content.tsx","pages/notes-page/components/notes-list/index.tsx","pages/notes-page/components/notes-list/notes-list.tsx","pages/notes-page/components/notes-modal-content/index.tsx","pages/notes-page/components/notes-modal-content/notes-modal-content.tsx","pages/notes-page/index.tsx","components/required-mark/index.tsx","components/required-mark/required-mark.tsx","pages/settings-page/components/change-email-modal-content/index.tsx","pages/settings-page/components/change-email-modal-content/change-email-modal-content.tsx","pages/settings-page/components/change-password-modal-content/index.tsx","pages/settings-page/components/change-password-modal-content/change-password-modal-content.tsx","pages/settings-page/components/delete-account-modal-content/index.tsx","pages/settings-page/components/delete-account-modal-content/delete-account-modal-content.tsx","assets/img/change-icon.svg","assets/img/anonymous.jpg","pages/settings-page/index.tsx","pages/sign-up-page/components/sign-up-modal-content/inputs-config.ts","pages/sign-up-page/components/sign-up-modal-content/index.tsx","pages/sign-up-page/components/sign-up-modal-content/sign-up-modal-content.tsx","pages/sign-up-page/index.tsx","pages/sign-in-page/components/sign-in-modal-content/inputs-config.ts","pages/sign-in-page/components/sign-in-modal-content/index.tsx","pages/sign-in-page/components/sign-in-modal-content/sign-in-modal-content.tsx","pages/sign-in-page/index.tsx","pages/reset-password-page/components/reset-password-modal-content.tsx","pages/reset-password-page/index.tsx","components/header/index.tsx","components/header/header.tsx","components/emailUnverifiedOverlay/emailUnverifiedOverlay.tsx","components/tooltip/index.tsx","components/tooltip/tooltip.tsx","app/index.tsx","app/app.tsx","index.tsx"],"names":["TooltipTypes","ToggleModalTypes","PageTitle","text","className","MainPage","signUpValidationSchema","Yup","email","required","password","min","repeatPassword","oneOf","signInValidationSchema","omit","shape","rememberMe","resetPasswordValidationSchema","pick","todoFormValidationSchema","description","max","priority","status","endDatePlan","getFormattedDate","date","type","currentMonth","getMonth","currentDay","getDate","getFullYear","String","length","firebaseSignOut","showTooltip","firebase","auth","signOut","catch","error","Error","message","firebaseConnectDisconnectTodoList","currentUser","setTodoPageState","getTodos","elem","isDataLoaded","restParams","todosList","child","val","lastTodoId","todosRef","database","ref","uid","on","off","AppContext","React","createContext","useAppContext","useContext","AppProvider","children","useState","isLoggedIn","setIsLoggedIn","setCurrentUser","isUserGet","setUserGet","actionCodeSettings","url","useTooltipContext","useEffect","onAuthStateChanged","user","emailVerified","sendEmailVerification","err","localStorage","getItem","onLogIn","lastSignInTime","Date","metadata","Math","round","getTime","onLogOut","Provider","value","TooltipContext","TooltipProvider","isOpen","setIsOpen","setType","setMessage","hideTooltip","TodoItemContent","fieldsContent","id","endDateActual","classNames","onClick","once","then","snapshot","forEach","childSnapshot","todoRef","Object","keys","update","key","remove","firebaseDeleteTodo","src","deleteIcon","width","height","alt","classTemplate","tableHeadersConfig","class","TodosTable","visibleTodos","tableRows","todosPageState","toggleModal","todosPageSetState","tableHeaders","map","item","scope","term","filter","useMemo","items","filterTodos","toLowerCase","indexOf","searchTodos","values","reverse","importantClass","doneClass","expiredClass","toISOString","onDoubleClick","prevState","selectedItemId","selectItem","Portal","el","document","createElement","classList","add","body","style","overflow","modalHtml","querySelector","append","createPortal","CustomInput","label","labelClass","isRequired","fieldClass","fieldName","placeholder","isError","isTouched","as","htmlFor","name","component","TodosModalContent","newItemId","onToggleModal","setState","initialState","setInitialState","childData","firebaseGetTodoValue","createCustomInput","errors","touched","addTodo","newItem","newTodoKey","push","firebaseAddTodo","editTodo","todosListRef","set","firebaseEditTodo","initialValues","enableReinitialize","validationSchema","onSubmit","setSubmitting","formattedTimeOffset","getTimezoneOffset","includes","replace","getFormattedTimeOffset","todo","isSubmitting","undefined","disabled","SearchPanel","setTerm","onChange","evt","changedTerm","target","StatusFilter","todos","getTodosLengthWithStatusFilter","btnProps","todosCount","buttons","clazz","onFilterChange","TodosControlPanel","Modal","classes","title","onCloseBtnClick","TodosPage","showModal","state","Default","WithSelectedItemClearing","NoteItemContent","creationDate","onDeleted","NotesList","notes","onSelected","overlayText","itemsList","itemProps","CSSTransition","timeout","TransitionGroup","NotesModalContent","onEdited","onAdded","setDescription","preventDefault","NotesPage","getNotes","notesData","notesRef","addItem","createNoteItem","e","lastItemId","RequiredMark","ChangeEmailModalContent","oldEmail","credentials","setCredentials","setEmail","isFirstModal","setIsFirstModal","onCredentialsChange","credential","EmailAuthProvider","reauthenticateWithCredential","verifyBeforeUpdateEmail","Info","ChangePasswordModalContent","oldPassword","setPassword","updatePassword","Success","DeleteAccountModalContent","delete","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","d","fill","props","xmlns","viewBox","SettingsPage","displayName","setName","photoURL","photoUrl","setPhotoUrl","isNameClicked","setIsNameClicked","isAvatarClicked","setIsAvatarClicked","showModalEmailChange","setShowModalEmailChange","showModalPasswordChange","setShowModalPasswordChange","showModalAccountDelete","setShowModalAccountDelete","isGoogleUser","providerData","providerId","toggleEmailChangeModal","prev","togglePasswordChangeModal","toggleAccountDeleteModal","anonymousImg","updateProfile","sendPasswordResetEmail","inputsConfig","SignUpModalContent","createUserWithEmailAndPassword","setItem","finally","firebaseCreateUser","provider","GoogleAuthProvider","signInWithPopup","firebaseCreateUserWithGoogle","to","SignUpPage","SignInModalContent","Boolean","removeItem","signInWithEmailAndPassword","firebaseSignIn","firebaseGoogleSignIn","SignInPage","ResetPasswordModalContent","firebaseSendPasswordResetEmail","ResetPasswordPage","Header","exact","activeClassName","EmailUnverifiedOverlay","Tooltip","timerId","setTimeout","clearTimeout","Transition","in","unmountOnExit","transitionState","App","path","render","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM"],"mappings":"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","file":"static/js/main.ad86426a.chunk.js","sourcesContent":["export type Id = number;\r\n\r\nexport enum TooltipTypes {\r\n  Info = 'info',\r\n  Error = 'error',\r\n  Success = 'success',\r\n}\r\n\r\nexport enum ToggleModalTypes {\r\n  Default = 'default',\r\n  WithSelectedItemClearing = 'withSelectedItemClearing',\r\n}\r\n","import PageTitle from \"./page-title\";\r\nexport default PageTitle;\r\n","import React from 'react';\r\nimport './page-title.css';\r\n\r\ninterface PageTitleProps {\r\n  text: string;\r\n}\r\n\r\nconst PageTitle: React.FC<PageTitleProps> = ({ text }) => {\r\n  return <h1 className=\"page-title\">{text}</h1>;\r\n};\r\n\r\nexport default PageTitle;\r\n","import React from 'react';\r\nimport PageTitle from '../components/page-title/';\r\n\r\nconst MainPage: React.FC = () => (\r\n  <main className=\"main-page\">\r\n    <div className=\"container\">\r\n      <PageTitle text=\"Welcome to the greatest todo app ever!!!\" />\r\n    </div>\r\n  </main>\r\n);\r\n\r\nexport default MainPage;\r\n","import * as Yup from 'yup';\r\n\r\nexport const signUpValidationSchema = Yup.object({\r\n  email: Yup.string().email('Invalid email address').required('Required'),\r\n  password: Yup.string().min(6, 'Must be 6 characters or more').required('Required'),\r\n  repeatPassword: Yup.string()\r\n    .oneOf([Yup.ref('password')], `Passwords don't match`)\r\n    .required('Required'),\r\n});\r\n\r\nexport const signInValidationSchema = signUpValidationSchema.omit(['repeatPassword']).shape({\r\n  rememberMe: Yup.boolean(),\r\n});\r\n\r\nexport const resetPasswordValidationSchema = signUpValidationSchema.pick(['email']);\r\n\r\n// @todo Вынести эти значения в constants.ts\r\nexport const MINUTES_COUNT_IN_HOUR = 60;\r\n\r\n// Корректная длина даты для value календаря в форме todo-шек\r\nexport const CORRECT_DATE_LENGTH = 10;\r\n\r\n// Максимальная длина заголовка, при которой todo-шка смотрится норм\r\nexport const MAX_TITLE_LENGTH = 40;\r\n\r\nexport const todoFormValidationSchema = Yup.object({\r\n  description: Yup.string()\r\n    .max(MAX_TITLE_LENGTH, `Must be ${MAX_TITLE_LENGTH} characters or less`)\r\n    .required('Required'),\r\n  priority: Yup.string().oneOf([`Low`, `Medium`, `High`], `Unexpected value`).required('Required'),\r\n  status: Yup.string()\r\n    .oneOf([`New`, `In progress`, `Done`], `Unexpected value`)\r\n    .required('Required'),\r\n  endDatePlan: Yup.string().max(CORRECT_DATE_LENGTH, 'Incorrect date').required('Required'),\r\n});\r\n","import { MINUTES_COUNT_IN_HOUR } from './validationSchemas';\r\n\r\nexport const getFormattedDate = (date: Date, type: string): string => {\r\n  const currentMonth: number = date.getMonth() + 1;\r\n  const currentDay: number = date.getDate();\r\n  if (type === 'calendar') {\r\n    return `${date.getFullYear()}-${\r\n      String(currentMonth).length == 2 ? currentMonth : '0' + currentMonth\r\n    }-${String(currentDay).length == 2 ? currentDay : '0' + currentDay}`;\r\n  }\r\n  return `${String(currentDay).length == 2 ? currentDay : '0' + currentDay}.${\r\n    String(currentMonth).length == 2 ? currentMonth : '0' + currentMonth\r\n  }.${date.getFullYear()}`;\r\n};\r\n\r\nexport const getFormattedTimeOffset = (): string => {\r\n  // Смещение UTC относительно нашего часового пояса. Например, в Иркутске -8\r\n  let formattedTimeOffset = String(new Date().getTimezoneOffset() / MINUTES_COUNT_IN_HOUR);\r\n\r\n  if (formattedTimeOffset.includes('-')) {\r\n    // Присваеваем formattedTimeOffset смещение относительно UTC, а не нашего часового пояса, меняя знак\r\n    formattedTimeOffset.length == 2\r\n      ? (formattedTimeOffset = formattedTimeOffset.replace('-', '+0'))\r\n      : (formattedTimeOffset = formattedTimeOffset.replace('-', '+'));\r\n  } else {\r\n    formattedTimeOffset.length == 1\r\n      ? (formattedTimeOffset = `-0${formattedTimeOffset}`)\r\n      : (formattedTimeOffset = `-${formattedTimeOffset}`);\r\n  }\r\n  return formattedTimeOffset;\r\n};\r\n\r\nexport const clsx = (classNames: any[]): string =>\r\n  classNames\r\n    .filter((v) => !!v)\r\n    .join(` `)\r\n    .trim();\r\n","import firebase from 'firebase/app';\r\n\r\nimport { ITodoFieldsContent, ITodoItem, ITodosPageState } from '../interfaces';\r\nimport { TooltipTypes, Id } from '../types';\r\n\r\nexport const firebaseCreateUser = (values: any, showTooltip: any, setSubmitting: any) =>\r\n  firebase\r\n    .auth()\r\n    .createUserWithEmailAndPassword(values.email, values.password)\r\n    .then(() => localStorage.setItem('rememberMe', 'true'))\r\n    .catch((err) =>\r\n      showTooltip(TooltipTypes.Error, `Your account didn't be created: ${err.message}`)\r\n    )\r\n    .finally(() => setSubmitting(false));\r\n\r\nexport const firebaseSignIn = (values: any, showTooltip: any, setSubmitting: any) => {\r\n  if (values.rememberMe) {\r\n    localStorage.setItem('rememberMe', 'true');\r\n  } else {\r\n    localStorage.removeItem('rememberMe');\r\n  }\r\n\r\n  firebase\r\n    .auth()\r\n    .signInWithEmailAndPassword(values.email, values.password)\r\n    .catch((err) => showTooltip(TooltipTypes.Error, err.message))\r\n    .finally(() => setSubmitting(false));\r\n};\r\n\r\n// @todo Do i need in almost the same Google signIn/Up?\r\n// @todo  setSubmitting(false)\r\nexport const firebaseCreateUserWithGoogle = (showTooltip: any): void => {\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  firebase\r\n    .auth()\r\n    .signInWithPopup(provider)\r\n    .then(() => localStorage.setItem('rememberMe', 'true'))\r\n    .catch((error) => {\r\n      showTooltip(TooltipTypes.Error, error.message);\r\n    });\r\n};\r\n\r\n// @todo  setSubmitting(false)\r\nexport const firebaseGoogleSignIn = (showTooltip: any): void => {\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n  firebase\r\n    .auth()\r\n    .signInWithPopup(provider)\r\n    .catch((error) => {\r\n      showTooltip(TooltipTypes.Error, error.message);\r\n    });\r\n};\r\n\r\n// @todo  setSubmitting(false)\r\nexport const firebaseSignOut = (\r\n  showTooltip: (type: TooltipTypes, message: string) => void\r\n): Promise<void> =>\r\n  firebase\r\n    .auth()\r\n    .signOut()\r\n    .catch((error) => {\r\n      showTooltip(TooltipTypes.Error, error.message);\r\n    });\r\n\r\nexport const firebaseSendPasswordResetEmail = (\r\n  values: any,\r\n  actionCodeSettings: any,\r\n  showTooltip: any,\r\n  setSubmitting: any\r\n) =>\r\n  firebase\r\n    .auth()\r\n    .sendPasswordResetEmail(values.email, actionCodeSettings)\r\n    .then(() => {\r\n      showTooltip(TooltipTypes.Info, 'The email to reset your password was send');\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(TooltipTypes.Error, err.message);\r\n    })\r\n    .finally(() => setSubmitting(false));\r\n\r\nexport const firebaseConnectDisconnectTodoList = (\r\n  type: 'connect' | 'disconnect',\r\n  currentUser: any,\r\n  showTooltip: any,\r\n  setTodoPageState: React.Dispatch<React.SetStateAction<ITodosPageState>>\r\n) => {\r\n  const getTodos = (elem: firebase.database.DataSnapshot) => {\r\n    setTodoPageState(({ isDataLoaded, ...restParams }) => {\r\n      return {\r\n        isDataLoaded: true,\r\n        ...restParams,\r\n        todosList: elem.child('list').val(),\r\n        lastTodoId: elem.child('lastTodoId').val(),\r\n      };\r\n    });\r\n  };\r\n\r\n  const todosRef = firebase.database().ref('users/' + currentUser.uid + '/todos');\r\n  if (type === 'connect') {\r\n    try {\r\n      todosRef.on('value', getTodos);\r\n    } catch (error: any) {\r\n      showTooltip(TooltipTypes.Error, `Couldn't fetch the todo list: ${error.message}`);\r\n    }\r\n  } else {\r\n    todosRef.off('value', getTodos);\r\n  }\r\n};\r\n\r\n// id используется только один раз за исключением случая, когды мы удалили все элементы. Тогда отстчет начнется заново\r\n// По-хорошему нужно подлезать к предпоследнему (по id) элементу и ставить его id в lastTodoId\r\n// Но все это должно делаться не с фронта\r\nexport const firebaseDeleteTodo = (id: Id, currentUser: any, showTooltip: any): void => {\r\n  const todosRef = firebase.database().ref('users/' + currentUser.uid + '/todos/list');\r\n  todosRef\r\n    .once('value')\r\n    .then((snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        const childData = childSnapshot.val();\r\n        if (childData.id === id) {\r\n          const todoRef = firebase.database().ref('users/' + currentUser.uid + `/todos`);\r\n\r\n          // Если от=стался последний элемент, который мы сейчас удалим\r\n          if (Object.keys(snapshot.val()).length - 1 === 0) {\r\n            todoRef.update({\r\n              [`/list/${childSnapshot.key}`]: null,\r\n              '/lastTodoId': null,\r\n            });\r\n          } else {\r\n            firebase\r\n              .database()\r\n              .ref('users/' + currentUser.uid + `/todos/list/${childSnapshot.key}`)\r\n              .remove();\r\n          }\r\n\r\n          return true;\r\n        }\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(TooltipTypes.Error, `Removing the todo was failed: ${err.message}`);\r\n    });\r\n};\r\n\r\nexport const firebaseAddTodo = (currentUser: any, newItem: ITodoItem, showTooltip: any): void => {\r\n  const todosRef = firebase.database().ref(`users/${currentUser.uid}/todos`);\r\n  const newTodoKey = todosRef.child(`list`).push().key;\r\n\r\n  todosRef\r\n    .update({\r\n      [`list/${newTodoKey}`]: newItem,\r\n      lastTodoId: newItem.id,\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(TooltipTypes.Error, `Todo wasn't added: ${err.message}`);\r\n    });\r\n};\r\n\r\nexport const firebaseEditTodo = (\r\n  currentUser: any,\r\n  selectedItemId: Id | null,\r\n  fieldsContent: ITodoFieldsContent,\r\n  showTooltip: any\r\n) => {\r\n  const todosListRef = firebase.database().ref('users/' + currentUser.uid + '/todos/list');\r\n  todosListRef\r\n    .once('value')\r\n    .then((snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        const childData = childSnapshot.val();\r\n        if (childData.id === selectedItemId) {\r\n          todosListRef.child(`${childSnapshot.key}/fieldsContent`).set({ ...fieldsContent });\r\n\r\n          return true;\r\n        }\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(TooltipTypes.Error, `Editing the task was failed: ${err.message}`);\r\n    });\r\n};\r\n\r\nexport const firebaseGetTodoValue = (\r\n  currentUser: any,\r\n  selectedItemId: Id,\r\n  setInitialState: React.Dispatch<React.SetStateAction<ITodoFieldsContent>>,\r\n  showTooltip: any\r\n) => {\r\n  const todosRef = firebase.database().ref('users/' + currentUser.uid + '/todos/list');\r\n  todosRef\r\n    .once('value')\r\n    .then((snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        const childData = childSnapshot.val();\r\n        if (childData.id === selectedItemId) {\r\n          setInitialState({\r\n            ...childData.fieldsContent,\r\n          });\r\n\r\n          return true;\r\n        }\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(TooltipTypes.Error, `Couldn't take the data about this todo: ${err.message}`);\r\n    });\r\n};\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport firebase from 'firebase/app';\r\n\r\nimport { useTooltipContext } from './index';\r\nimport { TooltipTypes } from '../types';\r\nimport { firebaseSignOut } from '../services/firebase-service';\r\n\r\ninterface AppContextProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\n// @todo По идее мне не нужно указывать тип и аргумент. Нужно посмотреть, как сделать нормально\r\nconst AppContext = React.createContext<any>({});\r\n\r\nexport const useAppContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\n// @todo Не уверен, что корректно давать контексту тип React.FC\r\nexport const AppProvider: React.FC<AppContextProps> = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [currentUser, setCurrentUser] = useState(false);\r\n  const [isUserGet, setUserGet] = useState(false);\r\n\r\n  const actionCodeSettings = {\r\n    url: 'https://vladmokrousov.github.io/doit/build/#/sign-in',\r\n    // url: 'http://localhost:3000/sign-in',\r\n  };\r\n\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        if (!user.emailVerified) {\r\n          user.sendEmailVerification(actionCodeSettings).catch((err) => {\r\n            showTooltip(TooltipTypes.Error, `The email didn't send. ${err.message}`);\r\n          });\r\n        }\r\n        if (!localStorage.getItem('rememberMe')) {\r\n          const lastSignInTime = new Date(user.metadata.lastSignInTime!);\r\n          const lastSignInTimeTimeStamp = Math.round(lastSignInTime.getTime() / 1000);\r\n          const yesterdayTimeStamp = Math.round(new Date().getTime() / 1000) - 24 * 3600;\r\n\r\n          if (lastSignInTimeTimeStamp < yesterdayTimeStamp) {\r\n            firebaseSignOut(showTooltip);\r\n          } else {\r\n            onLogIn(user);\r\n          }\r\n        } else {\r\n          onLogIn(user);\r\n        }\r\n      } else {\r\n        onLogOut();\r\n      }\r\n      setUserGet(true);\r\n    });\r\n  }, []);\r\n\r\n  const onLogIn = (user: any): void => {\r\n    setIsLoggedIn(true);\r\n    setCurrentUser(user);\r\n  };\r\n  const onLogOut = (): void => {\r\n    setIsLoggedIn(false);\r\n    setCurrentUser(false);\r\n  };\r\n\r\n  return isUserGet ? (\r\n    <AppContext.Provider value={{ isLoggedIn, currentUser, actionCodeSettings }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  ) : null;\r\n};\r\n","import React, { useState, useContext } from 'react';\r\nimport { TooltipTypes } from '../types';\r\n\r\ninterface TooltipContextProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\n//По идее мне не нужно указывать тип и аргумент. Нужно посмотреть, как сделать нормально\r\nconst TooltipContext = React.createContext<any>({});\r\n\r\nexport const useTooltipContext = () => {\r\n  return useContext(TooltipContext);\r\n};\r\n\r\n//Не уверен, что корректно давать контексту тип React.FC\r\nexport const TooltipProvider: React.FC<TooltipContextProps> = ({ children }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [type, setType] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  const showTooltip = (type: TooltipTypes, message: string): void => {\r\n    setType(type);\r\n    setMessage(message);\r\n    setIsOpen(true);\r\n  };\r\n  const hideTooltip = (): void => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <TooltipContext.Provider value={{ isOpen, type, message, showTooltip, hideTooltip }}>\r\n      {children}\r\n    </TooltipContext.Provider>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/delete-icon.13e1f8ab.svg\";","import TodoItemContent from \"./todo-item-content\";\r\nexport default TodoItemContent;\r\n","import React from 'react';\r\n\r\nimport { ITodoFieldsContent } from '../../../../interfaces';\r\nimport { Id } from '../../../../types';\r\nimport { getFormattedDate } from '../../../../helpers';\r\nimport { useAppContext, useTooltipContext } from '../../../../context';\r\nimport { firebaseDeleteTodo } from '../../../../services/firebase-service';\r\nimport deleteIcon from '../../../../assets/img/delete-icon.svg';\r\n\r\nimport './todo-item-content.css';\r\n\r\ninterface TodoItemContentProps {\r\n  fieldsContent: ITodoFieldsContent;\r\n  id: Id;\r\n}\r\n\r\nconst TodoItemContent: React.FC<TodoItemContentProps> = ({ fieldsContent, id }) => {\r\n  const { description, status, priority, endDatePlan, endDateActual } = fieldsContent;\r\n\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const classNames = 'table__item-cell';\r\n\r\n  return (\r\n    <>\r\n      <td className={classNames}>\r\n        <span className={`${classNames}--description`}>{description}</span>\r\n      </td>\r\n      <td className={classNames}>\r\n        <span className={`${classNames}--status`}>{status}</span>\r\n      </td>\r\n      <td className={classNames}>\r\n        <span className={`${classNames}--priority`}>{priority}</span>\r\n      </td>\r\n      <td className={classNames}>\r\n        <span className={`${classNames}--datePlan`}>\r\n          {getFormattedDate(new Date(endDatePlan), 'task')}\r\n        </span>\r\n      </td>\r\n      <td className={classNames}>\r\n        <span className={`${classNames}--actualDate`}>\r\n          {endDateActual == '-' ? endDateActual : getFormattedDate(new Date(endDateActual), 'task')}\r\n        </span>\r\n      </td>\r\n      <td className={classNames}>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn table__btn table__btn--del\"\r\n          onClick={() => firebaseDeleteTodo(id, currentUser, showTooltip)}\r\n        >\r\n          <img src={deleteIcon} className=\"delete-icon\" width=\"24\" height=\"24\" alt=\"Delete todo\" />\r\n        </button>\r\n      </td>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoItemContent;\r\n","interface ITableHeaderConfig {\r\n  text: string;\r\n  class: string;\r\n}\r\n\r\nconst classTemplate = 'table__header--';\r\nconst tableHeadersConfig: ITableHeaderConfig[] = [\r\n  {\r\n    text: 'Description',\r\n    class: `${classTemplate}description`,\r\n  },\r\n  {\r\n    text: 'Status',\r\n    class: `${classTemplate}status`,\r\n  },\r\n  {\r\n    text: 'Priority',\r\n    class: `${classTemplate}priority`,\r\n  },\r\n  {\r\n    text: 'End date plan',\r\n    class: `${classTemplate}planDate`,\r\n  },\r\n  {\r\n    text: 'End date actual',\r\n    class: `${classTemplate}actualDate`,\r\n  },\r\n  {\r\n    text: 'Action',\r\n    class: `${classTemplate}action`,\r\n  },\r\n];\r\n\r\nexport default tableHeadersConfig;\r\n","import TodosTable from './todos-table';\r\nexport default TodosTable;\r\n","import React, { useMemo } from 'react';\r\n\r\nimport TodoItemContent from '../todo-item-content';\r\nimport tableHeadersConfig from './tableHeaderConfig';\r\nimport { ITodoItem, ITodosPageState } from '../../../../interfaces';\r\nimport { Id, ToggleModalTypes } from '../../../../types';\r\n\r\nimport './todos-table.css';\r\n\r\ninterface TodosTableProps {\r\n  todosPageState: ITodosPageState;\r\n  toggleModal: (type?: ToggleModalTypes) => void;\r\n  todosPageSetState: React.Dispatch<React.SetStateAction<ITodosPageState>>;\r\n}\r\n\r\nconst TodosTable: React.FC<TodosTableProps> = ({\r\n  todosPageState,\r\n  toggleModal,\r\n  todosPageSetState,\r\n}) => {\r\n  const tableHeaders: JSX.Element[] = tableHeadersConfig.map((item) => (\r\n    <th key={item.text} className={`table__header ${item.class}`} scope=\"col\">\r\n      {item.text}\r\n    </th>\r\n  ));\r\n\r\n  let visibleTodos: ITodoItem[] | undefined;\r\n  let tableRows: JSX.Element[] | undefined;\r\n\r\n  const { todosList, term, filter } = todosPageState;\r\n\r\n  if (todosList) {\r\n    const searchTodos = (items: ITodoItem[], term: string): ITodoItem[] =>\r\n      term.length === 0\r\n        ? items\r\n        : items.filter(\r\n            (item) => item.fieldsContent.description.toLowerCase().indexOf(term.toLowerCase()) > -1\r\n          );\r\n\r\n    const filterTodos = (items: ITodoItem[], filter: string): ITodoItem[] => {\r\n      switch (filter) {\r\n        case 'all':\r\n          return items;\r\n        case 'new':\r\n          return items.filter((item) => item.fieldsContent.status == 'New');\r\n        case 'inProgress':\r\n          return items.filter((item) => item.fieldsContent.status == 'In progress');\r\n        case 'done':\r\n          return items.filter((item) => item.fieldsContent.status == 'Done');\r\n\r\n        default:\r\n          return items;\r\n      }\r\n    };\r\n\r\n    // @todo Опять не учтена работа с большим количеством элементов. Reverse - не выход\r\n    visibleTodos = useMemo(\r\n      () => filterTodos(searchTodos(Object.values(todosList), term), filter).reverse(),\r\n      [todosList, term, filter]\r\n    );\r\n\r\n    const selectItem = (id: Id): void => {\r\n      todosPageSetState((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          selectedItemId: id,\r\n        };\r\n      });\r\n\r\n      toggleModal();\r\n    };\r\n\r\n    tableRows = visibleTodos.map((item: ITodoItem): JSX.Element => {\r\n      const { id, fieldsContent } = item;\r\n\r\n      const importantClass = fieldsContent.priority == 'High' ? 'table__item--important' : '';\r\n      const doneClass = fieldsContent.status == 'Done' ? 'table__item--done' : '';\r\n      const expiredClass =\r\n        fieldsContent.endDateActual != '-'\r\n          ? fieldsContent.endDateActual < fieldsContent.endDatePlan\r\n            ? ''\r\n            : 'table__item--expired'\r\n          : new Date().toISOString() > fieldsContent.endDatePlan\r\n          ? 'table__item--expired'\r\n          : '';\r\n\r\n      return (\r\n        <tr\r\n          className={`table__item ${doneClass} ${importantClass} ${expiredClass}`}\r\n          key={id}\r\n          onDoubleClick={() => selectItem(id)}\r\n        >\r\n          <TodoItemContent fieldsContent={fieldsContent} id={id} />\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      <table className=\"table table--todo\">\r\n        <thead>\r\n          <tr className=\"table__headers table--todo__headers\">{tableHeaders}</tr>\r\n        </thead>\r\n        <tbody>{visibleTodos && tableRows}</tbody>\r\n      </table>\r\n      {!visibleTodos && <span>You can sleep soundly</span>}\r\n    </>\r\n  );\r\n};\r\nexport default TodosTable;\r\n","import Portal from \"./portal\";\r\nexport default Portal;\r\n","import React, { ReactNode, useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nimport './portal.css';\r\n\r\ninterface PortalProps {\r\n  children: ReactNode;\r\n}\r\n\r\nconst Portal: React.FC<PortalProps> = ({ children }) => {\r\n  const el: HTMLDivElement = document.createElement('div');\r\n  el.classList.add('overlay');\r\n\r\n  useEffect(() => {\r\n    document.body.style.overflow = 'hidden';\r\n    // document.querySelector(\"#modal\").append(el);\r\n\r\n    const modalHtml: HTMLDivElement | null = document.querySelector('#modal');\r\n    if (modalHtml) {\r\n      modalHtml.append(el);\r\n    }\r\n\r\n    return () => {\r\n      el.remove();\r\n      document.body.style.overflow = 'visible';\r\n    };\r\n  }, [children]);\r\n\r\n  return createPortal(children, el);\r\n};\r\n\r\nexport default Portal;\r\n","import React from 'react';\r\nimport { Field, ErrorMessage } from 'formik';\r\n\r\nimport { ICustomInput } from '../../interfaces';\r\nimport './customInput.css';\r\n\r\nconst CustomInput: React.FC<ICustomInput> = ({\r\n  label,\r\n  labelClass,\r\n  isRequired,\r\n  fieldClass,\r\n  type,\r\n  fieldName,\r\n  placeholder,\r\n  isError,\r\n  isTouched,\r\n  as,\r\n  children,\r\n}) => (\r\n  <>\r\n    <label className={`label ${labelClass ? labelClass : ''}`} htmlFor={fieldName}>\r\n      {label}\r\n      {isRequired && <sup className=\"label-required\">*</sup>}:\r\n    </label>\r\n    <div className=\"field-with-error-wrapper\">\r\n      <Field\r\n        className={`field ${fieldClass ? fieldClass : ''} ${\r\n          isError && isTouched ? `field--error` : ''\r\n        }`}\r\n        id={fieldName}\r\n        type={type}\r\n        name={fieldName}\r\n        placeholder={placeholder}\r\n        as={as}\r\n      >\r\n        {children}\r\n      </Field>\r\n\r\n      <ErrorMessage name={fieldName} component=\"span\" className=\"error-message\" />\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default CustomInput;\r\n","import TodosModalContent from './todos-modal-content';\r\nexport default TodosModalContent;\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport { useAppContext, useTooltipContext } from '../../../../context';\r\nimport { ITodoFieldsContent, ITodoItem, ITodosPageState } from '../../../../interfaces';\r\nimport { Id, ToggleModalTypes } from '../../../../types';\r\nimport { getFormattedDate, getFormattedTimeOffset } from '../../../../helpers';\r\nimport { todoFormValidationSchema } from '../../../../validationSchemas';\r\nimport CustomInput from '../../../../components/customInput/customInput';\r\nimport {\r\n  firebaseAddTodo,\r\n  firebaseEditTodo,\r\n  firebaseGetTodoValue,\r\n} from '../../../../services/firebase-service';\r\n\r\nimport './todos-modal-content.css';\r\n\r\ninterface IPartOfFormikBag {\r\n  setSubmitting: (isSubmitting: boolean) => void;\r\n}\r\n\r\ninterface ITodosModalProps {\r\n  selectedItemId: Id | null;\r\n  newItemId: Id;\r\n  onToggleModal: (type?: ToggleModalTypes) => void;\r\n  setState: React.Dispatch<React.SetStateAction<ITodosPageState>>;\r\n}\r\n\r\nconst TodosModalContent: React.FC<ITodosModalProps> = ({\r\n  selectedItemId,\r\n  newItemId,\r\n  onToggleModal,\r\n  setState,\r\n}) => {\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [initialState, setInitialState] = useState<ITodoFieldsContent>({\r\n    description: '',\r\n    priority: 'Low',\r\n    status: 'New',\r\n    endDatePlan: '',\r\n    endDateActual: '-',\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedItemId) {\r\n      firebaseGetTodoValue(currentUser, selectedItemId, setInitialState, showTooltip);\r\n    }\r\n  }, []);\r\n\r\n  const createCustomInput = (\r\n    label: string,\r\n    isRequired: boolean,\r\n    type: string | undefined,\r\n    fieldName: string,\r\n    placeholder: string | undefined,\r\n    errors: any,\r\n    touched: any,\r\n    as: any,\r\n    children?: React.ReactNode\r\n  ) => (\r\n    <div className=\"todos-form__field-wrapper\">\r\n      <CustomInput\r\n        label={label}\r\n        labelClass=\"todos-form__label\"\r\n        isRequired={isRequired}\r\n        fieldClass=\"todos-form__field\"\r\n        type={type}\r\n        fieldName={fieldName}\r\n        placeholder={placeholder}\r\n        isError={fieldName in errors}\r\n        isTouched={fieldName in touched}\r\n        as={as}\r\n        children={children}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  const addTodo = (fieldsContent: ITodoFieldsContent): void => {\r\n    const newItem: ITodoItem = {\r\n      fieldsContent,\r\n      id: newItemId,\r\n    };\r\n\r\n    firebaseAddTodo(currentUser, newItem, showTooltip);\r\n  };\r\n\r\n  const editTodo = (fieldsContent: ITodoFieldsContent): void => {\r\n    firebaseEditTodo(currentUser, selectedItemId, fieldsContent, showTooltip);\r\n    // @todo Сетать нужно когда взаимодействие с firebase успешно завершится\r\n    setState(({ selectedItemId, ...restParams }) => ({\r\n      selectedItemId: null,\r\n      ...restParams,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (\r\n    values: Omit<ITodoFieldsContent, 'endDateActual'>,\r\n    { setSubmitting }: IPartOfFormikBag\r\n  ) => {\r\n    // Пример даты, которая хранится в values.endDatePlan 2021-09-10\r\n    // Формат ниже нужен, чтобы задача считалась просроченной только тогда, когда у нас наступит 00:00 дня, следующего за тем, который мы обозначили в endDatePlan\r\n    const endDatePlan = new Date(\r\n      `${values.endDatePlan}T23:59:59.000${getFormattedTimeOffset()}:00`\r\n    ).toISOString();\r\n\r\n    const endDateActual =\r\n      values.status == 'Done' && initialState.endDateActual === '-'\r\n        ? new Date().toISOString()\r\n        : initialState.endDateActual;\r\n\r\n    const todo = {\r\n      ...values,\r\n      endDatePlan,\r\n      endDateActual,\r\n    };\r\n    if (selectedItemId) {\r\n      editTodo(todo);\r\n    } else {\r\n      addTodo(todo);\r\n    }\r\n\r\n    // @todo По идее, нужно выполнять действия снизу только когда взаимодействие с firebase из addTodo и editTodo успешно завершится\r\n    setSubmitting(false);\r\n\r\n    onToggleModal();\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        description: initialState.description,\r\n        priority: initialState.priority,\r\n        status: initialState.status,\r\n        endDatePlan: initialState.endDatePlan\r\n          ? getFormattedDate(new Date(initialState.endDatePlan), 'calendar')\r\n          : initialState.endDatePlan,\r\n      }}\r\n      enableReinitialize={true}\r\n      validationSchema={todoFormValidationSchema}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {({ isSubmitting, errors, touched }) => (\r\n        <Form className=\"todos-form\">\r\n          {useMemo(\r\n            () =>\r\n              createCustomInput(\r\n                `Description`,\r\n                true,\r\n                `text`,\r\n                `description`,\r\n                `What must be to do?`,\r\n                errors,\r\n                touched,\r\n                undefined\r\n              ),\r\n            [errors, touched]\r\n          )}\r\n          <div className=\"todos-form__fields-group-wrapper\">\r\n            {useMemo(\r\n              () =>\r\n                createCustomInput(\r\n                  `Priority`,\r\n                  true,\r\n                  undefined,\r\n                  `priority`,\r\n                  undefined,\r\n                  errors,\r\n                  touched,\r\n                  `select`,\r\n                  [\r\n                    <option key=\"Low\" value=\"Low\">\r\n                      Low\r\n                    </option>,\r\n                    <option key=\"Medium\" value=\"Medium\">\r\n                      Medium\r\n                    </option>,\r\n                    <option key=\"High\" value=\"High\">\r\n                      High\r\n                    </option>,\r\n                  ]\r\n                ),\r\n              [errors, touched]\r\n            )}\r\n            {useMemo(\r\n              () =>\r\n                createCustomInput(\r\n                  `Status`,\r\n                  true,\r\n                  undefined,\r\n                  `status`,\r\n                  undefined,\r\n                  errors,\r\n                  touched,\r\n                  `select`,\r\n                  [\r\n                    <option key=\"New\" value=\"New\">\r\n                      New\r\n                    </option>,\r\n                    <option key=\"In progress\" value=\"In progress\">\r\n                      In progress\r\n                    </option>,\r\n                    <option key=\"Done\" value=\"Done\">\r\n                      Done\r\n                    </option>,\r\n                  ]\r\n                ),\r\n              [errors, touched]\r\n            )}\r\n          </div>\r\n\r\n          {/* Эта проверка была раньше на календаре. Нужно перенести ее на кастомный календарь\r\n          min={getFormattedDate(new Date(), 'calendar')}\r\n           */}\r\n          {useMemo(\r\n            () =>\r\n              createCustomInput(\r\n                `End Date`,\r\n                true,\r\n                `date`,\r\n                `endDatePlan`,\r\n                undefined,\r\n                errors,\r\n                touched,\r\n                undefined\r\n              ),\r\n            [errors, touched]\r\n          )}\r\n\r\n          <button className=\"todos-form__submit-btn\" type=\"submit\" disabled={isSubmitting}>\r\n            Save\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default TodosModalContent;\r\n","import SearchPanel from \"./search-panel\";\r\nexport default SearchPanel;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITodosPageState } from '../../../../interfaces';\r\n\r\nimport './search-panel.css';\r\n\r\ninterface SearchPanelProps {\r\n  setState: React.Dispatch<React.SetStateAction<ITodosPageState>>;\r\n}\r\n\r\nconst SearchPanel: React.FC<SearchPanelProps> = ({ setState }) => {\r\n  const [term, setTerm] = useState('');\r\n\r\n  const onSearchReplace = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const changedTerm = evt.target.value;\r\n    setTerm(changedTerm);\r\n\r\n    setState((prevState) => ({ ...prevState, term: changedTerm }));\r\n  };\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Search by description\"\r\n      className=\"search-input\"\r\n      value={term}\r\n      onChange={onSearchReplace}\r\n    />\r\n  );\r\n};\r\nexport default SearchPanel;\r\n","import StatusFilter from \"./status-filter\";\r\nexport default StatusFilter;\r\n","import React from 'react';\r\n\r\nimport { ITodosList, ITodosPageState } from '../../../../interfaces';\r\n\r\nimport './status-filter.css';\r\n\r\ninterface IBtnProps {\r\n  name: string;\r\n  label: string;\r\n  todosCount?: number;\r\n}\r\n\r\ninterface StatusFilterProps {\r\n  todosList: ITodosList;\r\n  filter: string;\r\n  setState: React.Dispatch<React.SetStateAction<ITodosPageState>>;\r\n}\r\n\r\nconst StatusFilter: React.FC<StatusFilterProps> = ({ todosList, filter, setState }) => {\r\n  // @todo пагинация и большое количество items не предусмотрены\r\n  const todos = Object.values(todosList);\r\n  const getTodosLengthWithStatusFilter = (status: 'New' | 'In progress' | 'Done') =>\r\n    todos.filter((item) => item.fieldsContent.status == status).length;\r\n\r\n  const btnProps: IBtnProps[] = [\r\n    {\r\n      name: 'inProgress',\r\n      label: 'In progress',\r\n      todosCount: getTodosLengthWithStatusFilter('In progress'),\r\n    },\r\n    { name: 'new', label: 'New', todosCount: getTodosLengthWithStatusFilter('New') },\r\n    { name: 'done', label: 'Done', todosCount: getTodosLengthWithStatusFilter('Done') },\r\n    { name: 'all', label: 'All', todosCount: todos.length },\r\n  ];\r\n\r\n  const onFilterChange = (filter: string): void =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      filter,\r\n    }));\r\n\r\n  const buttons: JSX.Element[] = btnProps.map(({ name, label, todosCount }) => {\r\n    const isActive = filter === name;\r\n    const clazz = isActive ? 'status-filter__btn--active' : '';\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        className={`status-filter__btn btn ${clazz}`}\r\n        key={name}\r\n        onClick={() => onFilterChange(name)}\r\n      >\r\n        {`${label} - ${todosCount}`}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return <div className=\"status-filter\">{buttons}</div>;\r\n};\r\n\r\nexport default StatusFilter;\r\n","import React from 'react';\r\n\r\nimport { ITodosList, ITodosPageState } from '../../../../interfaces';\r\nimport SearchPanel from '../search-panel';\r\nimport StatusFilter from '../status-filter';\r\n\r\nimport './todos-control-panel.css';\r\n\r\ninterface TodosControlPanelProps {\r\n  todosList: ITodosList | null;\r\n  filter: string;\r\n  onToggleModal: (evt?: any) => void;\r\n  setState: React.Dispatch<React.SetStateAction<ITodosPageState>>;\r\n}\r\n\r\nconst TodosControlPanel: React.FC<TodosControlPanelProps> = ({\r\n  todosList,\r\n  filter,\r\n  onToggleModal,\r\n  setState,\r\n}) => {\r\n  return (\r\n    <div className={`todos-page__control-panel ${!todosList ? 'flex-wrapper' : ``}`}>\r\n      <button className=\"todos-page__add-task-btn\" onClick={onToggleModal}>\r\n        Add task\r\n      </button>\r\n      {todosList && (\r\n        <>\r\n          <SearchPanel setState={setState} />\r\n          <StatusFilter todosList={todosList} filter={filter} setState={setState} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default TodosControlPanel;\r\n","import Modal from './modal';\r\nexport default Modal;\r\n","import React, { ReactNode } from 'react';\r\nimport './modal.css';\r\n\r\ninterface IModal {\r\n  classes: string;\r\n  title: string;\r\n  onCloseBtnClick?: (evt: any) => void;\r\n  children: ReactNode;\r\n}\r\n\r\nconst Modal: React.FC<IModal> = ({ classes, title, onCloseBtnClick, children }) => (\r\n  <section className={`modal ${classes}`}>\r\n    <h2 className=\"modal__title\">{title}</h2>\r\n    {onCloseBtnClick && (\r\n      <button className=\"modal__close\" onClick={onCloseBtnClick}>\r\n        <span className=\"visually-hidden\">Закрыть</span>\r\n      </button>\r\n    )}\r\n    {children}\r\n  </section>\r\n);\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport PageTitle from '../../components/page-title';\r\nimport TodosTable from './components/todos-table';\r\nimport Portal from '../../components/portal';\r\nimport TodosModalContent from './components/todos-modal-content';\r\nimport TodosControlPanel from './components/todos-control-panel';\r\nimport Modal from '../../components/modal';\r\nimport { useAppContext, useTooltipContext } from '../../context';\r\nimport { ITodosPageState } from '../../interfaces';\r\nimport { Id, ToggleModalTypes } from '../../types';\r\nimport { firebaseConnectDisconnectTodoList } from '../../services/firebase-service';\r\n\r\nconst TodosPage: React.FC = () => {\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [state, setState] = useState<ITodosPageState>({\r\n    term: '',\r\n    filter: 'inProgress',\r\n    showModal: false,\r\n    selectedItemId: null,\r\n    isDataLoaded: false,\r\n    todosList: null,\r\n    lastTodoId: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    firebaseConnectDisconnectTodoList('connect', currentUser, showTooltip, setState);\r\n\r\n    return () => {\r\n      firebaseConnectDisconnectTodoList('disconnect', currentUser, showTooltip, setState);\r\n    };\r\n  }, []);\r\n\r\n  let newItemId: Id = state.lastTodoId ? state.lastTodoId + 1 : 100;\r\n\r\n  const toggleModal = (type: ToggleModalTypes = ToggleModalTypes.Default): void => {\r\n    setState(({ showModal, selectedItemId, ...restParams }) => {\r\n      return {\r\n        ...restParams,\r\n        showModal: !showModal,\r\n        selectedItemId: type === ToggleModalTypes.WithSelectedItemClearing ? null : selectedItemId,\r\n      };\r\n    });\r\n  };\r\n\r\n  const { todosList, filter, showModal, selectedItemId } = state;\r\n\r\n  return (\r\n    <main className=\"todos-page\">\r\n      <div className=\"container\">\r\n        <PageTitle text=\"Todo List\" />\r\n        {state.isDataLoaded ? (\r\n          <>\r\n            <TodosControlPanel\r\n              todosList={todosList}\r\n              filter={filter}\r\n              onToggleModal={() => toggleModal()}\r\n              setState={setState}\r\n            />\r\n\r\n            <TodosTable\r\n              todosPageState={state}\r\n              toggleModal={toggleModal}\r\n              todosPageSetState={setState}\r\n            />\r\n\r\n            {showModal && (\r\n              <Portal>\r\n                <Modal\r\n                  classes=\"modal--todos\"\r\n                  title={selectedItemId ? 'Edit task' : 'Add task'}\r\n                  onCloseBtnClick={() => toggleModal(ToggleModalTypes.WithSelectedItemClearing)}\r\n                >\r\n                  <TodosModalContent\r\n                    newItemId={newItemId}\r\n                    onToggleModal={toggleModal}\r\n                    selectedItemId={selectedItemId}\r\n                    setState={setState}\r\n                  />\r\n                </Modal>\r\n              </Portal>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <span>Loading...</span>\r\n        )}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default TodosPage;\r\n","import NoteItemContent from './note-item-content';\r\nexport default NoteItemContent;\r\n","import React from 'react';\r\n\r\nimport { getFormattedDate } from '../../../../helpers';\r\nimport deleteIcon from '../../../../assets/img/delete-icon.svg';\r\n\r\nimport './note-item-content.css';\r\n\r\ninterface NoteItemContentProps {\r\n  creationDate: string;\r\n  description: string;\r\n  onDeleted: () => any;\r\n  // onDeleted: () => (id: Id) => void\r\n}\r\n\r\nconst NoteItemContent: React.FC<NoteItemContentProps> = ({\r\n  creationDate,\r\n  description,\r\n  onDeleted,\r\n}) => (\r\n  <>\r\n    <div className=\"note__header\">\r\n      <span>{getFormattedDate(new Date(creationDate), 'note')}</span>\r\n      <button type=\"button\" className=\"btn note__btn note__btn--del\" onClick={onDeleted}>\r\n        <img src={deleteIcon} className=\"delete-icon\" width=\"24\" height=\"24\" alt=\"Delete note\" />\r\n      </button>\r\n    </div>\r\n    <p className=\"note__description\">{description}</p>\r\n  </>\r\n);\r\n\r\nexport default NoteItemContent;\r\n","import NotesList from './notes-list';\r\nexport default NotesList;\r\n","import React from 'react';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\n\r\nimport NoteItemContent from '../note-item-content';\r\nimport { INoteItem } from '../../../../interfaces';\r\nimport { Id } from '../../../../types';\r\nimport './notes-list.css';\r\n\r\ninterface NotesListProps {\r\n  notes?: INoteItem[];\r\n  onDeleted?: (id: Id) => void;\r\n  onSelected?: (evt: React.MouseEvent<HTMLLIElement>, id: Id) => void;\r\n  overlayText?: string;\r\n}\r\n\r\nconst NotesList: React.FC<NotesListProps> = ({ notes, onDeleted, onSelected, overlayText }) => {\r\n  if (notes && onDeleted && onSelected) {\r\n    const itemsList: JSX.Element[] = notes.map((item: INoteItem): JSX.Element => {\r\n      const { id, ...itemProps } = item;\r\n\r\n      return (\r\n        <CSSTransition key={id} timeout={500} classNames=\"list__item\">\r\n          <li className=\"list__item\" onDoubleClick={(evt) => onSelected(evt, id)}>\r\n            <NoteItemContent {...itemProps} onDeleted={() => onDeleted(id)} />\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <ul className=\"list list--notes\">\r\n        <TransitionGroup component={null}>{itemsList}</TransitionGroup>\r\n      </ul>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <ul className=\"list list--notes\"></ul>\r\n      <span>{overlayText}</span>\r\n    </>\r\n  );\r\n};\r\nexport default NotesList;\r\n","import NotesModalContent from './notes-modal-content';\r\nexport default NotesModalContent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useAppContext, useTooltipContext } from '../../../../context';\r\nimport { Id, TooltipTypes } from '../../../../types';\r\nimport firebase from 'firebase/app';\r\nimport './notes-modal-content.css';\r\n\r\ninterface NotesModalProps {\r\n  selectedItemId: Id | false;\r\n  onEdited?: (description: string) => void;\r\n  onAdded: (description: string) => void;\r\n  onToggleModal: (evt?: any) => void;\r\n}\r\n\r\nconst NotesModalContent: React.FC<NotesModalProps> = ({\r\n  selectedItemId,\r\n  onEdited,\r\n  onAdded,\r\n  onToggleModal,\r\n}) => {\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n  const [description, setDescription] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (selectedItemId) {\r\n      const notesRef = firebase.database().ref('users/' + currentUser.uid + '/notes');\r\n      notesRef\r\n        .once('value')\r\n        .then((snapshot) => {\r\n          snapshot.forEach((childSnapshot) => {\r\n            const childData = childSnapshot.val();\r\n            if (childData.id === selectedItemId) {\r\n              setDescription(childData.description);\r\n\r\n              return true;\r\n            }\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          showTooltip(TooltipTypes.Error, `Couldn't take the data from DB: ${error.message}`);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const onDescriptionChange = (evt: React.ChangeEvent<HTMLTextAreaElement>): void => {\r\n    setDescription(evt.target.value);\r\n  };\r\n\r\n  const onSubmit = (evt: React.FormEvent<HTMLFormElement>): void => {\r\n    evt.preventDefault();\r\n\r\n    if (selectedItemId) {\r\n      onEdited!(description);\r\n    } else {\r\n      onAdded(description);\r\n    }\r\n\r\n    onToggleModal();\r\n  };\r\n\r\n  return (\r\n    <form className=\"notes-form\" onSubmit={onSubmit}>\r\n      <label className=\"notes-form__label\" htmlFor=\"description\">\r\n        Description<sup className=\"notes-form__label-required\">*</sup>:\r\n      </label>\r\n      <textarea\r\n        className=\"notes-form__field notes-form__field--description\"\r\n        id=\"description\"\r\n        name=\"description\"\r\n        onChange={onDescriptionChange}\r\n        placeholder=\"Type something:)\"\r\n        value={description}\r\n        required\r\n      />\r\n\r\n      <button className=\"notes-form__submit-btn\">Save</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NotesModalContent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport firebase from 'firebase/app';\r\n\r\nimport PageTitle from '../../components/page-title';\r\nimport NotesList from './components/notes-list';\r\nimport Portal from '../../components/portal';\r\nimport NotesModalContent from './components/notes-modal-content';\r\nimport Modal from '../../components/modal';\r\nimport { useAppContext, useTooltipContext } from '../../context';\r\nimport { INoteItem } from '../../interfaces';\r\nimport { Id, ToggleModalTypes, TooltipTypes } from '../../types';\r\n\r\nimport './index.css';\r\n\r\ninterface INotesData {\r\n  [key: string]: INoteItem;\r\n}\r\n\r\ninterface INotesPageState {\r\n  notesData?: INotesData;\r\n  showModal: boolean;\r\n  selectedItemId: Id | false;\r\n  isDataLoaded: boolean;\r\n}\r\n\r\nconst NotesPage: React.FC = () => {\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n  const [state, setState] = useState<INotesPageState>({\r\n    showModal: false,\r\n    selectedItemId: false,\r\n    isDataLoaded: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // @todo Обернуть в try catch?\r\n    const getNotes = (elem: firebase.database.DataSnapshot) => {\r\n      setState(({ isDataLoaded, ...restParams }) => {\r\n        return {\r\n          isDataLoaded: true,\r\n          ...restParams,\r\n          notesData: elem.val(),\r\n        };\r\n      });\r\n    };\r\n    const notesRef = firebase.database().ref('users/' + currentUser.uid + '/notes');\r\n    notesRef.on('value', getNotes);\r\n\r\n    return () => {\r\n      notesRef.off('value', getNotes);\r\n    };\r\n  }, []);\r\n\r\n  if (state.isDataLoaded) {\r\n    let newItemId: Id = 100;\r\n\r\n    const createNoteItem = (description: string): INoteItem => {\r\n      return {\r\n        description,\r\n        // creationDate: getCurrentFormattedDate(),\r\n        creationDate: new Date().toISOString(),\r\n        id: newItemId,\r\n      };\r\n    };\r\n\r\n    const addItem = (description: string): void => {\r\n      const newItem: INoteItem = createNoteItem(description);\r\n\r\n      firebase\r\n        .database()\r\n        .ref('users/' + currentUser.uid + '/notes')\r\n        .push(newItem)\r\n        .catch((e) => {\r\n          showTooltip(TooltipTypes.Error, `Add item failed: ${e.message}`);\r\n        });\r\n    };\r\n\r\n    const toggleModal = (type: ToggleModalTypes = ToggleModalTypes.Default): void => {\r\n      setState(({ showModal, selectedItemId, ...restParams }) => {\r\n        return {\r\n          ...restParams,\r\n          showModal: !showModal,\r\n          selectedItemId: type === `withSelectedItemClearing` ? false : selectedItemId,\r\n        };\r\n      });\r\n    };\r\n\r\n    if (state.notesData) {\r\n      let lastItemId: Id = 100;\r\n\r\n      Object.values(state.notesData).forEach((item) => {\r\n        if (item.id > lastItemId) {\r\n          lastItemId = item.id;\r\n        }\r\n      });\r\n      newItemId = lastItemId + 1;\r\n\r\n      const deleteItem = (id: Id): void => {\r\n        const notesRef = firebase.database().ref('users/' + currentUser.uid + '/notes');\r\n        notesRef\r\n          .once('value')\r\n          .then((snapshot) => {\r\n            snapshot.forEach((childSnapshot) => {\r\n              const childData = childSnapshot.val();\r\n              if (childData.id === id) {\r\n                firebase\r\n                  .database()\r\n                  .ref('users/' + currentUser.uid + `/notes/${childSnapshot.key}`)\r\n                  .remove()\r\n                  .catch((error) => {\r\n                    showTooltip(TooltipTypes.Error, `Remove failed: ${error.message}`);\r\n                  });\r\n                return true;\r\n              }\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            showTooltip(TooltipTypes.Error, `Couldn't take the data from DB: ${error.message}`);\r\n          });\r\n      };\r\n\r\n      const editItem = (description: string): void => {\r\n        const notesRef = firebase.database().ref('users/' + currentUser.uid + '/notes');\r\n        notesRef\r\n          .once('value')\r\n          .then((snapshot) => {\r\n            snapshot.forEach((childSnapshot) => {\r\n              const childData = childSnapshot.val();\r\n              if (childData.id === state.selectedItemId) {\r\n                firebase\r\n                  .database()\r\n                  .ref('users/' + currentUser.uid + `/notes/${childSnapshot.key}/description`)\r\n                  .set(description)\r\n                  .catch((error) => {\r\n                    showTooltip(TooltipTypes.Error, `Edit item failed: ${error.message}`);\r\n                  });\r\n                return true;\r\n              }\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            showTooltip(TooltipTypes.Error, `Couldn't take the data from DB: ${error.message}`);\r\n          });\r\n\r\n        setState(({ selectedItemId, ...restParams }) => {\r\n          return {\r\n            selectedItemId: false,\r\n            ...restParams,\r\n          };\r\n        });\r\n      };\r\n\r\n      const selectItem = (evt: React.MouseEvent<HTMLLIElement>, id: Id): void => {\r\n        setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            selectedItemId: id,\r\n          };\r\n        });\r\n\r\n        toggleModal();\r\n      };\r\n\r\n      const { notesData, showModal, selectedItemId } = state;\r\n\r\n      return (\r\n        <main className=\"notes-page\">\r\n          <div className=\"container\">\r\n            <PageTitle text=\"Notes\" />\r\n            <button className=\"notes-page__add-note-btn\" onClick={() => toggleModal()}>\r\n              Add note\r\n            </button>\r\n            <NotesList\r\n              notes={Object.values(notesData).reverse()}\r\n              onDeleted={deleteItem}\r\n              onSelected={selectItem}\r\n            />\r\n            {showModal && (\r\n              <Portal>\r\n                <Modal\r\n                  classes=\"modal--notes\"\r\n                  title={selectedItemId ? 'Edit note' : 'Add note'}\r\n                  onCloseBtnClick={() => toggleModal(ToggleModalTypes.WithSelectedItemClearing)}\r\n                >\r\n                  <NotesModalContent\r\n                    onAdded={addItem}\r\n                    onEdited={editItem}\r\n                    onToggleModal={() => toggleModal()}\r\n                    selectedItemId={selectedItemId}\r\n                  />\r\n                </Modal>\r\n              </Portal>\r\n            )}\r\n          </div>\r\n        </main>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <main className=\"notes-page\">\r\n        <div className=\"container\">\r\n          <PageTitle text=\"Notes\" />\r\n          <button className=\"notes-page__add-note-btn\" onClick={() => toggleModal()}>\r\n            Add note\r\n          </button>\r\n          <NotesList overlayText=\"You can sleep soundly\" />\r\n          {state.showModal && (\r\n            <Portal>\r\n              <Modal\r\n                classes=\"modal--notes\"\r\n                title=\"Add note\"\r\n                onCloseBtnClick={() => toggleModal(ToggleModalTypes.WithSelectedItemClearing)}\r\n              >\r\n                <NotesModalContent\r\n                  onAdded={addItem}\r\n                  onToggleModal={() => toggleModal()}\r\n                  selectedItemId={false}\r\n                />\r\n              </Modal>\r\n            </Portal>\r\n          )}\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <main className=\"notes-page\">\r\n      <div className=\"container\">\r\n        <PageTitle text=\"Notes\" />\r\n        <span>Loading...</span>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default NotesPage;\r\n","import RequiredMark from './required-mark';\r\nexport default RequiredMark;\r\n","import React from 'react';\r\nimport './required-mark.css';\r\n\r\nconst RequiredMark = (): JSX.Element => <sup className=\"required-mark\">*</sup>;\r\nexport default RequiredMark;\r\n","import ChangeEmailModalContent from './change-email-modal-content';\r\nexport default ChangeEmailModalContent;\r\n","import React, { useState } from 'react';\r\nimport firebase from 'firebase/app';\r\n\r\nimport { useTooltipContext } from '../../../../context';\r\nimport RequiredMark from '../../../../components/required-mark';\r\nimport { TooltipTypes } from '../../../../types';\r\nimport './change-email-modal-content.css';\r\n\r\ninterface ChangeEmailModalProps {\r\n  onToggleModal: (evt: any) => void;\r\n  user: any;\r\n  actionCodeSettings: any;\r\n}\r\ninterface IConfirmCredentials {\r\n  oldEmail: string;\r\n  password: string;\r\n}\r\n\r\nconst ChangeEmailModalContent: React.FC<ChangeEmailModalProps> = ({\r\n  onToggleModal,\r\n  user,\r\n  actionCodeSettings,\r\n}) => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [credentials, setCredentials] = useState<IConfirmCredentials>({\r\n    oldEmail: user.email,\r\n    password: '',\r\n  });\r\n  const [email, setEmail] = useState('');\r\n  const [isFirstModal, setIsFirstModal] = useState(true);\r\n\r\n  const onCredentialsChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const id: string = evt.target.id;\r\n    const value: string = evt.target.value;\r\n\r\n    setCredentials((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        [id]: value,\r\n      };\r\n    });\r\n  };\r\n\r\n  const onEmailChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    setEmail(evt.target.value);\r\n  };\r\n\r\n  const onConfirmCredentials = (evt: React.FormEvent<HTMLFormElement>): void => {\r\n    evt.preventDefault();\r\n    const { oldEmail, password } = credentials;\r\n\r\n    const credential = firebase.auth.EmailAuthProvider.credential(oldEmail, password);\r\n\r\n    user\r\n      .reauthenticateWithCredential(credential)\r\n      .then(() => {\r\n        setIsFirstModal(false);\r\n      })\r\n      .catch((error: any) => {\r\n        showTooltip(TooltipTypes.Error, `Reauth didn't pass: ${error.message}`);\r\n      });\r\n  };\r\n  const onSetNewEmail = (evt: React.FormEvent<HTMLFormElement>): void => {\r\n    evt.preventDefault();\r\n\r\n    user\r\n      .verifyBeforeUpdateEmail(email, actionCodeSettings)\r\n      .then(() => {\r\n        showTooltip(\r\n          TooltipTypes.Info,\r\n          'Check your new email and confirm it to finish the change the email'\r\n        );\r\n        onToggleModal(evt);\r\n      })\r\n      .catch(function (err: any) {\r\n        showTooltip(TooltipTypes.Error, `Your email didn't update: ${err.message}`);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"change-email-form\"\r\n      onSubmit={isFirstModal ? onConfirmCredentials : onSetNewEmail}\r\n    >\r\n      {isFirstModal ? (\r\n        <>\r\n          <div className=\"change-email-form__field-wrapper\">\r\n            <label className=\"change-email-form__label\" htmlFor=\"oldEmail\">\r\n              Old email\r\n              <RequiredMark />:\r\n            </label>\r\n            <input\r\n              className=\"change-email-form__field\"\r\n              id=\"oldEmail\"\r\n              type=\"email\"\r\n              placeholder=\"Enter you old email\"\r\n              onChange={onCredentialsChange}\r\n              value={credentials.oldEmail}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"change-email-form__field-wrapper\">\r\n            <label className=\"change-email-form__label\" htmlFor=\"password\">\r\n              Password\r\n              <RequiredMark />:\r\n            </label>\r\n            <input\r\n              className=\"change-email-form__field\"\r\n              id=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Enter you password\"\r\n              onChange={onCredentialsChange}\r\n              value={credentials.password}\r\n              required\r\n            />\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div className=\"change-email-form__field-wrapper\">\r\n          <label className=\"change-email-form__label\" htmlFor=\"newEmail\">\r\n            New email\r\n            <RequiredMark />:\r\n          </label>\r\n          <input\r\n            className=\"change-email-form__field\"\r\n            id=\"newEmail\"\r\n            type=\"email\"\r\n            placeholder=\"Enter the new email\"\r\n            onChange={onEmailChange}\r\n            value={email}\r\n            required\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <button className=\"change-email-form__submit-btn\">\r\n        {isFirstModal ? 'Continue' : 'Save'}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ChangeEmailModalContent;\r\n","import ChangePasswordModalContent from './change-password-modal-content';\r\nexport default ChangePasswordModalContent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport firebase from 'firebase/app';\r\n\r\nimport { useTooltipContext } from '../../../../context';\r\nimport RequiredMark from '../../../../components/required-mark';\r\nimport { TooltipTypes } from '../../../../types';\r\nimport './change-password-modal-content.css';\r\n\r\ninterface ChangePasswordModalProps {\r\n  onToggleModal: (evt: any) => void;\r\n  user: any;\r\n}\r\ninterface IConfirmCredentials {\r\n  email: string;\r\n  oldPassword: string;\r\n}\r\n\r\nconst ChangePasswordModalContent: React.FC<ChangePasswordModalProps> = ({\r\n  onToggleModal,\r\n  user,\r\n}) => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [credentials, setCredentials] = useState<IConfirmCredentials>({\r\n    email: user.email,\r\n    oldPassword: '',\r\n  });\r\n  const [isFirstModal, setIsFirstModal] = useState(true);\r\n  const [password, setPassword] = useState('');\r\n\r\n  const onCredentialsChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const id: string = evt.target.id;\r\n    const value: string = evt.target.value;\r\n\r\n    setCredentials((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        [id]: value,\r\n      };\r\n    });\r\n  };\r\n\r\n  const onPasswordChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPassword(evt.target.value);\r\n  };\r\n\r\n  const onConfirmCredentials = (evt: React.FormEvent<HTMLFormElement>): void => {\r\n    evt.preventDefault();\r\n    const { email, oldPassword } = credentials;\r\n\r\n    const credential = firebase.auth.EmailAuthProvider.credential(email, oldPassword);\r\n\r\n    user\r\n      .reauthenticateWithCredential(credential)\r\n      .then(() => {\r\n        setIsFirstModal(false);\r\n      })\r\n      .catch((error: any) => {\r\n        showTooltip(TooltipTypes.Error, `Reauth didn't pass: ${error.message}`);\r\n      });\r\n  };\r\n\r\n  const onSetNewPassword = (evt: React.FormEvent<HTMLFormElement>): void => {\r\n    evt.preventDefault();\r\n    // @todo Вылозит предупреждение от гугл, что в результате утечки даннных, пароль оказался раскрыт. Скорее всего связано с отсутствием шифрования с моей стороны\r\n    user\r\n      .updatePassword(password)\r\n      .then(() => {\r\n        showTooltip(TooltipTypes.Success, 'Your password was successfully updated!');\r\n        onToggleModal(evt);\r\n      })\r\n      .catch((err: any) => {\r\n        showTooltip(TooltipTypes.Error, `Your password didn't be update: ${err.message}`);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"change-password-form\"\r\n      onSubmit={isFirstModal ? onConfirmCredentials : onSetNewPassword}\r\n    >\r\n      {isFirstModal ? (\r\n        <>\r\n          <div className=\"change-password-form__field-wrapper\">\r\n            <label className=\"change-password-form__label\" htmlFor=\"email\">\r\n              Email\r\n              <RequiredMark />:\r\n            </label>\r\n            <input\r\n              className=\"change-password-form__field change-password-form__email-field\"\r\n              id=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"Enter you email\"\r\n              onChange={onCredentialsChange}\r\n              value={credentials.email}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div className=\"change-password-form__field-wrapper\">\r\n            <label className=\"change-password-form__label\" htmlFor=\"oldPassword\">\r\n              Old password\r\n              <RequiredMark />:\r\n            </label>\r\n            <input\r\n              className=\"change-password-form__field change-password-form__old-password-field\"\r\n              id=\"oldPassword\"\r\n              type=\"password\"\r\n              placeholder=\"Enter you old password\"\r\n              onChange={onCredentialsChange}\r\n              value={credentials.oldPassword}\r\n              required\r\n            />\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <div className=\"change-password-form__field-wrapper\">\r\n            <label className=\"change-password-form__label\" htmlFor=\"newPassword\">\r\n              New password\r\n              <RequiredMark />:\r\n            </label>\r\n            <input\r\n              className=\"change-password-form__field change-password-form__new-password-field\"\r\n              id=\"newPassword\"\r\n              type=\"password\"\r\n              placeholder=\"Enter a new password\"\r\n              onChange={onPasswordChange}\r\n              value={password}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* @todo можно реализовать генерацию рандомного пароля\r\n          <button className=\"change-password-form__generate-password\" onClick={onGeneratePassword}>\r\n            Generate password\r\n          </button> */}\r\n        </>\r\n      )}\r\n\r\n      <button className=\"change-password-form__submit-btn\">\r\n        {isFirstModal ? 'Continue' : 'Save'}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ChangePasswordModalContent;\r\n","import DeleteAccountModalContent from './delete-account-modal-content';\r\nexport default DeleteAccountModalContent;\r\n","import React, { useState } from 'react';\r\nimport firebase from 'firebase/app';\r\n\r\nimport { useTooltipContext } from '../../../../context';\r\nimport RequiredMark from '../../../../components/required-mark';\r\nimport { TooltipTypes } from '../../../../types';\r\nimport './delete-account-modal-content.css';\r\n\r\ninterface ChangeAccountDeleteModalProps {\r\n  onToggleModal: (evt: any) => void;\r\n  user: any;\r\n}\r\ninterface IConfirmCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst ChangeAccountDeleteModalContent: React.FC<ChangeAccountDeleteModalProps> = ({\r\n  onToggleModal,\r\n  user,\r\n}) => {\r\n  const { showTooltip } = useTooltipContext();\r\n  const [credentials, setCredentials] = useState<IConfirmCredentials>({\r\n    email: user.email,\r\n    password: '',\r\n  });\r\n  const [isFirstModal, setIsFirstModal] = useState(true);\r\n\r\n  const onCredentialsChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const id: string = evt.target.id;\r\n    const value: string = evt.target.value;\r\n\r\n    setCredentials((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        [id]: value,\r\n      };\r\n    });\r\n  };\r\n\r\n  const onConfirmCredentials = (evt: React.FormEvent<HTMLFormElement>): void => {\r\n    evt.preventDefault();\r\n    const { email, password } = credentials;\r\n\r\n    const credential = firebase.auth.EmailAuthProvider.credential(email, password);\r\n\r\n    user\r\n      .reauthenticateWithCredential(credential)\r\n      .then(() => {\r\n        setIsFirstModal(false);\r\n      })\r\n      .catch((error: any) => {\r\n        showTooltip(TooltipTypes.Error, `Reauth didn't pass: ${error.message}`);\r\n      });\r\n  };\r\n\r\n  const onDeleteAccount = (evt: React.FormEvent<HTMLFormElement>): void => {\r\n    evt.preventDefault();\r\n    user.delete().catch((err: any) => {\r\n      showTooltip(TooltipTypes.Error, `Your account didn't be deleted: ${err.message}`);\r\n    });\r\n  };\r\n\r\n  const onCancelDeleteAccount = (evt: React.MouseEvent<HTMLButtonElement>): void => {\r\n    onToggleModal(evt);\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"delete-account-form\"\r\n      onSubmit={isFirstModal ? onConfirmCredentials : onDeleteAccount}\r\n    >\r\n      {isFirstModal ? (\r\n        <>\r\n          <div className=\"delete-account-form__field-wrapper\">\r\n            <label className=\"delete-account-form__label\" htmlFor=\"email\">\r\n              Email\r\n              <RequiredMark />:\r\n            </label>\r\n            <input\r\n              className=\"delete-account-form__field delete-account-form__email-field\"\r\n              id=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"Enter you email\"\r\n              onChange={onCredentialsChange}\r\n              value={credentials.email}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"delete-account-form__field-wrapper\">\r\n            <label className=\"delete-account-form__label\" htmlFor=\"password\">\r\n              Password\r\n              <RequiredMark />:\r\n            </label>\r\n            <input\r\n              className=\"delete-account-form__field delete-account-form__password-field\"\r\n              id=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Enter you password\"\r\n              onChange={onCredentialsChange}\r\n              value={credentials.password}\r\n              required\r\n            />\r\n          </div>\r\n          <button className=\"delete-account-form__btn delete-account-form__submit-btn\">\r\n            Continue\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <span className=\"delete-account-form__warning-text\">\r\n            Do you want <b>to delete</b> your account <b>forever</b>? This action is irreversibly...\r\n          </span>\r\n          <div className=\"delete-account-form__btn-wrapper\">\r\n            <button\r\n              className=\"delete-account-form__btn delete-account-form__agree-btn\"\r\n              type=\"submit\"\r\n            >\r\n              Yes\r\n            </button>\r\n            <button\r\n              className=\"delete-account-form__btn delete-account-form__disagree-btn\"\r\n              type=\"button\"\r\n              onClick={onCancelDeleteAccount}\r\n            >\r\n              No\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ChangeAccountDeleteModalContent;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M0 0h24v24H0z\",\n  fill: \"none\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a.996.996 0 000-1.41l-2.34-2.34a.996.996 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n});\n\nfunction SvgChangeIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\"\n  }, props), _ref, _ref2);\n}\n\nexport default SvgChangeIcon;","export default __webpack_public_path__ + \"static/media/anonymous.a4137231.jpg\";","import React, { useState, useEffect } from 'react';\r\nimport PageTitle from 'components/page-title';\r\nimport Portal from 'components/portal';\r\nimport Modal from 'components/modal';\r\nimport { useAppContext, useTooltipContext } from 'context';\r\nimport firebase from 'firebase/app';\r\nimport ChangeEmailModalContent from './components/change-email-modal-content';\r\nimport ChangePasswordModalContent from './components/change-password-modal-content';\r\nimport DeleteAccountModalContent from './components/delete-account-modal-content';\r\nimport { TooltipTypes } from '../../types';\r\nimport ChangeIcon from '!@svgr/webpack!../../assets/img/change-icon.svg';\r\nimport anonymousImg from '../../assets/img/anonymous.jpg';\r\n\r\nimport './index.css';\r\n\r\n// @todo Рефакторинг компонента + привести к единому виду названия функций, переменных из useState\r\nconst SettingsPage: React.FC = () => {\r\n  const { currentUser, actionCodeSettings } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [name, setName] = useState(currentUser.displayName);\r\n  const [photoUrl, setPhotoUrl] = useState(currentUser.photoURL);\r\n  const [isNameClicked, setIsNameClicked] = useState(false);\r\n  const [isAvatarClicked, setIsAvatarClicked] = useState(false);\r\n  const [showModalEmailChange, setShowModalEmailChange] = useState(false);\r\n  const [showModalPasswordChange, setShowModalPasswordChange] = useState(false);\r\n  const [showModalAccountDelete, setShowModalAccountDelete] = useState(false);\r\n\r\n  const isGoogleUser = currentUser.providerData[0].providerId == 'google.com' ? true : false;\r\n  const email = currentUser.email;\r\n\r\n  //Смена имени\r\n  const onNameClick = (): void => {\r\n    setIsNameClicked(true);\r\n  };\r\n\r\n  const onNameSave = (): void => {\r\n    currentUser\r\n      .updateProfile({\r\n        displayName: name,\r\n      })\r\n      .then(() => setIsNameClicked(false))\r\n      .catch((err: any) => {\r\n        showTooltip(TooltipTypes.Error, `User name didn't update: ${err.message}`);\r\n      });\r\n  };\r\n  const onNameCancel = (): void => {\r\n    setName(currentUser.displayName);\r\n    setIsNameClicked(false);\r\n  };\r\n\r\n  //Смена фото\r\n  const onAvatarClick = (): void => {\r\n    setIsAvatarClicked(true);\r\n  };\r\n  const onPhotoUrlSave = (): void => {\r\n    currentUser\r\n      .updateProfile({\r\n        photoURL: photoUrl,\r\n      })\r\n      .then(() => setIsAvatarClicked(false))\r\n      .catch((err: any) => {\r\n        showTooltip(TooltipTypes.Error, `User avatar didn't update: ${err.message}`);\r\n      });\r\n  };\r\n  const onPhotoUrlCancel = (): void => {\r\n    setPhotoUrl(currentUser.photoURL);\r\n    setIsAvatarClicked(false);\r\n  };\r\n\r\n  // Сброс пароля\r\n  const onEmailForResetPasswordSend = (): void => {\r\n    firebase\r\n      .auth()\r\n      .sendPasswordResetEmail(email, actionCodeSettings)\r\n      .then(() => {\r\n        showTooltip(TooltipTypes.Info, 'The email to reset your password was send');\r\n      })\r\n      .catch((err) => {\r\n        showTooltip(TooltipTypes.Error, `Email for reset password didn't send ${err.message}`);\r\n      });\r\n  };\r\n\r\n  // @todo Сделать один хендлер с swith case?\r\n  const onNameChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setName(evt.target.value);\r\n  };\r\n  const onPhotoUrlChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setPhotoUrl(evt.target.value);\r\n  };\r\n\r\n  // Тоггл модалок\r\n  const toggleEmailChangeModal = (\r\n    evt:\r\n      | React.FormEvent<HTMLFormElement>\r\n      | React.MouseEvent<HTMLButtonElement>\r\n      | React.FormEvent<HTMLSpanElement>\r\n  ): void => {\r\n    setShowModalEmailChange((prev) => !prev);\r\n  };\r\n\r\n  const togglePasswordChangeModal = (\r\n    evt: React.FormEvent<HTMLFormElement> | React.MouseEvent<HTMLButtonElement>\r\n  ): void => {\r\n    setShowModalPasswordChange((prev) => !prev);\r\n  };\r\n\r\n  const toggleAccountDeleteModal = (\r\n    evt: React.FormEvent<HTMLFormElement> | React.MouseEvent<HTMLButtonElement>\r\n  ): void => {\r\n    setShowModalAccountDelete((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <main className=\"settings-page\">\r\n      <div className=\"container\">\r\n        <PageTitle text=\"Settings\" />\r\n        <h2 className=\"settings-page__subtitle\">Account</h2>\r\n\r\n        <div className=\"settings-wrapper\">\r\n          <div className=\"settings-item settings-item__avatar-wrapper\">\r\n            <img\r\n              className=\"settings-item__avatar\"\r\n              src={photoUrl ? photoUrl : anonymousImg}\r\n              width=\"100\"\r\n              height=\"100\"\r\n              alt=\"User's avatar\"\r\n            />\r\n\r\n            {isAvatarClicked ? (\r\n              <>\r\n                {/* @todo Стоит сделать ref на инпут, чтобы бахать фокус сразу после его появления? */}\r\n                <input\r\n                  className=\"settings-item__field settings-item__field--avatar\"\r\n                  type=\"text\"\r\n                  name=\"avatar\"\r\n                  onChange={onPhotoUrlChange}\r\n                  placeholder=\"Type the link on your avatar\"\r\n                  value={photoUrl ? photoUrl : ''}\r\n                />\r\n                <button className=\"settings-item__btn\" onClick={onPhotoUrlSave}>\r\n                  Save\r\n                </button>\r\n                <button\r\n                  className=\"settings-item__btn settings-item__btn--cancel\"\r\n                  onClick={onPhotoUrlCancel}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </>\r\n            ) : (\r\n              <button\r\n                className=\"settings-item__edit-btn settings-item__edit-btn--avatar\"\r\n                onClick={onAvatarClick}\r\n              >\r\n                <ChangeIcon width=\"24px\" height=\"24px\" />\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"settings-item\">\r\n            {isNameClicked ? (\r\n              <>\r\n                <input\r\n                  className=\"settings-item__field settings-item__field--name\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  onChange={onNameChange}\r\n                  placeholder=\"What is your name?\"\r\n                  value={name ? name : ''}\r\n                />\r\n                <button className=\"settings-item__btn\" onClick={onNameSave}>\r\n                  Save\r\n                </button>\r\n                <button\r\n                  className=\"settings-item__btn settings-item__btn--cancel\"\r\n                  onClick={onNameCancel}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <span className=\"settings-item__text\">\r\n                  <b>Your name: </b>\r\n                  {name ? name : 'Anonymous'}\r\n                </span>\r\n                <button\r\n                  className=\"settings-item__edit-btn settings-item__edit-btn--name\"\r\n                  onClick={onNameClick}\r\n                >\r\n                  <ChangeIcon width=\"18px\" height=\"18px\" />\r\n                </button>\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"settings-item settings-item--email\">\r\n            <span className=\"settings-item__text\">\r\n              <b>Your email: </b>\r\n              {email}\r\n            </span>\r\n\r\n            {isGoogleUser ? undefined : (\r\n              <button\r\n                className=\"settings-item__edit-btn settings-item__edit-btn--email\"\r\n                onClick={toggleEmailChangeModal}\r\n              >\r\n                <ChangeIcon width=\"18px\" height=\"18px\" />\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          {!isGoogleUser && (\r\n            <>\r\n              <div className=\"settings-item\">\r\n                <span>If you remember your password, you can</span>\r\n                <button className=\"settings-item__btn\" onClick={togglePasswordChangeModal}>\r\n                  Change it\r\n                </button>\r\n              </div>\r\n              <div className=\"settings-item\">\r\n                <span>\r\n                  But if you forgot it, we can send the email to you to reset the password\r\n                </span>\r\n                <button className=\"settings-item__btn\" onClick={onEmailForResetPasswordSend}>\r\n                  Send the email\r\n                </button>\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          <div className=\"settings-item\">\r\n            <button\r\n              className=\"settings-item__btn settings-item__btn--cancel settings-item__btn--delete-account\"\r\n              onClick={toggleAccountDeleteModal}\r\n            >\r\n              Delete account\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <h2 className=\"settings-page__subtitle\">App</h2>\r\n        {/* @todo Здесь будет тогглер цветовой схемы сайта */}\r\n\r\n        {showModalEmailChange && (\r\n          <Portal>\r\n            <Modal\r\n              classes=\"modal--change-email\"\r\n              title=\"Changing the email\"\r\n              onCloseBtnClick={toggleEmailChangeModal}\r\n            >\r\n              <ChangeEmailModalContent\r\n                onToggleModal={toggleEmailChangeModal}\r\n                user={currentUser}\r\n                actionCodeSettings={actionCodeSettings}\r\n              />\r\n            </Modal>\r\n          </Portal>\r\n        )}\r\n        {showModalPasswordChange && (\r\n          <Portal>\r\n            <Modal\r\n              classes=\"modal--change-password\"\r\n              title=\"Changing the password\"\r\n              onCloseBtnClick={togglePasswordChangeModal}\r\n            >\r\n              <ChangePasswordModalContent\r\n                onToggleModal={togglePasswordChangeModal}\r\n                user={currentUser}\r\n              />\r\n            </Modal>\r\n          </Portal>\r\n        )}\r\n        {showModalAccountDelete && (\r\n          <Portal>\r\n            <Modal\r\n              classes=\"modal--delete-account\"\r\n              title=\"Deleting the account\"\r\n              onCloseBtnClick={toggleAccountDeleteModal}\r\n            >\r\n              <DeleteAccountModalContent\r\n                user={currentUser}\r\n                onToggleModal={toggleAccountDeleteModal}\r\n              />\r\n            </Modal>\r\n          </Portal>\r\n        )}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default SettingsPage;\r\n","import { ICustomInput } from '../../../../interfaces';\r\n\r\nconst inputsConfig: Omit<ICustomInput, 'isError' | 'isTouched'>[] = [\r\n  {\r\n    label: 'Email',\r\n    isRequired: true,\r\n    type: 'email',\r\n    fieldName: 'email',\r\n    placeholder: 'Enter your email',\r\n  },\r\n  {\r\n    label: 'Password',\r\n    isRequired: true,\r\n    type: 'password',\r\n    fieldName: 'password',\r\n    placeholder: 'Create a password',\r\n  },\r\n  {\r\n    label: 'Repeat password',\r\n    isRequired: true,\r\n    type: 'password',\r\n    fieldName: 'repeatPassword',\r\n    placeholder: 'Repeat your password',\r\n  },\r\n];\r\n\r\nexport default inputsConfig;\r\n","import SignUpModalContent from './sign-up-modal-content';\r\nexport default SignUpModalContent;\r\n","import React, { useMemo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport { useTooltipContext } from '../../../../context';\r\nimport { signUpValidationSchema } from '../../../../validationSchemas';\r\nimport {\r\n  firebaseCreateUser,\r\n  firebaseCreateUserWithGoogle,\r\n} from '../../../../services/firebase-service';\r\nimport CustomInput from '../../../../components/customInput';\r\nimport inputsConfig from './inputs-config';\r\n\r\nimport './sign-up-modal-content.css';\r\n\r\nconst SignUpModalContent: React.FC = () => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{ email: '', password: '', repeatPassword: '' }}\r\n        validationSchema={signUpValidationSchema}\r\n        onSubmit={(values, { setSubmitting }) =>\r\n          firebaseCreateUser(values, showTooltip, setSubmitting)\r\n        }\r\n      >\r\n        {({ isSubmitting, errors, touched }) => (\r\n          <Form className=\"sign-up-form\">\r\n            {useMemo(\r\n              () =>\r\n                inputsConfig.map((item) => (\r\n                  <div className=\"sign-up-form__field-wrapper\" key={item.fieldName}>\r\n                    <CustomInput\r\n                      label={item.label}\r\n                      labelClass=\"sign-up-form__label\"\r\n                      isRequired={item.isRequired}\r\n                      fieldClass=\"sign-up-form__field\"\r\n                      type={item.type}\r\n                      fieldName={item.fieldName}\r\n                      placeholder={item.placeholder}\r\n                      isError={item.fieldName in errors}\r\n                      isTouched={item.fieldName in touched}\r\n                    />\r\n                  </div>\r\n                )),\r\n              [errors, touched]\r\n            )}\r\n\r\n            <button className=\"sign-up-form__submit-btn\" type=\"submit\" disabled={isSubmitting}>\r\n              Sign up\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      <div className=\"modal--sign-up__sign-up-with-google\">\r\n        <span className=\"sign-up-with-google__text\">Also you can</span>\r\n        <button\r\n          className=\"sign-up-with-google__btn\"\r\n          onClick={() => firebaseCreateUserWithGoogle(showTooltip)}\r\n        >\r\n          Sign up with\r\n        </button>\r\n      </div>\r\n\r\n      <span className=\"modal--sign-up__go-to-sign-in\">\r\n        Already have an account?{' '}\r\n        <Link className=\"modal--sign-up__sign-in-link\" to=\"/sign-in\">\r\n          Sign in\r\n        </Link>\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignUpModalContent;\r\n","import React from 'react';\r\nimport Modal from '../../components/modal';\r\nimport SignUpModalContent from './components/sign-up-modal-content';\r\n\r\nconst SignUpPage: React.FC = () => (\r\n  <main className=\"sign-up-page\">\r\n    <Modal classes=\"modal--sign-up\" title=\"Sign up\">\r\n      <SignUpModalContent />\r\n    </Modal>\r\n  </main>\r\n);\r\n\r\nexport default SignUpPage;\r\n","import { ICustomInput } from '../../../../interfaces';\r\n\r\nconst inputsConfig: Omit<ICustomInput, 'isError' | 'isTouched'>[] = [\r\n  {\r\n    label: 'Email',\r\n    isRequired: true,\r\n    type: 'email',\r\n    fieldName: 'email',\r\n    placeholder: 'Enter your email',\r\n  },\r\n  {\r\n    label: 'Password',\r\n    isRequired: true,\r\n    type: 'password',\r\n    fieldName: 'password',\r\n    placeholder: 'Enter your password',\r\n  },\r\n  {\r\n    label: 'Remember me',\r\n    isRequired: false,\r\n    type: 'checkbox',\r\n    fieldName: 'rememberMe',\r\n  },\r\n];\r\n\r\nexport default inputsConfig;\r\n","import SignInModalContent from './sign-in-modal-content';\r\nexport default SignInModalContent;\r\n","import React, { useMemo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport { useTooltipContext } from '../../../../context';\r\nimport { signInValidationSchema } from '../../../../validationSchemas';\r\nimport { firebaseSignIn, firebaseGoogleSignIn } from '../../../../services/firebase-service';\r\nimport inputsConfig from './inputs-config';\r\nimport CustomInput from '../../../../components/customInput';\r\n\r\nimport './sign-in-modal-content.css';\r\n\r\nconst SignInModalContent: React.FC = () => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          email: '',\r\n          password: '',\r\n          rememberMe: Boolean(localStorage.getItem('rememberMe')),\r\n        }}\r\n        validationSchema={signInValidationSchema}\r\n        onSubmit={(values, { setSubmitting }) => firebaseSignIn(values, showTooltip, setSubmitting)}\r\n      >\r\n        {({ isSubmitting, errors, touched }) => (\r\n          <Form className=\"sign-in-form\">\r\n            {useMemo(\r\n              () =>\r\n                inputsConfig.map((item) => (\r\n                  <div\r\n                    className={`sign-in-form__field-wrapper ${\r\n                      item.fieldName === `rememberMe` ? `sign-in-form__field-wrapper--checkbox` : ''\r\n                    }`}\r\n                    key={item.fieldName}\r\n                  >\r\n                    <CustomInput\r\n                      label={item.label}\r\n                      labelClass=\"sign-in-form__label\"\r\n                      isRequired={item.isRequired}\r\n                      fieldClass={`sign-up-form__field ${\r\n                        item.fieldName === `rememberMe` ? `sign-in-form__field--checkbox` : ``\r\n                      }`}\r\n                      type={item.type}\r\n                      fieldName={item.fieldName}\r\n                      placeholder={item.placeholder}\r\n                      isError={item.fieldName in errors}\r\n                      isTouched={item.fieldName in touched}\r\n                    />\r\n                  </div>\r\n                )),\r\n              [errors, touched]\r\n            )}\r\n\r\n            <button className=\"sign-in-form__submit-btn\" type=\"submit\" disabled={isSubmitting}>\r\n              Sign in\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      <button\r\n        className=\"modal--sign-in__google-btn\"\r\n        onClick={() => firebaseGoogleSignIn(showTooltip)}\r\n      >\r\n        Sign in with\r\n      </button>\r\n\r\n      <span className=\"modal--sign-in__go-to-reset\">\r\n        Forgot password?{' '}\r\n        <Link className=\"modal--sign-in__link\" to=\"/reset-password\">\r\n          Reset\r\n        </Link>\r\n      </span>\r\n      <span className=\"modal--sign-in__go-to-sign-up\">\r\n        Back to{' '}\r\n        <Link className=\"modal--sign-in__link\" to=\"/sign-up\">\r\n          Sign up\r\n        </Link>\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignInModalContent;\r\n","import React from 'react';\r\nimport Modal from '../../components/modal';\r\nimport SignInModalContent from './components/sign-in-modal-content';\r\n\r\nconst SignInPage: React.FC = () => (\r\n  <main className=\"sign-in-page\">\r\n    <Modal classes=\"modal--sign-in\" title=\"Sign in\">\r\n      <SignInModalContent />\r\n    </Modal>\r\n  </main>\r\n);\r\n\r\nexport default SignInPage;\r\n","import React, { useMemo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport { useAppContext, useTooltipContext } from '../../../context/';\r\nimport { resetPasswordValidationSchema } from '../../../validationSchemas';\r\nimport { firebaseSendPasswordResetEmail } from '../../../services/firebase-service';\r\nimport CustomInput from '../../../components/customInput';\r\n\r\nimport './reset-password-modal-content.css';\r\n\r\nconst ResetPasswordModalContent: React.FC = () => {\r\n  const { actionCodeSettings } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          email: '',\r\n        }}\r\n        validationSchema={resetPasswordValidationSchema}\r\n        onSubmit={(values, { setSubmitting }) =>\r\n          firebaseSendPasswordResetEmail(values, actionCodeSettings, showTooltip, setSubmitting)\r\n        }\r\n      >\r\n        {({ isSubmitting, errors, touched }) => (\r\n          <Form className=\"reset-password-form\">\r\n            {useMemo(\r\n              () => (\r\n                <div className=\"reset-password-form__field-wrapper\">\r\n                  <CustomInput\r\n                    label=\"Email\"\r\n                    labelClass=\"reset-password-form__label\"\r\n                    isRequired={true}\r\n                    fieldClass=\"reset-password-form__field\"\r\n                    type=\"email\"\r\n                    fieldName=\"email\"\r\n                    placeholder=\"Enter your email\"\r\n                    isError={'email' in errors}\r\n                    isTouched={'email' in touched}\r\n                  />\r\n                </div>\r\n              ),\r\n              [errors, touched]\r\n            )}\r\n\r\n            <button\r\n              className=\"reset-password-form__submit-btn\"\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n            >\r\n              Reset password\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      <Link className=\"modal--reset-password__sign-in-link\" to=\"/sign-in\">\r\n        I've just remembered :)\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordModalContent;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Modal from '../../components/modal';\r\nimport ResetPasswordModalContent from './components/reset-password-modal-content';\r\n\r\nconst ResetPasswordPage: React.FC = () => (\r\n  <main className=\"reset-password-page\">\r\n    <Modal classes=\"modal--reset-password\" title=\"Reset password\">\r\n      <ResetPasswordModalContent />\r\n    </Modal>\r\n  </main>\r\n);\r\n\r\nexport default ResetPasswordPage;\r\n","import Header from \"./header\";\r\nexport default Header;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useTooltipContext } from '../../context';\r\nimport { firebaseSignOut } from '../../services/firebase-service';\r\n\r\nimport './header.css';\r\n\r\nconst Header: React.FC = () => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  return (\r\n    <header className=\"page-header\">\r\n      <div className=\"container flex-wrapper\">\r\n        <nav className=\"main-nav\">\r\n          <NavLink exact to=\"/\" className=\"main-nav__link\" activeClassName=\"main-nav__active-link\">\r\n            Doit!\r\n          </NavLink>\r\n          <ul className=\"main-nav__list\">\r\n            <li className=\"main-nav__item\">\r\n              <NavLink\r\n                to=\"/todo\"\r\n                className=\"main-nav__link\"\r\n                activeClassName=\"main-nav__active-link\"\r\n              >\r\n                Todo\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"main-nav__item\">\r\n              <NavLink\r\n                to=\"/notes\"\r\n                className=\"main-nav__link\"\r\n                activeClassName=\"main-nav__active-link\"\r\n              >\r\n                Notes\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"main-nav__item\">\r\n              <NavLink\r\n                to=\"/settings\"\r\n                className=\"main-nav__link\"\r\n                activeClassName=\"main-nav__active-link\"\r\n              >\r\n                Settings\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <button className=\"page-header__sign-out-btn\" onClick={() => firebaseSignOut(showTooltip)}>\r\n          Sign out\r\n        </button>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { useTooltipContext } from '../../context';\r\nimport { firebaseSignOut } from '../../services/firebase-service';\r\n\r\nimport './emailUnverifiedOverlay.css';\r\n\r\nconst EmailUnverifiedOverlay = () => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  return (\r\n    <div className=\"app-overlay\">\r\n      <div className=\"app-overlay__content\">\r\n        Please confirm your email to use the app or{' '}\r\n        <button className=\"app-overlay__sign-out-btn\" onClick={() => firebaseSignOut(showTooltip)}>\r\n          Sign out\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailUnverifiedOverlay;\r\n","import Tooltip from './tooltip';\r\nexport default Tooltip;\r\n","import React, { useEffect } from 'react';\r\nimport { Transition } from 'react-transition-group';\r\nimport { useTooltipContext } from '../../context';\r\nimport './tooltip.css';\r\n\r\nconst Tooltip: React.FC = () => {\r\n  const { message, type, isOpen, hideTooltip } = useTooltipContext();\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      let timerId = setTimeout(hideTooltip, 10000);\r\n      return () => {\r\n        clearTimeout(timerId);\r\n      };\r\n    }\r\n  }, [isOpen]);\r\n\r\n  return (\r\n    <Transition in={isOpen} timeout={300} unmountOnExit>\r\n      {(transitionState: string) => (\r\n        <div className={`tooltip ${transitionState} tooltip--${type}`}>\r\n          <span className=\"tooltip__message\">{message}</span>\r\n          <button className=\"tooltip__close\" onClick={() => hideTooltip()}></button>\r\n        </div>\r\n      )}\r\n    </Transition>\r\n  );\r\n};\r\nexport default Tooltip;\r\n","import App from \"./app\";\r\nexport default App;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Redirect, Route } from 'react-router-dom';\r\nimport {\r\n  MainPage,\r\n  TodosPage,\r\n  NotesPage,\r\n  SettingsPage,\r\n  SignUpPage,\r\n  SignInPage,\r\n  ResetPasswordPage,\r\n} from '../pages';\r\nimport { useAppContext } from '../context';\r\nimport Header from '../components/header';\r\nimport EmailUnverifiedOverlay from '../components/emailUnverifiedOverlay';\r\nimport Tooltip from '../components/tooltip';\r\n\r\nimport '../assets/css/normalize.css';\r\nimport './scaffolding.css';\r\n\r\nconst App: React.FC = () => {\r\n  const { isLoggedIn, currentUser } = useAppContext();\r\n\r\n  return (\r\n    <Router>\r\n      {isLoggedIn ? (\r\n        <>\r\n          {currentUser.emailVerified ? (\r\n            <>\r\n              <Route path=\"/sign-in\" render={() => <Redirect to=\"/\" />} />\r\n              <Route path=\"/sign-up\" render={() => <Redirect to=\"/\" />} />\r\n              <Header />\r\n              <Tooltip />\r\n              <Route path=\"/\" component={MainPage} exact />\r\n              <Route path=\"/todo\" component={TodosPage} />\r\n              <Route path=\"/notes\" component={NotesPage} />\r\n              <Route path=\"/settings\" component={SettingsPage} />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Route path=\"/sign-in\" render={() => <Redirect to=\"/\" />} />\r\n              <Route path=\"/sign-up\" render={() => <Redirect to=\"/\" />} />\r\n              <Header />\r\n              <Tooltip />\r\n              <EmailUnverifiedOverlay />\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Tooltip />\r\n          <Route path=\"/sign-up\" component={SignUpPage} />\r\n          <Route path=\"/sign-in\" component={SignInPage} />\r\n          <Route path=\"/reset-password\" component={ResetPasswordPage} />\r\n          {/* @todo Использовать switch из react-router-dom*/}\r\n          {/* <Route path=\"*\" render={() => <Redirect to=\"/sign-up\" />} /> */}\r\n          <Redirect to=\"/sign-up\" />\r\n        </>\r\n      )}\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app';\r\nimport { AppProvider, TooltipProvider } from './context';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\ninterface IFirebaseConfig {\r\n  apiKey: string;\r\n  authDomain: string;\r\n  databaseURL: string;\r\n  projectId: string;\r\n  storageBucket: string;\r\n  messagingSenderId: string;\r\n  appId: string;\r\n}\r\n\r\nconst firebaseConfig: IFirebaseConfig = {\r\n  apiKey: 'AIzaSyD4KDh3FaOBTHDF_oleVT06eUTvbDCStNY',\r\n  authDomain: 'todo-1c323.firebaseapp.com',\r\n  databaseURL: 'https://todo-1c323-default-rtdb.firebaseio.com',\r\n  projectId: 'todo-1c323',\r\n  storageBucket: 'todo-1c323.appspot.com',\r\n  messagingSenderId: '372839437605',\r\n  appId: '1:372839437605:web:31ef34b6e882e585f576cc',\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nReactDOM.render(\r\n  <TooltipProvider>\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  </TooltipProvider>,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}