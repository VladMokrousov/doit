{"version":3,"sources":["types.ts","components/page-title/index.tsx","components/page-title/page-title.tsx","pages/main-page.tsx","validationSchemas.ts","helpers.ts","assets/img/change-icon.svg","services/firebase-service.ts","context/AppContext.tsx","context/TooltipContext.tsx","assets/img/delete-icon.svg","pages/todos-page/components/todo-item-content/index.tsx","pages/todos-page/components/todo-item-content/todo-item-content.tsx","pages/todos-page/components/todos-table/tableHeaderConfig.ts","pages/todos-page/components/todos-table/index.tsx","pages/todos-page/components/todos-table/todos-table.tsx","components/portal/index.tsx","components/portal/portal.tsx","components/customInput/customInput.tsx","pages/todos-page/components/todos-modal-content/index.tsx","pages/todos-page/components/todos-modal-content/todos-modal-content.tsx","pages/todos-page/components/search-panel/index.tsx","pages/todos-page/components/search-panel/search-panel.tsx","pages/todos-page/components/status-filter/index.tsx","pages/todos-page/components/status-filter/status-filter.tsx","pages/todos-page/components/todos-control-panel/todos-control-panel.tsx","components/modal/index.tsx","components/modal/modal.tsx","pages/todos-page/index.tsx","pages/notes-page/components/note-item-content/index.tsx","pages/notes-page/components/note-item-content/note-item-content.tsx","pages/notes-page/components/notes-list/index.tsx","pages/notes-page/components/notes-list/notes-list.tsx","pages/notes-page/components/notes-modal-content/index.tsx","pages/notes-page/components/notes-modal-content/notes-modal-content.tsx","pages/notes-page/index.tsx","assets/img/anonymous.jpg","pages/settings-page/components/user-avatar/user-avatar.tsx","pages/settings-page/components/user-name/user-name.tsx","pages/settings-page/components/change-email-modal-content/index.tsx","pages/settings-page/components/change-email-modal-content/change-email-modal-content.tsx","pages/settings-page/components/user-email/user-email.tsx","pages/settings-page/components/change-password-modal-content/index.tsx","pages/settings-page/components/change-password-modal-content/change-password-modal-content.tsx","pages/settings-page/components/user-password/user-password.tsx","pages/settings-page/components/delete-account-modal-content/index.tsx","pages/settings-page/components/delete-account-modal-content/delete-account-modal-content.tsx","pages/settings-page/components/user-delete/user-delete.tsx","pages/settings-page/index.tsx","pages/sign-up-page/components/sign-up-modal-content/inputs-config.ts","pages/sign-up-page/components/sign-up-modal-content/index.tsx","pages/sign-up-page/components/sign-up-modal-content/sign-up-modal-content.tsx","pages/sign-up-page/index.tsx","pages/sign-in-page/components/sign-in-modal-content/inputs-config.ts","pages/sign-in-page/components/sign-in-modal-content/index.tsx","pages/sign-in-page/components/sign-in-modal-content/sign-in-modal-content.tsx","pages/sign-in-page/index.tsx","pages/reset-password-page/components/reset-password-modal-content.tsx","pages/reset-password-page/index.tsx","components/header/index.tsx","components/header/header.tsx","components/emailUnverifiedOverlay/emailUnverifiedOverlay.tsx","components/tooltip/index.tsx","components/tooltip/tooltip.tsx","app/index.tsx","app/app.tsx","index.tsx"],"names":["TooltipTypes","ToggleModalTypes","PageTitle","text","className","MainPage","signUpValidationSchema","Yup","email","required","password","min","repeatPassword","oneOf","signInValidationSchema","omit","shape","rememberMe","resetPasswordValidationSchema","pick","todoFormValidationSchema","description","max","priority","status","endDatePlan","noteFormValidationSchema","changeEmailFormStepOneValidationSchema","oldEmail","changeEmailFormStepTwoValidationSchema","newEmail","changePasswordFormStepOneValidationSchema","oldPassword","changePasswordFormStepTwoValidationSchema","newPassword","deleteAccountFormStepOneValidationSchema","getFormattedDate","date","type","currentMonth","getMonth","currentDay","getDate","getFullYear","String","length","clsx","classNames","filter","v","join","trim","_path","_path2","firebaseSignOut","showTooltip","firebase","auth","signOut","catch","error","Error","message","firebaseConnectDisconnectTodoList","currentUser","setTodoPageState","getTodos","elem","isDataLoaded","restParams","todosList","child","val","lastTodoId","todosRef","database","ref","uid","on","off","firebaseConnectDisconnectNoteList","setNotesPageState","getNotes","noteList","lastNoteId","notesRef","firebaseConfirmUserCredentials","user","setIsFirstModal","values","setSubmitting","credential","EmailAuthProvider","reauthenticateWithCredential","then","AppContext","React","createContext","useAppContext","useContext","AppProvider","children","useState","isLoggedIn","setIsLoggedIn","setCurrentUser","isUserGet","setUserGet","actionCodeSettings","url","useTooltipContext","useEffect","onAuthStateChanged","emailVerified","sendEmailVerification","err","localStorage","getItem","onLogIn","lastSignInTime","Date","metadata","Math","round","getTime","onLogOut","Provider","value","TooltipContext","TooltipProvider","isOpen","setIsOpen","setType","setMessage","hideTooltip","TodoItemContent","fieldsContent","id","endDateActual","onClick","once","snapshot","forEach","childSnapshot","todoRef","Object","keys","update","key","remove","firebaseDeleteTodo","src","deleteIcon","width","height","alt","classTemplate","tableHeadersConfig","class","TodosTable","tableRows","todosPageState","toggleModal","todosPageSetState","tableHeaders","map","item","scope","term","visibleTodos","useMemo","items","filterTodos","toLowerCase","indexOf","searchTodos","reverse","undefined","importantClass","doneClass","expiredClass","toISOString","onDoubleClick","prevState","selectedItemId","selectItem","Portal","el","document","createElement","classList","add","body","style","overflow","modalHtml","querySelector","append","createPortal","CustomInput","label","labelClass","isRequired","fieldClass","fieldName","placeholder","isError","isTouched","as","htmlFor","name","component","TodosModalContent","newItemId","onToggleModal","setState","initialState","setInitialState","childData","firebaseGetTodoValue","createCustomInput","errors","touched","addTodo","newItem","newTodoKey","push","firebaseAddTodo","editTodo","todosListRef","set","firebaseEditTodo","initialValues","enableReinitialize","validationSchema","onSubmit","formattedTimeOffset","getTimezoneOffset","includes","replace","getFormattedTimeOffset","todo","isSubmitting","disabled","SearchPanel","setTerm","onChange","evt","changedTerm","target","StatusFilter","todos","getTodosLengthWithStatusFilter","btnProps","todosCount","buttons","clazz","onFilterChange","TodosControlPanel","Modal","classes","title","onCloseBtnClick","TodosPage","showModal","state","Default","WithSelectedItemClearing","NoteItemContent","note","creationDate","noteRef","firebaseDeleteNote","NotesList","notes","notesPageSetState","visibleNotes","CSSTransition","timeout","TransitionGroup","NotesModalContent","initialDescription","setInitialDescription","firebaseGetNoteValue","addNote","newNote","newNoteKey","firebaseAddNote","editNote","noteListRef","firebaseEditNote","NotesPage","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","props","xmlns","viewBox","d","fill","UserAvatar","photoURL","photoUrl","setPhotoUrl","isAvatarClicked","setIsAvatarClicked","anonymousImg","updateProfile","UserName","displayName","setName","isNameClicked","setIsNameClicked","ChangeEmailModalContent","isFirstModal","verifyBeforeUpdateEmail","Info","firebaseSetNewUsersEmail","UserEmail","isGoogleUser","providerData","providerId","showModalEmailChange","setShowModalEmailChange","toggleEmailChangeModal","prev","ChangePasswordModalContent","updatePassword","Success","firebaseSetNewUsersPassword","UserPassword","showModalPasswordChange","setShowModalPasswordChange","togglePasswordChangeModal","userEmail","sendPasswordResetEmail","firebaseSendEmailForResetingPassword","DeleteAccountModalContent","delete","firebaseDeleteUserAccount","UserDelete","showModalAccountDelete","setShowModalAccountDelete","toggleAccountDeleteModal","SettingsPage","inputsConfig","SignUpModalContent","createUserWithEmailAndPassword","setItem","finally","firebaseCreateUser","provider","GoogleAuthProvider","signInWithPopup","firebaseCreateUserWithGoogle","to","SignUpPage","SignInModalContent","Boolean","removeItem","signInWithEmailAndPassword","firebaseSignIn","firebaseGoogleSignIn","SignInPage","ResetPasswordModalContent","firebaseSendPasswordResetEmail","ResetPasswordPage","Header","exact","activeClassName","EmailUnverifiedOverlay","Tooltip","timerId","setTimeout","clearTimeout","Transition","in","unmountOnExit","transitionState","App","path","render","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM"],"mappings":"+oBAEYA,EAMAC,E,gECPGC,ECM6B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC7C,OAAO,oBAAIC,UAAU,aAAd,SAA4BD,KCGtBE,EARY,kBACzB,sBAAMD,UAAU,YAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,CAAWD,KAAK,kD,6BCJTG,EAAyBC,IAAW,CAC/CC,MAAOD,MAAaC,MAAM,yBAAyBC,SAAS,YAC5DC,SAAUH,MAAaI,IAAI,EAAG,gCAAgCF,SAAS,YACvEG,eAAgBL,MACbM,MAAM,CAACN,IAAQ,aADF,yBAEbE,SAAS,cAGDK,EAAyBR,EAAuBS,KAAK,CAAC,mBAAmBC,MAAM,CAC1FC,WAAYV,QAGDW,EAAgCZ,EAAuBa,KAAK,CAAC,UAW7DC,EAA2Bb,IAAW,CACjDc,YAAad,MACVe,IAJ2B,GAGjB,kBAHiB,GAGjB,wBAEVb,SAAS,YACZc,SAAUhB,MAAaM,MAAM,CAAC,MAAD,iBAAnB,oBAAkEJ,SAAS,YACrFe,OAAQjB,MACLM,MAAM,CAAC,MAAD,sBADD,oBAELJ,SAAS,YACZgB,YAAalB,MAAae,IAbO,GAakB,kBAAkBb,SAAS,cAGnEiB,EAA2BnB,IAAW,CACjDc,YAAad,MAAaE,SAAS,cAGxBkB,EAAyCpB,IAAW,CAC/DqB,SAAUrB,MAAaC,MAAM,yBAAyBC,SAAS,YAC/DC,SAAUH,MAAaI,IAAI,EAAG,gCAAgCF,SAAS,cAG5DoB,EAAyCtB,IAAW,CAC/DuB,SAAUvB,MAAaC,MAAM,yBAAyBC,SAAS,cAGpDsB,EAA4CxB,IAAW,CAClEC,MAAOD,MAAaC,MAAM,yBAAyBC,SAAS,YAC5DuB,YAAazB,MAAaI,IAAI,EAAG,gCAAgCF,SAAS,cAG/DwB,EAA4C1B,IAAW,CAClE2B,YAAa3B,MAAaI,IAAI,EAAG,gCAAgCF,SAAS,cAG/D0B,EAA2C5B,IAAW,CACjEC,MAAOD,MAAaC,MAAM,yBAAyBC,SAAS,YAC5DC,SAAUH,MAAaI,IAAI,EAAG,gCAAgCF,SAAS,cC1D5D2B,EAAmB,SAACC,EAAYC,GAC3C,IAAMC,EAAuBF,EAAKG,WAAa,EACzCC,EAAqBJ,EAAKK,UAChC,MAAa,aAATJ,EACI,GAAN,OAAUD,EAAKM,cAAf,YACkC,IAAhCC,OAAOL,GAAcM,OAAeN,EAAe,IAAMA,EAD3D,YAEkC,IAA9BK,OAAOH,GAAYI,OAAeJ,EAAa,IAAMA,GAErD,GAAN,OAAwC,IAA9BG,OAAOH,GAAYI,OAAeJ,EAAa,IAAMA,EAA/D,YACkC,IAAhCG,OAAOL,GAAcM,OAAeN,EAAe,IAAMA,EAD3D,YAEIF,EAAKM,gBAoBEG,EAAO,SAACC,GAAD,OAClBA,EACGC,QAAO,SAACC,GAAD,QAASA,KAChBC,KAFH,KAGGC,Q,iBLlCOnD,K,YAAAA,E,cAAAA,E,mBAAAA,M,cAMAC,K,kBAAAA,E,qDAAAA,M,SMRRmD,EAAOC,E,8CC6DEC,EAAkB,SAC7BC,GAD6B,OAG7BC,IACGC,OACAC,UACAC,OAAM,SAACC,GACNL,EAAYvD,EAAa6D,MAAOD,EAAME,aAqB/BC,EAAoC,SAC/CzB,EACA0B,EACAT,EACAU,GAEA,IAAMC,EAAW,SAACC,GAChBF,GAAiB,cAAGG,aAAH,IAAoBC,EAApB,oCAAC,aAChBD,cAAc,GACXC,GAFY,IAGfC,UAAWH,EAAKI,MAAM,QAAQC,MAC9BC,WAAYN,EAAKI,MAAM,cAAcC,YAInCE,EAAWlB,IAASmB,WAAWC,IAAI,SAAWZ,EAAYa,IAAM,UACtE,GAAa,YAATvC,EACF,IACEoC,EAASI,GAAG,QAASZ,GACrB,MAAON,GACPL,EAAYvD,EAAa6D,MAAd,wCAAsDD,EAAME,eAGzEY,EAASK,IAAI,QAASb,IAqGbc,EAAoC,SAC/C1C,EACA0B,EACAT,EACA0B,GAEA,IAAMC,EAAW,SAACf,GAChBc,GAAkB,cAAGb,aAAH,IAAoBC,EAApB,oCAAC,aACjBD,cAAc,GACXC,GAFa,IAGhBc,SAAUhB,EAAKI,MAAM,QAAQC,MAC7BY,WAAYjB,EAAKI,MAAM,cAAcC,YAInCa,EAAW7B,IAASmB,WAAWC,IAAI,SAAWZ,EAAYa,IAAM,UACtE,GAAa,YAATvC,EACF,IACE+C,EAASP,GAAG,QAASI,GACrB,MAAOtB,GACPL,EAAYvD,EAAa6D,MAAd,wCAAsDD,EAAME,eAGzEuB,EAASN,IAAI,QAASG,IAuHbI,EAAiC,SAC5CC,EACAC,EACAjC,EACAkC,EACAC,GAEA,IAAQlF,EAAoBiF,EAApBjF,MAAOE,EAAa+E,EAAb/E,SAETiF,EAAanC,IAASC,KAAKmC,kBAAkBD,WAAWnF,EAAOE,GAErE6E,EACGM,6BAA6BF,GAC7BG,MAAK,WACJN,GAAgB,MAEjB7B,OAAM,SAACC,GACNL,EAAYvD,EAAa6D,MAAd,8BAA4CD,EAAME,UAC7D4B,GAAc,OCzWdK,EAAaC,IAAMC,cAAmB,IAE/BC,EAAgB,WAC3B,OAAOC,qBAAWJ,IAIPK,EAAyC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvD,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOtC,EAAP,KAAoByC,EAApB,KACA,EAAgCH,oBAAS,GAAzC,mBAAOI,EAAP,KAAkBC,EAAlB,KAEMC,EAAqB,CACzBC,IAAK,wDAICtD,EAAgBuD,IAAhBvD,YAERwD,qBAAU,WACRvD,IAASC,OAAOuD,oBAAmB,SAACzB,GAClC,GAAIA,EAMF,GALKA,EAAK0B,eACR1B,EAAK2B,sBAAsBN,GAAoBjD,OAAM,SAACwD,GACpD5D,EAAYvD,EAAa6D,MAAd,iCAA+CsD,EAAIrD,aAG7DsD,aAAaC,QAAQ,cAWxBC,EAAQ/B,OAX+B,CACvC,IAAMgC,EAAiB,IAAIC,KAAKjC,EAAKkC,SAASF,gBACdG,KAAKC,MAAMJ,EAAeK,UAAY,KAC3CF,KAAKC,OAAM,IAAIH,MAAOI,UAAY,KAAQ,MAGnEtE,EAAgBC,GAEhB+D,EAAQ/B,QAMZsC,IAEFlB,GAAW,QAEZ,IAEH,IAAMW,EAAU,SAAC/B,GACfiB,GAAc,GACdC,EAAelB,IAEXsC,EAAW,WACfrB,GAAc,GACdC,GAAe,IAGjB,OAAOC,EACL,cAACX,EAAW+B,SAAZ,CAAqBC,MAAO,CAAExB,aAAYvC,cAAa4C,sBAAvD,SACGP,IAED,MChEA2B,EAAiBhC,IAAMC,cAAmB,IAEnCa,EAAoB,WAC/B,OAAOX,qBAAW6B,IAIPC,EAAiD,SAAC,GAAkB,IAAhB5B,EAAe,EAAfA,SAC/D,EAA4BC,oBAAS,GAArC,mBAAO4B,EAAP,KAAeC,EAAf,KACA,EAAwB7B,mBAAS,IAAjC,mBAAOhE,EAAP,KAAa8F,EAAb,KACA,EAA8B9B,mBAAS,IAAvC,mBAAOxC,EAAP,KAAgBuE,EAAhB,KAWA,OACE,cAACL,EAAeF,SAAhB,CAAyBC,MAAO,CAAEG,SAAQ5F,OAAMwB,UAASP,YAVvC,SAACjB,EAAoBwB,GACvCsE,EAAQ9F,GACR+F,EAAWvE,GACXqE,GAAU,IAO4DG,YALpD,WAClBH,GAAU,KAIV,SACG9B,KC/BQ,MAA0B,wCCC1BkC,G,OCeyC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,cAAeC,EAAS,EAATA,GAChEpH,EAA8DmH,EAA9DnH,YAAaG,EAAiDgH,EAAjDhH,OAAQD,EAAyCiH,EAAzCjH,SAAUE,EAA+B+G,EAA/B/G,YAAaiH,EAAkBF,EAAlBE,cAE5C1E,EAAgBkC,IAAhBlC,YACAT,EAAgBuD,IAAhBvD,YAEFR,EAAa,mBAEnB,OACE,qCACE,oBAAI3C,UAAW2C,EAAf,SACE,sBAAM3C,UAAS,UAAK2C,EAAL,iBAAf,SAAgD1B,MAElD,oBAAIjB,UAAW2C,EAAf,SACE,sBAAM3C,UAAS,UAAK2C,EAAL,YAAf,SAA2CvB,MAE7C,oBAAIpB,UAAW2C,EAAf,SACE,sBAAM3C,UAAS,UAAK2C,EAAL,cAAf,SAA6CxB,MAE/C,oBAAInB,UAAW2C,EAAf,SACE,sBAAM3C,UAAS,UAAK2C,EAAL,cAAf,SACGX,EAAiB,IAAIoF,KAAK/F,GAAc,YAG7C,oBAAIrB,UAAW2C,EAAf,SACE,sBAAM3C,UAAS,UAAK2C,EAAL,gBAAf,SACqB,MAAlB2F,EACGA,EACAtG,EAAiB,IAAIoF,KAAKkB,GAAgB,YAGlD,oBAAItI,UAAW2C,EAAf,SACE,wBACET,KAAK,SACLlC,UAAU,iCACVuI,QAAS,kBLiEe,SAACF,EAAQzE,EAAkBT,GAC1CC,IAASmB,WAAWC,IAAI,SAAWZ,EAAYa,IAAM,eAEnE+D,KAAK,SACL9C,MAAK,SAAC+C,GACLA,EAASC,SAAQ,SAACC,GAEhB,GADkBA,EAAcvE,MAClBiE,KAAOA,EAAI,CACvB,IAGkD,EAH5CO,EAAUxF,IAASmB,WAAWC,IAAI,SAAWZ,EAAYa,IAAvB,UAexC,OAZIoE,OAAOC,KAAKL,EAASrE,OAAO3B,OAAS,IAAM,EAC7CmG,EAAQG,QAAR,mCACYJ,EAAcK,KAAQ,MADlC,cAEE,cAAe,MAFjB,IAKA5F,IACGmB,WACAC,IAAI,SAAWZ,EAAYa,IAAvB,sBAA4CkE,EAAcK,MAC9DC,UAGE,SAIZ1F,OAAM,SAACwD,GACN5D,EAAYvD,EAAa6D,MAAd,wCAAsDsD,EAAIrD,aK7FlDwF,CAAmBb,EAAIzE,EAAaT,IAHrD,SAKE,qBAAKgG,IAAKC,EAAYpJ,UAAU,cAAcqJ,MAAM,KAAKC,OAAO,KAAKC,IAAI,yBChD7EC,EAAgB,kBA4BPC,EA3BkC,CAC/C,CACE1J,KAAM,cACN2J,MAAM,GAAD,OAAKF,EAAL,gBAEP,CACEzJ,KAAM,SACN2J,MAAM,GAAD,OAAKF,EAAL,WAEP,CACEzJ,KAAM,WACN2J,MAAM,GAAD,OAAKF,EAAL,aAEP,CACEzJ,KAAM,gBACN2J,MAAM,GAAD,OAAKF,EAAL,aAEP,CACEzJ,KAAM,kBACN2J,MAAM,GAAD,OAAKF,EAAL,eAEP,CACEzJ,KAAM,SACN2J,MAAM,GAAD,OAAKF,EAAL,YC5BMG,G,OCc+B,SAAC,GAIxC,IAwCDC,EA3CJC,EAGI,EAHJA,eACAC,EAEI,EAFJA,YACAC,EACI,EADJA,kBAEMC,EAA8BP,EAAmBQ,KAAI,SAACC,GAAD,OACzD,oBAAoBlK,UAAS,wBAAmBkK,EAAKR,OAASS,MAAM,MAApE,SACGD,EAAKnK,MADCmK,EAAKnK,SAKRmE,EAA4B2F,EAA5B3F,UAAWkG,EAAiBP,EAAjBO,KAAMxH,EAAWiH,EAAXjH,OA0BrByH,EAAwCC,mBAC1C,kBACEpG,EAnBgB,SAACqG,EAAoB3H,GACvC,OAAQA,GACN,IAAK,MASL,QACE,OAAO2H,EART,IAAK,MACH,OAAOA,EAAM3H,QAAO,SAACsH,GAAD,MAAwC,QAA9BA,EAAK9B,cAAchH,UACnD,IAAK,aACH,OAAOmJ,EAAM3H,QAAO,SAACsH,GAAD,MAAwC,gBAA9BA,EAAK9B,cAAchH,UACnD,IAAK,OACH,OAAOmJ,EAAM3H,QAAO,SAACsH,GAAD,MAAwC,SAA9BA,EAAK9B,cAAchH,WAW/CoJ,CA3BY,SAACD,EAAoBH,GAArB,OACF,IAAhBA,EAAK3H,OACD8H,EACAA,EAAM3H,QACJ,SAACsH,GAAD,OAAUA,EAAK9B,cAAcnH,YAAYwJ,cAAcC,QAAQN,EAAKK,gBAAkB,KAuB1EE,CAAY9B,OAAOxD,OAAOnB,GAAYkG,GAAOxH,GAAQgI,eACjEC,IACN,CAAC3G,EAAWkG,EAAMxH,IAIpB,GAAIyH,EAAc,CAYhBT,EAAYS,EAAaJ,KAAI,SAACC,GAC5B,IAAQ7B,EAAsB6B,EAAtB7B,GAAID,EAAkB8B,EAAlB9B,cAEN0C,EAA4C,SAA3B1C,EAAcjH,SAAsB,yBAA2B,GAChF4J,EAAqC,SAAzB3C,EAAchH,OAAoB,oBAAsB,GACpE4J,EAC4B,MAAhC5C,EAAcE,cACVF,EAAcE,cAAgBF,EAAc/G,YAC1C,GACA,wBACF,IAAI+F,MAAO6D,cAAgB7C,EAAc/G,YACzC,uBACA,GAEN,OACE,oBACErB,UAAS,sBAAiB+K,EAAjB,YAA8BD,EAA9B,YAAgDE,GAEzDE,cAAe,kBA7BF,SAAC7C,GAClB0B,GAAkB,SAACoB,GACjB,OAAO,2BACFA,GADL,IAEEC,eAAgB/C,OAIpByB,IAqByBuB,CAAWhD,IAHlC,SAKE,cAAC,EAAD,CAAiBD,cAAeA,EAAeC,GAAIA,KAH9CA,MAQb,OACE,qCACE,wBAAOrI,UAAU,oBAAjB,UACE,gCACE,oBAAIA,UAAU,sCAAd,SAAqDgK,MAEvD,gCAAQK,GAAgBT,QAExBS,GAAgB,8DCzGTiB,G,OCQuB,SAAC,GAAkB,IAAhBrF,EAAe,EAAfA,SACjCsF,EAAqBC,SAASC,cAAc,OAkBlD,OAjBAF,EAAGG,UAAUC,IAAI,WAEjBhF,qBAAU,WACR6E,SAASI,KAAKC,MAAMC,SAAW,SAG/B,IAAMC,EAAmCP,SAASQ,cAAc,UAKhE,OAJID,GACFA,EAAUE,OAAOV,GAGZ,WACLA,EAAGtC,SACHuC,SAASI,KAAKC,MAAMC,SAAW,aAEhC,CAAC7F,IAEGiG,uBAAajG,EAAUsF,K,OCejBY,G,OAnC6B,SAAC,GAAD,IAC1CC,EAD0C,EAC1CA,MACAC,EAF0C,EAE1CA,WACAC,EAH0C,EAG1CA,WACAC,EAJ0C,EAI1CA,WACArK,EAL0C,EAK1CA,KACAsK,EAN0C,EAM1CA,UACAC,EAP0C,EAO1CA,YACAC,EAR0C,EAQ1CA,QACAC,EAT0C,EAS1CA,UACAC,EAV0C,EAU1CA,GACA3G,EAX0C,EAW1CA,SAX0C,OAa1C,qCACE,wBAAOjG,UAAW0C,EAAK,CAAC,QAAS2J,IAAcQ,QAASL,EAAxD,UACGJ,EACAE,GAAc,qBAAKtM,UAAU,iBAAf,eAFjB,OAIA,sBAAKA,UAAU,2BAAf,UACE,cAAC,IAAD,CACEA,UAAW0C,EAAK,CAAC,QAAS6J,EAAYG,GAAWC,GAAX,iBACtCtE,GAAImE,EACJtK,KAAMA,EACN4K,KAAMN,EACNC,YAAaA,EACbG,GAAIA,EANN,SAQG3G,IAGH,cAAC,IAAD,CAAc6G,KAAMN,EAAWO,UAAU,OAAO/M,UAAU,0B,+BCrCjDgN,GCuBuC,SAAC,GAKhD,IAJL5B,EAII,EAJJA,eACA6B,EAGI,EAHJA,UACAC,EAEI,EAFJA,cACAC,EACI,EADJA,SAEQvJ,EAAgBkC,IAAhBlC,YACAT,EAAgBuD,IAAhBvD,YAER,EAAwC+C,mBAA6B,CACnEjF,YAAa,GACbE,SAAU,MACVC,OAAQ,MACRC,YAAa,GACbiH,cAAe,MALjB,mBAAO8E,EAAP,KAAqBC,EAArB,KAQA1G,qBAAU,WACJyE,GbgJ4B,SAClCxH,EACAwH,EACAiC,EACAlK,GAEiBC,IAASmB,WAAWC,IAAI,SAAWZ,EAAYa,IAAM,eAEnE+D,KAAK,SACL9C,MAAK,SAAC+C,GACLA,EAASC,SAAQ,SAACC,GAChB,IAAM2E,EAAY3E,EAAcvE,MAChC,GAAIkJ,EAAUjF,KAAO+C,EAKnB,OAJAiC,EAAgB,eACXC,EAAUlF,iBAGR,QAIZ7E,OAAM,SAACwD,GACN5D,EAAYvD,EAAa6D,MAAd,kDAAgEsD,EAAIrD,aarK/E6J,CAAqB3J,EAAawH,EAAgBiC,EAAiBlK,KAEpE,IAEH,IAAMqK,EAAoB,SACxBpB,EACAE,EACApK,EACAsK,EACAC,EACAgB,EACAC,EACAd,EACA3G,GATwB,OAWxB,qBAAKjG,UAAU,4BAAf,SACE,cAAC,EAAD,CACEoM,MAAOA,EACPC,WAAW,oBACXC,WAAYA,EACZC,WAAW,oBACXrK,KAAMA,EACNsK,UAAWA,EACXC,YAAaA,EACbC,QAASF,KAAaiB,EACtBd,UAAWH,KAAakB,EACxBd,GAAIA,EACJ3G,SAAUA,OAKV0H,EAAU,SAACvF,IbyEY,SAACxE,EAAkBgK,EAAoBzK,GAA4B,IAAD,EACzFmB,EAAWlB,IAASmB,WAAWC,IAApB,gBAAiCZ,EAAYa,IAA7C,WACXoJ,EAAavJ,EAASH,MAAT,QAAuB2J,OAAO9E,IAEjD1E,EACGyE,QADH,kCAEa8E,GAAeD,GAF5B,2BAGgBA,EAAQvF,IAHxB,IAKG9E,OAAM,SAACwD,GACN5D,EAAYvD,EAAa6D,MAAd,6BAA2CsD,EAAIrD,aa7E5DqK,CAAgBnK,EALW,CACzBwE,gBACAC,GAAI4E,GAGgC9J,IAGlC6K,EAAW,SAAC5F,Ib8EY,SAC9BxE,EACAwH,EACAhD,EACAjF,GAEA,IAAM8K,EAAe7K,IAASmB,WAAWC,IAAI,SAAWZ,EAAYa,IAAM,eAC1EwJ,EACGzF,KAAK,SACL9C,MAAK,SAAC+C,GACLA,EAASC,SAAQ,SAACC,GAEhB,GADkBA,EAAcvE,MAClBiE,KAAO+C,EAGnB,OAFA6C,EAAa9J,MAAb,UAAsBwE,EAAcK,IAApC,mBAAyDkF,IAAzD,eAAkE9F,KAE3D,QAIZ7E,OAAM,SAACwD,GACN5D,EAAYvD,EAAa6D,MAAd,uCAAqDsD,EAAIrD,aajGtEyK,CAAiBvK,EAAawH,EAAgBhD,EAAejF,GAE7DgK,GAAS,cAAG/B,eAAH,IAAsBnH,EAAtB,sCACPmH,eAAgB,MACbnH,OAqCP,OACE,cAAC,IAAD,CACEmK,cAAe,CACbnN,YAAamM,EAAanM,YAC1BE,SAAUiM,EAAajM,SACvBC,OAAQgM,EAAahM,OACrBC,YAAa+L,EAAa/L,YACtBW,EAAiB,IAAIoF,KAAKgG,EAAa/L,aAAc,YACrD+L,EAAa/L,aAEnBgN,oBAAoB,EACpBC,iBAAkBtN,EAClBuN,SA7CiB,SACnBlJ,EADmB,GAGhB,EADDC,cACE,IAGEjE,EAAc,IAAI+F,KAAJ,UACf/B,EAAOhE,YADQ,wBfpFc,WAEpC,IAAImN,EAAsBhM,QAAO,IAAI4E,MAAOqH,oBDAT,ICYnC,OAVID,EAAoBE,SAAS,KAEA,IAA/BF,EAAoB/L,OACO+L,EAAoBG,QAAQ,IAAK,MACjCH,EAAoBG,QAAQ,IAAK,KAE7B,IAA/BH,EAAoB/L,OACI,YAAQ+L,GACR,WAAOA,GeyEQI,GADnB,QAElB3D,cAEI3C,EACc,SAAlBjD,EAAOjE,QAAoD,MAA/BgM,EAAa9E,eACrC,IAAIlB,MAAO6D,cACXmC,EAAa9E,cAEbuG,EAAI,2BACLxJ,GADK,IAERhE,cACAiH,kBAEE8C,EACF4C,EAASa,GAETlB,EAAQkB,GAOV3B,KAIA,SAaG,gBAAG4B,EAAH,EAAGA,aAAcrB,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,eAAC,IAAD,CAAM1N,UAAU,aAAhB,UACGwN,EAAkB,eAEjB,EAFgB,2CAMhBC,EACAC,OACA7C,GAEF,sBAAK7K,UAAU,mCAAf,UACGwN,EAAkB,YAEjB,OACA3C,EAHgB,gBAKhBA,EACA4C,EACAC,EAPgB,SAShB,CACE,wBAAkB/F,MAAM,MAAxB,gBAAY,OAGZ,wBAAqBA,MAAM,SAA3B,mBAAY,UAGZ,wBAAmBA,MAAM,OAAzB,iBAAY,UAKf6F,EAAkB,UAEjB,OACA3C,EAHgB,cAKhBA,EACA4C,EACAC,EAPgB,SAShB,CACE,wBAAkB/F,MAAM,MAAxB,gBAAY,OAGZ,wBAA0BA,MAAM,cAAhC,wBAAY,eAGZ,wBAAmBA,MAAM,OAAzB,iBAAY,aAUjB6F,EAAkB,YAEjB,EAFgB,0BAKhB3C,EACA4C,EACAC,OACA7C,GAGF,wBAAQ7K,UAAU,yBAAyBkC,KAAK,SAAS6M,SAAUD,EAAnE,yBClNKE,I,OCSiC,SAAC,GAAkB,IAAhB7B,EAAe,EAAfA,SACjD,EAAwBjH,mBAAS,IAAjC,mBAAOkE,EAAP,KAAa6E,EAAb,KASA,OACE,uBACE/M,KAAK,OACLuK,YAAY,wBACZzM,UAAU,eACV2H,MAAOyC,EACP8E,SAboB,SAACC,GACvB,IAAMC,EAAcD,EAAIE,OAAO1H,MAC/BsH,EAAQG,GAERjC,GAAS,SAAChC,GAAD,mBAAC,eAAoBA,GAArB,IAAgCf,KAAMgF,YChBpCE,I,OCiBmC,SAAC,GAAqC,IAAnCpL,EAAkC,EAAlCA,UAAWtB,EAAuB,EAAvBA,OAAQuK,EAAe,EAAfA,SAEhEoC,EAAQ1G,OAAOxD,OAAOnB,GACtBsL,EAAiC,SAACpO,GAAD,OACrCmO,EAAM3M,QAAO,SAACsH,GAAD,OAAUA,EAAK9B,cAAchH,SAAWA,KAAQqB,QAEzDgN,EAAwB,CAC5B,CACE3C,KAAM,aACNV,MAAO,cACPsD,WAAYF,EAA+B,gBAE7C,CAAE1C,KAAM,MAAOV,MAAO,MAAOsD,WAAYF,EAA+B,QACxE,CAAE1C,KAAM,OAAQV,MAAO,OAAQsD,WAAYF,EAA+B,SAC1E,CAAE1C,KAAM,MAAOV,MAAO,MAAOsD,WAAYH,EAAM9M,SAS3CkN,EAAyBF,EAASxF,KAAI,YAAkC,IAA/B6C,EAA8B,EAA9BA,KAAMV,EAAwB,EAAxBA,MAAOsD,EAAiB,EAAjBA,WAEpDE,EADWhN,IAAWkK,EACH,6BAA+B,GACxD,OACE,wBACE5K,KAAK,SACLlC,UAAS,iCAA4B4P,GAErCrH,QAAS,kBAdQ,SAAC3F,GAAD,OACrBuK,GAAS,SAAChC,GAAD,mBAAC,eACLA,GADI,IAEPvI,cAWiBiN,CAAe/C,IAJhC,mBAMMV,EANN,cAMiBsD,IAHV5C,MAQX,OAAO,qBAAK9M,UAAU,gBAAf,SAAgC2P,MCvB1BG,I,OAlB6C,SAAC,GAAD,IAC1D5L,EAD0D,EAC1DA,UACAtB,EAF0D,EAE1DA,OACAsK,EAH0D,EAG1DA,cACAC,EAJ0D,EAI1DA,SAJ0D,OAM1D,sBAAKnN,UAAS,oCAAgCkE,EAAD,GAAa,gBAA1D,UACE,wBAAQlE,UAAU,2BAA2BuI,QAAS2E,EAAtD,sBAGChJ,GACC,qCACE,cAAC,GAAD,CAAaiJ,SAAUA,IACvB,cAAC,GAAD,CAAcjJ,UAAWA,EAAWtB,OAAQA,EAAQuK,SAAUA,YC3BvD4C,I,OCSiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,gBAAiBjK,EAApC,EAAoCA,SAApC,OAC9B,0BAASjG,UAAS,gBAAWgQ,GAA7B,UACE,oBAAIhQ,UAAU,eAAd,SAA8BiQ,IAC7BC,GACC,wBAAQlQ,UAAU,eAAeuI,QAAS2H,EAA1C,SACE,sBAAMlQ,UAAU,kBAAhB,0DAGHiG,O,kCCyEUkK,GA9Ea,WAC1B,IAAQvM,EAAgBkC,IAAhBlC,YACAT,EAAgBuD,IAAhBvD,YAER,EAA0B+C,mBAA0B,CAClDkE,KAAM,GACNxH,OAAQ,aACRwN,WAAW,EACXhF,eAAgB,KAChBpH,cAAc,EACdE,UAAW,KACXG,WAAY,OAPd,mBAAOgM,EAAP,KAAclD,EAAd,KAUAxG,qBAAU,WAGR,OAFAhD,EAAkC,UAAWC,EAAaT,EAAagK,GAEhE,WACLxJ,EAAkC,aAAcC,EAAaT,EAAagK,MAE3E,IAEH,IAAIF,EAAgBoD,EAAMhM,WAAagM,EAAMhM,WAAa,EAAI,IAExDyF,EAAc,WAA8D,IAA7D5H,EAA4D,uDAAnCrC,EAAiByQ,QAC7DnD,GAAS,gBAAGiD,EAAH,EAAGA,UAAWhF,EAAd,EAAcA,eAAmBnH,EAAjC,qCAAC,eACLA,GADI,IAEPmM,WAAYA,EACZhF,eAAgBlJ,IAASrC,EAAiB0Q,yBAA2B,KAAOnF,QAIxElH,EAAiDmM,EAAjDnM,UAAWtB,EAAsCyN,EAAtCzN,OAAQwN,EAA8BC,EAA9BD,UAAWhF,EAAmBiF,EAAnBjF,eAEtC,OACE,sBAAMpL,UAAU,aAAhB,SACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,CAAWD,KAAK,cACfsQ,EAAMrM,aACL,qCACE,cAAC,GAAD,CACEE,UAAWA,EACXtB,OAAQA,EACRsK,cAAe,kBAAMpD,KACrBqD,SAAUA,IAGZ,cAAC,EAAD,CACEtD,eAAgBwG,EAChBvG,YAAaA,EACbC,kBAAmBoD,IAGpBiD,GACC,cAAC,EAAD,UACE,cAAC,GAAD,CACEJ,QAAQ,eACRC,MAAO7E,EAAiB,YAAc,WACtC8E,gBAAiB,kBAAMpG,EAAYjK,EAAiB0Q,2BAHtD,SAKE,cAAC,GAAD,CACEtD,UAAWA,EACXC,cAAepD,EACfsB,eAAgBA,EAChB+B,SAAUA,WAOpB,oD,oBCnFKqD,I,OCayC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjD7M,EAAgBkC,IAAhBlC,YACAT,EAAgBuD,IAAhBvD,YAER,OACE,qCACE,sBAAKnD,UAAU,eAAf,UACE,+BAAOgC,EAAiB,IAAIoF,KAAKqJ,EAAKC,cAAe,UACrD,wBACExO,KAAK,SACLlC,UAAU,+BACVuI,QAAS,kBvBwNe,SAACF,EAAQzE,EAAkBT,GAC1CC,IAASmB,WAAWC,IAAI,SAAWZ,EAAYa,IAAM,eAEnE+D,KAAK,SACL9C,MAAK,SAAC+C,GACLA,EAASC,SAAQ,SAACC,GAEhB,GADkBA,EAAcvE,MAClBiE,KAAOA,EAAI,CACvB,IAGkD,EAH5CsI,EAAUvN,IAASmB,WAAWC,IAAI,SAAWZ,EAAYa,IAAvB,UAexC,OAZIoE,OAAOC,KAAKL,EAASrE,OAAO3B,OAAS,IAAM,EAC7CkO,EAAQ5H,QAAR,mCACYJ,EAAcK,KAAQ,MADlC,cAEE,cAAe,MAFjB,IAKA5F,IACGmB,WACAC,IAAI,SAAWZ,EAAYa,IAAvB,sBAA4CkE,EAAcK,MAC9DC,UAGE,SAIZ1F,OAAM,SAACC,GACNL,EAAYvD,EAAa6D,MAAd,oCAAkDD,EAAME,auBpPhDkN,CAAmBH,EAAKpI,GAAIzE,EAAaT,IAH1D,SAKE,qBAAKgG,IAAKC,EAAYpJ,UAAU,cAAcqJ,MAAM,KAAKC,OAAO,KAAKC,IAAI,qBAG7E,mBAAGvJ,UAAU,oBAAb,SAAkCyQ,EAAKxP,mBC7B9B4P,I,OCa6B,SAAC,GAA+C,IAGtF9L,EAHyC+L,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,kBAAmBjH,EAAkB,EAAlBA,YAEnEkH,EAAwC1G,mBAAQ,kBAAMwG,EAAQjI,OAAOxD,OAAOyL,GAAOlG,eAAYC,IAAW,CAACiG,IAG/G,GAAIE,EAAc,CAUhBjM,EAAWiM,EAAa/G,KAAI,SAACC,GAC3B,IAAQ7B,EAAO6B,EAAP7B,GAER,OACE,cAAC4I,GAAA,EAAD,CAAwBC,QAAS,IAAKvO,WAAW,aAAjD,SACE,oBAAI3C,UAAU,aAAakL,cAAe,kBAd7B,SAAC7C,GAClB0I,GAAkB,SAAC5F,GAAD,mBAAC,eACdA,GADa,IAEhBC,eAAgB/C,OAGlByB,IAQoDuB,CAAWhD,IAA3D,SACE,cAAC,GAAD,CAAiBoI,KAAMvG,OAFP7B,MAS1B,OACE,qCACE,oBAAIrI,UAAU,mBAAd,SACE,cAACmR,GAAA,EAAD,CAAiBpE,UAAW,KAA5B,SAAmChI,OAEnCiM,GAAgB,8D,+BC9CTI,GCsBsC,SAAC,GAK/C,IAJLhG,EAII,EAJJA,eACA6B,EAGI,EAHJA,UACAC,EAEI,EAFJA,cACArI,EACI,EADJA,kBAEQjB,EAAgBkC,IAAhBlC,YACAT,EAAgBuD,IAAhBvD,YACR,EAAoD+C,mBAAS,IAA7D,mBAAOmL,EAAP,KAA2BC,EAA3B,KAEA3K,qBAAU,WACJyE,G3B+O4B,SAClCxH,EACAwH,EACAkG,EACAnO,GAEiBC,IAASmB,WAAWC,IAAI,SAAWZ,EAAYa,IAAM,eAEnE+D,KAAK,SACL9C,MAAK,SAAC+C,GACLA,EAASC,SAAQ,SAACC,GAChB,IAAM2E,EAAY3E,EAAcvE,MAChC,GAAIkJ,EAAUjF,KAAO+C,EAGnB,OAFAkG,EAAsBhE,EAAUrM,cAEzB,QAIZsC,OAAM,SAACC,GACNL,EAAYvD,EAAa6D,MAAd,kDAAgED,EAAME,a2BlQjF6N,CAAqB3N,EAAawH,EAAgBkG,EAAuBnO,KAE1E,IAEH,IAAMqO,EAAU,SAACvQ,GACf,IAAMwQ,EAAqB,CACzBxQ,cACAyP,cAAc,IAAItJ,MAAO6D,cACzB5C,GAAI4E,I3B8PqB,SAACrJ,EAAkB6N,EAAoBtO,GAA4B,IAAD,EACzF8B,EAAW7B,IAASmB,WAAWC,IAApB,gBAAiCZ,EAAYa,IAA7C,WACXiN,EAAazM,EAASd,MAAT,QAAuB2J,OAAO9E,IAEjD/D,EACG8D,QADH,kCAEa2I,GAAeD,GAF5B,2BAGgBA,EAAQpJ,IAHxB,IAKG9E,OAAM,SAACwD,GACN5D,EAAYvD,EAAa6D,MAAd,6BAA2CsD,EAAIrD,a2BrQ5DiO,CAAgB/N,EAAa6N,EAAStO,IAGlCyO,EAAW,SAAC3Q,I3BuQY,SAC9B2C,EACAwH,EACAnK,EACAkC,GAEA,IAAM0O,EAAczO,IAASmB,WAAWC,IAAI,SAAWZ,EAAYa,IAAM,eACzEoN,EACGrJ,KAAK,SACL9C,MAAK,SAAC+C,GACLA,EAASC,SAAQ,SAACC,GAEhB,GADkBA,EAAcvE,MAClBiE,KAAO+C,EAEnB,OADAyG,EAAY1N,MAAZ,UAAqBwE,EAAcK,IAAnC,iBAAsDkF,IAAIjN,IACnD,QAIZsC,OAAM,SAACC,GACNL,EAAYvD,EAAa6D,MAAd,uCAAqDD,EAAME,a2BzRxEoO,CAAiBlO,EAAawH,EAAgBnK,EAAakC,GAE3D0B,GAAkB,cAAGuG,eAAH,IAAsBnH,EAAtB,sCAChBmH,eAAgB,MACbnH,OAkBP,OACE,cAAC,IAAD,CACEmK,cAAe,CACbnN,YAAaoQ,GAEfhD,oBAAoB,EACpBC,iBAAkBhN,EAClBiN,SArBiB,SAAClJ,EAAD,GAA0E,EAAtCC,cACnD8F,EACFwG,EAASvM,EAAOpE,aAEhBuQ,EAAQnM,EAAOpE,aAOjBiM,KAIA,SAQG,gBAAG4B,EAAH,EAAGA,aAAcrB,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,eAAC,IAAD,CAAM1N,UAAU,aAAhB,UACE,cAAC,EAAD,CACEoM,MAAO,cACPC,WAAW,oBACXC,YAAY,EACZC,WAAW,mDACXrK,UAAM2I,EACN2B,UAAW,cACXC,YAAa,oBACbC,QAAS,gBAAiBe,EAC1Bd,UAAW,gBAAiBe,EAC5Bd,GAAI,WACJ3G,cAAU4E,IAGZ,wBAAQ7K,UAAU,yBAAyBkC,KAAK,SAAS6M,SAAUD,EAAnE,yB,2CCjBKiD,GAlEa,WAC1B,IAAQnO,EAAgBkC,IAAhBlC,YACAT,EAAgBuD,IAAhBvD,YACR,EAA0B+C,mBAA0B,CAClDkK,WAAW,EACXhF,eAAgB,KAChBpH,cAAc,EACde,SAAU,KACVC,WAAY,OALd,mBAAOqL,EAAP,KAAclD,EAAd,KAQAxG,qBAAU,WAGR,OAFA/B,EAAkC,UAAWhB,EAAaT,EAAagK,GAEhE,WACLvI,EAAkC,aAAchB,EAAaT,EAAagK,MAE3E,IAGH,IAAIF,EAAgBoD,EAAMrL,WAAaqL,EAAMrL,WAAa,EAAI,IACxD8E,EAAc,WAA8D,IAA7D5H,EAA4D,uDAAnCrC,EAAiByQ,QAC7DnD,GAAS,gBAAGiD,EAAH,EAAGA,UAAWhF,EAAd,EAAcA,eAAmBnH,EAAjC,qCAAC,eACLA,GADI,IAEPmM,WAAYA,EACZhF,eAAgBlJ,IAASrC,EAAiB0Q,yBAA2B,KAAOnF,QAIxErG,EAAwCsL,EAAxCtL,SAAUqL,EAA8BC,EAA9BD,UAAWhF,EAAmBiF,EAAnBjF,eAE7B,OACE,sBAAMpL,UAAU,aAAhB,SACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,CAAWD,KAAK,UACfsQ,EAAMrM,aACL,qCACE,wBAAQhE,UAAU,2BAA2BuI,QAAS,kBAAMuB,KAA5D,sBAGA,cAAC,GAAD,CAAWgH,MAAO/L,EAAUgM,kBAAmB5D,EAAUrD,YAAaA,IACrEsG,GACC,cAAC,EAAD,UACE,cAAC,GAAD,CACEJ,QAAQ,eACRC,MAAO7E,EAAiB,YAAc,WACtC8E,gBAAiB,kBAAMpG,EAAYjK,EAAiB0Q,2BAHtD,SAKE,cAAC,GAAD,CACEtD,UAAWA,EACXC,cAAepD,EACfsB,eAAgBA,EAChBvG,kBAAmBsI,WAO7B,oD7BvEV,SAAS6E,KAA2Q,OAA9PA,GAAWnJ,OAAOoJ,QAAU,SAAU5C,GAAU,IAAK,IAAI6C,EAAI,EAAGA,EAAIC,UAAU1P,OAAQyP,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAIlJ,KAAOoJ,EAAcvJ,OAAOwJ,UAAUC,eAAeC,KAAKH,EAAQpJ,KAAQqG,EAAOrG,GAAOoJ,EAAOpJ,IAAY,OAAOqG,GAAkB2C,GAASQ,MAAMC,KAAMN,WAgBjS,OAZf,SAAuBO,GACrB,OAAoB,gBAAoB,MAAOV,GAAS,CACtDW,MAAO,6BACPC,QAAS,aACRF,GAAQ1P,IAAUA,EAAqB,gBAAoB,OAAQ,CACpE6P,EAAG,gBACHC,KAAM,UACH7P,IAAWA,EAAsB,gBAAoB,OAAQ,CAChE4P,EAAG,sJ8BdQ,OAA0B,sCC6E1BE,GAtEc,WAAO,IAAD,IACzBnP,EAAgBkC,IAAhBlC,YACAT,EAAgBuD,IAAhBvD,YAER,EAAgC+C,mBAAQ,UAACtC,EAAYoP,gBAAb,QAAyB,IAAjE,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8ChN,oBAAS,GAAvD,mBAAOiN,EAAP,KAAwBC,EAAxB,KAsBA,OACE,sBAAKpT,UAAU,8CAAf,UACE,qBACEA,UAAU,wBACVmJ,IAAG,UAAEvF,EAAYoP,gBAAd,QAA0BK,GAC7BhK,MAAM,MACNC,OAAO,MACPC,IAAI,kBAGL4J,EACC,qCAEE,uBACEnT,UAAU,oDACVkC,KAAK,OACL4K,KAAK,SACLoC,SArBe,SAACC,GACxB+D,EAAY/D,EAAIE,OAAO1H,QAqBf8E,YAAY,+BACZ9E,MAAOsL,IAET,wBAAQjT,UAAU,qBAAqBuI,QAzCxB,WACrB3E,EACG0P,cAAc,CACbN,SAAUC,IAEXvN,MAAK,kBAAM0N,GAAmB,MAC9B7P,OAAM,SAACwD,GACN5D,EAAYvD,EAAa6D,MAAd,qCAAmDsD,EAAIrD,cAkChE,kBAGA,wBACE1D,UAAU,gDACVuI,QAnCwB,WAAa,IAAD,EAC5C2K,EAAW,UAACtP,EAAYoP,gBAAb,QAAyB,IACpCI,GAAmB,IA+Bb,uBAQF,wBACEpT,UAAU,0DACVuI,QAAS,kBAAM6K,GAAmB,IAFpC,SAIE,cAAC,GAAD,CAAY/J,MAAM,OAAOC,OAAO,eCE3BiK,GAlEY,WAAO,IAAD,IACvB3P,EAAgBkC,IAAhBlC,YACAT,EAAgBuD,IAAhBvD,YAER,EAAwB+C,mBAAQ,UAACtC,EAAY4P,mBAAb,QAA4B,IAA5D,mBAAO1G,EAAP,KAAa2G,EAAb,KACA,EAA0CvN,oBAAS,GAAnD,mBAAOwN,EAAP,KAAsBC,EAAtB,KAqBA,OACE,qBAAK3T,UAAU,gBAAf,SACG0T,EACC,qCACE,uBACE1T,UAAU,kDACVkC,KAAK,OACL4K,KAAK,OACLoC,SAZW,SAACC,GACpBsE,EAAQtE,EAAIE,OAAO1H,QAYX8E,YAAY,qBACZ9E,MAAOmF,IAET,wBAAQ9M,UAAU,qBAAqBuI,QA/B5B,WACjB3E,EACG0P,cAAc,CACbE,YAAa1G,IAEdpH,MAAK,kBAAMiO,GAAiB,MAC5BpQ,OAAM,SAACwD,GACN5D,EAAYvD,EAAa6D,MAAd,mCAAiDsD,EAAIrD,cAwB9D,kBAGA,wBACE1D,UAAU,gDACVuI,QA1BoB,WAAa,IAAD,EACxCkL,EAAO,UAAC7P,EAAY4P,mBAAb,QAA4B,IACnCG,GAAiB,IAsBX,uBAQF,gCACE,uBAAM3T,UAAU,sBAAhB,UACE,4CADF,UAEG4D,EAAY4P,mBAFf,QAE8B,eAE9B,wBACExT,UAAU,wDACVuI,QAAS,kBAAMoL,GAAiB,IAFlC,SAIE,cAAC,GAAD,CAAYtK,MAAM,OAAOC,OAAO,iBC/D7BsK,I,OCyBkD,SAAC,GAI3D,IAHL1G,EAGI,EAHJA,cACA/H,EAEI,EAFJA,KACAqB,EACI,EADJA,mBAEQrD,EAAgBuD,IAAhBvD,YAER,EAAwC+C,oBAAS,GAAjD,mBAAO2N,EAAP,KAAqBzO,EAArB,KAuBA,OACE,cAAC,IAAD,CACEgJ,cACEyF,EACI,CACErS,SAAU2D,EAAK/E,MACfE,SAAU,IAEZ,CACEoB,SAAU,IAGlB2M,oBAAoB,EACpBC,iBACEuF,EACItS,EACAE,EAEN8M,SAAUsF,EAvCe,SAACxO,EAAD,OAAgBC,EAAhB,EAAgBA,cAAhB,OAC3BJ,EACEC,EACAC,EACAjC,EACA,CAAE/C,MAAOiF,EAAO7D,SAAUlB,SAAU+E,EAAO/E,UAC3CgF,IAGkB,SAACD,EAAD,OAAgBC,EAAhB,EAAgBA,cAAhB,OjC6UgB,SACtCH,EACAqB,EACArD,EACA+J,EACA7H,EACAC,GAEAH,EACG2O,wBAAwBzO,EAAO3D,SAAU8E,GACzCd,MAAK,WACJvC,EACEvD,EAAamU,KACb,sEAEF7G,OAED3J,OAAM,SAAUwD,GACf5D,EAAYvD,EAAa6D,MAAd,oCAAkDsD,EAAIrD,UACjE4B,GAAc,MiC/VhB0O,CACE7O,EACAqB,EACArD,EACA+J,EACA7H,EACAC,IAMF,SAmBG,gBAAGwJ,EAAH,EAAGA,aAAcrB,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,eAAC,IAAD,CAAM1N,UAAU,oBAAhB,UACG6T,EACC,qCACE,qBAAK7T,UAAU,mCAAf,SACE,cAAC,EAAD,CACEoM,MAAO,YACPC,WAAW,2BACXC,YAAY,EACZC,WAAW,2BACXrK,KAAM,QACNsK,UAAW,WACXC,YAAa,uBACbC,QAAS,aAAce,EACvBd,UAAW,aAAce,MAI7B,qBAAK1N,UAAU,mCAAf,SACE,cAAC,EAAD,CACEoM,MAAO,WACPC,WAAW,2BACXC,YAAY,EACZC,WAAW,2BACXrK,KAAM,WACNsK,UAAW,WACXC,YAAa,sBACbC,QAAS,aAAce,EACvBd,UAAW,aAAce,SAK/B,qBAAK1N,UAAU,mCAAf,SACE,cAAC,EAAD,CACEoM,MAAO,YACPC,WAAW,2BACXC,YAAY,EACZC,WAAW,2BACXrK,KAAM,QACNsK,UAAW,WACXC,YAAa,uBACbC,QAAS,aAAce,EACvBd,UAAW,aAAce,MAK/B,wBAAQ1N,UAAU,gCAAgCkC,KAAK,SAAS6M,SAAUD,EAA1E,SACG+E,EAAe,WAAa,iBCxE1BI,GA7Ca,WAC1B,MAA4CnO,IAApClC,EAAR,EAAQA,YAAa4C,EAArB,EAAqBA,mBACf0N,EAA0D,eAA3CtQ,EAAYuQ,aAAa,GAAGC,WAEjD,EAAwDlO,oBAAS,GAAjE,mBAAOmO,EAAP,KAA6BC,EAA7B,KAEMC,EAAyB,WAC7BD,GAAwB,SAACE,GAAD,OAAWA,MAGrC,OACE,sBAAKxU,UAAU,qCAAf,UACE,uBAAMA,UAAU,sBAAhB,UACE,6CACC4D,EAAYxD,UAGb8T,GACA,wBACElU,UAAU,yDACVuI,QAASgM,EAFX,SAIE,cAAC,GAAD,CAAYlL,MAAM,OAAOC,OAAO,WAInC+K,GACC,cAAC,EAAD,UACE,cAAC,GAAD,CACErE,QAAQ,sBACRC,MAAM,qBACNC,gBAAiBqE,EAHnB,SAKE,cAAC,GAAD,CACErH,cAAeqH,EACfpP,KAAMvB,EACN4C,mBAAoBA,YC3CnBiO,I,OCwBwD,SAAC,GAGjE,IAFLvH,EAEI,EAFJA,cACA/H,EACI,EADJA,KAEQhC,EAAgBuD,IAAhBvD,YAER,EAAwC+C,oBAAS,GAAjD,mBAAO2N,EAAP,KAAqBzO,EAArB,KAcA,OACE,cAAC,IAAD,CACEgJ,cACEyF,EACI,CACEzT,MAAO+E,EAAK/E,MACZwB,YAAa,IAEf,CACEE,YAAa,IAGrBuM,oBAAoB,EACpBC,iBACEuF,EACIlS,EACAE,EAEN0M,SAAUsF,EA9Be,SAACxO,EAAD,OAAgBC,EAAhB,EAAgBA,cAAhB,OAC3BJ,EACEC,EACAC,EACAjC,EACA,CAAE/C,MAAOiF,EAAOjF,MAAOE,SAAU+E,EAAOzD,aACxC0D,IAGqB,SAACD,EAAD,OAAgBC,EAAhB,EAAgBA,cAAhB,OpCsWgB,SACzCH,EACAhC,EACA+J,EACA7H,EACAC,GAGAH,EACGuP,eAAerP,EAAOvD,aACtB4D,MAAK,WACJvC,EAAYvD,EAAa+U,QAAS,2CAClCzH,OAED3J,OAAM,SAACwD,GACN5D,EAAYvD,EAAa6D,MAAd,0CAAwDsD,EAAIrD,UACvE4B,GAAc,MoCrXhBsP,CAA4BzP,EAAMhC,EAAa+J,EAAe7H,EAAQC,IAGtE,SAmBG,gBAAGwJ,EAAH,EAAGA,aAAcrB,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,eAAC,IAAD,CAAM1N,UAAU,uBAAhB,UACG6T,EACC,qCACE,qBAAK7T,UAAU,sCAAf,SACE,cAAC,EAAD,CACEoM,MAAO,QACPC,WAAW,8BACXC,YAAY,EACZC,WAAW,gEACXrK,KAAM,QACNsK,UAAW,QACXC,YAAa,mBACbC,QAAS,UAAWe,EACpBd,UAAW,UAAWe,MAI1B,qBAAK1N,UAAU,sCAAf,SACE,cAAC,EAAD,CACEoM,MAAO,eACPC,WAAW,8BACXC,YAAY,EACZC,WAAW,uEACXrK,KAAM,WACNsK,UAAW,cACXC,YAAa,0BACbC,QAAS,gBAAiBe,EAC1Bd,UAAW,gBAAiBe,SAKlC,qBAAK1N,UAAU,sCAAf,SACE,cAAC,EAAD,CACEoM,MAAO,eACPC,WAAW,8BACXC,YAAY,EACZC,WAAW,uEACXrK,KAAM,WACNsK,UAAW,cACXC,YAAa,0BACbC,QAAS,gBAAiBe,EAC1Bd,UAAW,gBAAiBe,MAUlC,wBACE1N,UAAU,mCACVkC,KAAK,SACL6M,SAAUD,EAHZ,SAKG+E,EAAe,WAAa,iBCnE1BgB,GAhDgB,WAC7B,MAA4C/O,IAApClC,EAAR,EAAQA,YAAa4C,EAArB,EAAqBA,mBACbrD,EAAgBuD,IAAhBvD,YAER,EAA8D+C,oBAAS,GAAvE,mBAAO4O,EAAP,KAAgCC,EAAhC,KAEMC,EAA4B,WAChCD,GAA2B,SAACP,GAAD,OAAWA,MAGxC,OACE,qCACE,sBAAKxU,UAAU,gBAAf,UACE,0EACA,wBAAQA,UAAU,qBAAqBuI,QAASyM,EAAhD,0BAIF,sBAAKhV,UAAU,gBAAf,UACE,4GACA,wBACEA,UAAU,qBACVuI,QAAS,kBrCmTiC,SAClD0M,EACAzO,EACArD,GAHkD,OAKlDC,IACGC,OACA6R,uBAAuBD,EAAWzO,GAClCd,MAAK,WACJvC,EAAYvD,EAAamU,KAAM,oDAEhCxQ,OAAM,SAACwD,GACN5D,EACEvD,EAAa6D,MADJ,uDAEuCsD,EAAIrD,aqChUhDyR,CAAqCvR,EAAYxD,MAAOoG,EAAoBrD,IAHhF,+BAUD2R,GACC,cAAC,EAAD,UACE,cAAC,GAAD,CACE9E,QAAQ,yBACRC,MAAM,wBACNC,gBAAiB8E,EAHnB,SAKE,cAAC,GAAD,CACE9H,cAAe8H,EACf7P,KAAMvB,YC9CLwR,I,OCqBkE,SAAC,GAG3E,IAFLlI,EAEI,EAFJA,cACA/H,EACI,EADJA,KAEQhC,EAAgBuD,IAAhBvD,YACR,EAAwC+C,oBAAS,GAAjD,mBAAO2N,EAAP,KAAqBzO,EAArB,KAQA,OACE,cAAC,IAAD,CACEgJ,cACEyF,EACI,CACEzT,MAAO+E,EAAK/E,MACZE,SAAU,IAEZ,GAEN+N,oBAAoB,EACpBC,iBAAkBuF,EAAe9R,OAA2C8I,EAC5E0D,SAAUsF,EAlBe,SAACxO,EAAD,OAAgBC,EAAhB,EAAgBA,cAAhB,OAC3BJ,EAA+BC,EAAMC,EAAiBjC,EAAakC,EAAQC,IAErD,SAACD,EAAD,OAAgBC,EAAhB,EAAgBA,cAAhB,OvCoYe,SACvCH,EACAhC,EACAmC,GAEAH,EAAKkQ,SAAS9R,OAAM,SAACwD,GACnB5D,EAAYvD,EAAa6D,MAAd,0CAAwDsD,EAAIrD,UACvE4B,GAAc,MuC1YdgQ,CAA0BnQ,EAAMhC,EAAamC,IAG7C,SAaG,gBAAGwJ,EAAH,EAAGA,aAAcrB,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,cAAC,IAAD,CAAM1N,UAAU,sBAAhB,SACG6T,EACC,qCACE,qBAAK7T,UAAU,qCAAf,SACE,cAAC,EAAD,CACEoM,MAAO,QACPC,WAAW,6BACXC,YAAY,EACZC,WAAW,8DACXrK,KAAM,QACNsK,UAAW,QACXC,YAAa,mBACbC,QAAS,UAAWe,EACpBd,UAAW,UAAWe,MAI1B,qBAAK1N,UAAU,qCAAf,SACE,cAAC,EAAD,CACEoM,MAAO,WACPC,WAAW,6BACXC,YAAY,EACZC,WAAW,kEACXrK,KAAM,WACNsK,UAAW,WACXC,YAAa,sBACbC,QAAS,aAAce,EACvBd,UAAW,aAAce,MAI7B,wBACE1N,UAAU,2DACVkC,KAAK,SACL6M,SAAUD,EAHZ,yBASF,qCACE,uBAAM9O,UAAU,oCAAhB,yBACc,0CADd,iBAC4C,wCAD5C,sCAIA,sBAAKA,UAAU,mCAAf,UACE,wBACEA,UAAU,0DACVkC,KAAK,SACL6M,SAAUD,EAHZ,iBAOA,wBACE9O,UAAU,6DACVkC,KAAK,SACLqG,QAAS,kBAAM2E,KAHjB,6BC5DDqI,GApCc,WAC3B,IAAQ3R,EAAgBkC,IAAhBlC,YAER,EAA4DsC,oBAAS,GAArE,mBAAOsP,EAAP,KAA+BC,EAA/B,KAEMC,EAA2B,WAC/BD,GAA0B,SAACjB,GAAD,OAAWA,MAGvC,OACE,sBAAKxU,UAAU,gBAAf,UACE,wBACEA,UAAU,mFACVuI,QAASmN,EAFX,4BAOCF,GACC,cAAC,EAAD,UACE,cAAC,GAAD,CACExF,QAAQ,wBACRC,MAAM,uBACNC,gBAAiBwF,EAHnB,SAKE,cAAC,GAAD,CACEvQ,KAAMvB,EACNsJ,cAAewI,YCGdC,I,OAzBgB,WAC7B,IACMzB,EAA0D,eADxCpO,IAAhBlC,YACyBuQ,aAAa,GAAGC,WAEjD,OACE,sBAAMpU,UAAU,gBAAhB,SACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,CAAWD,KAAK,aAChB,oBAAIC,UAAU,0BAAd,qBAEA,sBAAKA,UAAU,mBAAf,UACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,KAEEkU,GAAgB,cAAC,GAAD,IAClB,cAAC,GAAD,OAEF,oBAAIlU,UAAU,0BAAd,wBCJO4V,GAxBqD,CAClE,CACExJ,MAAO,QACPE,YAAY,EACZpK,KAAM,QACNsK,UAAW,QACXC,YAAa,oBAEf,CACEL,MAAO,WACPE,YAAY,EACZpK,KAAM,WACNsK,UAAW,WACXC,YAAa,qBAEf,CACEL,MAAO,kBACPE,YAAY,EACZpK,KAAM,WACNsK,UAAW,iBACXC,YAAa,yBCrBFoJ,I,OCWsB,WACnC,IAAQ1S,EAAgBuD,IAAhBvD,YAER,OACE,qCACE,cAAC,IAAD,CACEiL,cAAe,CAAEhO,MAAO,GAAIE,SAAU,GAAIE,eAAgB,IAC1D8N,iBAAkBpO,EAClBqO,SAAU,SAAClJ,EAAD,OAAWC,EAAX,EAAWA,cAAX,O5CTgB,SAACD,EAAalC,EAAkBmC,GAAhC,OAChClC,IACGC,OACAyS,+BAA+BzQ,EAAOjF,MAAOiF,EAAO/E,UACpDoF,MAAK,kBAAMsB,aAAa+O,QAAQ,aAAc,WAC9CxS,OAAM,SAACwD,GAAD,OACL5D,EAAYvD,EAAa6D,MAAd,0CAAwDsD,EAAIrD,aAExEsS,SAAQ,kBAAM1Q,GAAc,M4CEvB2Q,CAAmB5Q,EAAQlC,EAAamC,IAJ5C,SAOG,gBAAGwJ,EAAH,EAAGA,aAAcrB,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,eAAC,IAAD,CAAM1N,UAAU,eAAhB,UACG4V,GAAa3L,KAAI,SAACC,GAAD,OAChB,qBAAKlK,UAAU,8BAAf,SACE,cAAC,EAAD,CACEoM,MAAOlC,EAAKkC,MACZC,WAAW,sBACXC,WAAYpC,EAAKoC,WACjBC,WAAW,sBACXrK,KAAMgI,EAAKhI,KACXsK,UAAWtC,EAAKsC,UAChBC,YAAavC,EAAKuC,YAClBC,QAASxC,EAAKsC,aAAaiB,EAC3Bd,UAAWzC,EAAKsC,aAAakB,KAViBxD,EAAKsC,cAezD,wBAAQxM,UAAU,2BAA2BkC,KAAK,SAAS6M,SAAUD,EAArE,2BAON,sBAAK9O,UAAU,sCAAf,UACE,sBAAMA,UAAU,4BAAhB,0BACA,wBACEA,UAAU,2BACVuI,QAAS,kB5ChByB,SAACpF,GAC3C,IAAM+S,EAAW,IAAI9S,IAASC,KAAK8S,mBAEnC/S,IACGC,OACA+S,gBAAgBF,GAChBxQ,MAAK,kBAAMsB,aAAa+O,QAAQ,aAAc,WAC9CxS,OAAM,SAACC,GACNL,EAAYvD,EAAa6D,MAAOD,EAAME,Y4CQnB2S,CAA6BlT,IAF9C,6BAQF,uBAAMnD,UAAU,gCAAhB,qCAC2B,IACzB,cAAC,IAAD,CAAMA,UAAU,+BAA+BsW,GAAG,WAAlD,6BCjDOC,GARc,kBAC3B,sBAAMvW,UAAU,eAAhB,SACE,cAAC,GAAD,CAAOgQ,QAAQ,iBAAiBC,MAAM,UAAtC,SACE,cAAC,GAAD,SCkBS2F,GAvBqD,CAClE,CACExJ,MAAO,QACPE,YAAY,EACZpK,KAAM,QACNsK,UAAW,QACXC,YAAa,oBAEf,CACEL,MAAO,WACPE,YAAY,EACZpK,KAAM,WACNsK,UAAW,WACXC,YAAa,uBAEf,CACEL,MAAO,cACPE,YAAY,EACZpK,KAAM,WACNsK,UAAW,eCpBAgK,I,OCYsB,WACnC,IAAQrT,EAAgBuD,IAAhBvD,YAER,OACE,qCACE,cAAC,IAAD,CACEiL,cAAe,CACbhO,MAAO,GACPE,SAAU,GACVO,WAAY4V,QAAQzP,aAAaC,QAAQ,gBAE3CqH,iBAAkB5N,EAClB6N,SAAU,SAAClJ,EAAD,OAAWC,EAAX,EAAWA,cAAX,OhDJY,SAACD,EAAalC,EAAkBmC,GACxDD,EAAOxE,WACTmG,aAAa+O,QAAQ,aAAc,QAEnC/O,aAAa0P,WAAW,cAG1BtT,IACGC,OACAsT,2BAA2BtR,EAAOjF,MAAOiF,EAAO/E,UAChDiD,OAAM,SAACwD,GAAD,OAAS5D,EAAYvD,EAAa6D,MAAOsD,EAAIrD,YACnDsS,SAAQ,kBAAM1Q,GAAc,MgDPgBsR,CAAevR,EAAQlC,EAAamC,IAP/E,SASG,gBAAGwJ,EAAH,EAAGA,aAAcrB,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,eAAC,IAAD,CAAM1N,UAAU,eAAhB,UACG4V,GAAa3L,KAAI,SAACC,GAAD,OAChB,qBACElK,UAAW0C,EAAK,CAAC,8BAEf,eAAAwH,EAAKsC,WAAL,0CAHJ,SAOE,cAAC,EAAD,CACEJ,MAAOlC,EAAKkC,MACZC,WAAW,sBACXC,WAAYpC,EAAKoC,WACjBC,WAAY7J,EAAK,CAAC,sBAEhB,eAAAwH,EAAKsC,WAAL,kCAEFtK,KAAMgI,EAAKhI,KACXsK,UAAWtC,EAAKsC,UAChBC,YAAavC,EAAKuC,YAClBC,QAASxC,EAAKsC,aAAaiB,EAC3Bd,UAAWzC,EAAKsC,aAAakB,KAd1BxD,EAAKsC,cAmBd,wBAAQxM,UAAU,2BAA2BkC,KAAK,SAAS6M,SAAUD,EAArE,2BAON,wBACE9O,UAAU,6BACVuI,QAAS,kBhDbmB,SAACpF,GACnC,IAAM+S,EAAW,IAAI9S,IAASC,KAAK8S,mBACnC/S,IACGC,OACA+S,gBAAgBF,GAChB3S,OAAM,SAACC,GACNL,EAAYvD,EAAa6D,MAAOD,EAAME,YgDOrBmT,CAAqB1T,IAFtC,0BAOA,uBAAMnD,UAAU,8BAAhB,6BACmB,IACjB,cAAC,IAAD,CAAMA,UAAU,uBAAuBsW,GAAG,kBAA1C,sBAIF,uBAAMtW,UAAU,gCAAhB,oBACU,IACR,cAAC,IAAD,CAAMA,UAAU,uBAAuBsW,GAAG,WAA1C,6BChEOQ,GARc,kBAC3B,sBAAM9W,UAAU,eAAhB,SACE,cAAC,GAAD,CAAOgQ,QAAQ,iBAAiBC,MAAM,UAAtC,SACE,cAAC,GAAD,SCqDS8G,I,OAjD6B,WAC1C,IAAQvQ,EAAuBV,IAAvBU,mBACArD,EAAgBuD,IAAhBvD,YAER,OACE,qCACE,cAAC,IAAD,CACEiL,cAAe,CACbhO,MAAO,IAETkO,iBAAkBxN,EAClByN,SAAU,SAAClJ,EAAD,OAAWC,EAAX,EAAWA,cAAX,OlDiD4B,SAC5CD,EACAmB,EACArD,EACAmC,GAJ4C,OAM5ClC,IACGC,OACA6R,uBAAuB7P,EAAOjF,MAAOoG,GACrCd,MAAK,WACJvC,EAAYvD,EAAamU,KAAM,gDAEhCxQ,OAAM,SAACwD,GACN5D,EAAYvD,EAAa6D,MAAOsD,EAAIrD,YAErCsS,SAAQ,kBAAM1Q,GAAc,MkD/DvB0R,CAA+B3R,EAAQmB,EAAoBrD,EAAamC,IAN5E,SASG,gBAAGwJ,EAAH,EAAGA,aAAcrB,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,eAAC,IAAD,CAAM1N,UAAU,sBAAhB,UACE,qBAAKA,UAAU,qCAAf,SACE,cAAC,EAAD,CACEoM,MAAM,QACNC,WAAW,6BACXC,YAAY,EACZC,WAAW,6BACXrK,KAAK,QACLsK,UAAU,QACVC,YAAY,mBACZC,QAAS,UAAWe,EACpBd,UAAW,UAAWe,MAI1B,wBACE1N,UAAU,kCACVkC,KAAK,SACL6M,SAAUD,EAHZ,kCAWN,cAAC,IAAD,CAAM9O,UAAU,sCAAsCsW,GAAG,WAAzD,0CCzCSW,GARqB,kBAClC,sBAAMjX,UAAU,sBAAhB,SACE,cAAC,GAAD,CAAOgQ,QAAQ,wBAAwBC,MAAM,iBAA7C,SACE,cAAC,GAAD,SCNSiH,I,OCMU,WACvB,IAAQ/T,EAAgBuD,IAAhBvD,YAER,OACE,wBAAQnD,UAAU,cAAlB,SACE,sBAAKA,UAAU,yBAAf,UACE,sBAAKA,UAAU,WAAf,UACE,cAAC,IAAD,CAASmX,OAAK,EAACb,GAAG,IAAItW,UAAU,iBAAiBoX,gBAAgB,wBAAjE,mBAGA,qBAAIpX,UAAU,iBAAd,UACE,oBAAIA,UAAU,iBAAd,SACE,cAAC,IAAD,CACEsW,GAAG,QACHtW,UAAU,iBACVoX,gBAAgB,wBAHlB,oBAQF,oBAAIpX,UAAU,iBAAd,SACE,cAAC,IAAD,CACEsW,GAAG,SACHtW,UAAU,iBACVoX,gBAAgB,wBAHlB,qBAQF,oBAAIpX,UAAU,iBAAd,SACE,cAAC,IAAD,CACEsW,GAAG,YACHtW,UAAU,iBACVoX,gBAAgB,wBAHlB,8BAWN,wBAAQpX,UAAU,4BAA4BuI,QAAS,kBAAMrF,EAAgBC,IAA7E,6BC3BOkU,I,OAfgB,WAC7B,IAAQlU,EAAgBuD,IAAhBvD,YAER,OACE,qBAAKnD,UAAU,cAAf,SACE,sBAAKA,UAAU,uBAAf,wDAC8C,IAC5C,wBAAQA,UAAU,4BAA4BuI,QAAS,kBAAMrF,EAAgBC,IAA7E,6B,SCZOmU,I,OCIW,WACxB,MAA+C5Q,IAAvChD,EAAR,EAAQA,QAASxB,EAAjB,EAAiBA,KAAM4F,EAAvB,EAAuBA,OAAQI,EAA/B,EAA+BA,YAW/B,OATAvB,qBAAU,WACR,GAAImB,EAAQ,CACV,IAAIyP,EAAUC,WAAWtP,EAAa,KACtC,OAAO,WACLuP,aAAaF,OAGhB,CAACzP,IAGF,cAAC4P,GAAA,EAAD,CAAYC,GAAI7P,EAAQoJ,QAAS,IAAK0G,eAAa,EAAnD,SACG,SAACC,GAAD,OACC,sBAAK7X,UAAS,kBAAa6X,EAAb,qBAAyC3V,GAAvD,UACE,sBAAMlC,UAAU,mBAAhB,SAAoC0D,IACpC,wBAAQ1D,UAAU,iBAAiBuI,QAAS,kBAAML,eCrB7C4P,I,cCkBO,WACpB,MAAoChS,IAA5BK,EAAR,EAAQA,WAAYvC,EAApB,EAAoBA,YAEpB,OACE,cAAC,IAAD,UACGuC,EACC,mCACGvC,EAAYiD,cACX,qCACE,cAAC,IAAD,CAAOkR,KAAK,WAAWC,OAAQ,kBAAM,cAAC,IAAD,CAAU1B,GAAG,SAClD,cAAC,IAAD,CAAOyB,KAAK,WAAWC,OAAQ,kBAAM,cAAC,IAAD,CAAU1B,GAAG,SAClD,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,IAAD,CAAOyB,KAAK,IAAIhL,UAAW9M,EAAUkX,OAAK,IAC1C,cAAC,IAAD,CAAOY,KAAK,QAAQhL,UAAWoD,KAC/B,cAAC,IAAD,CAAO4H,KAAK,SAAShL,UAAWgF,KAChC,cAAC,IAAD,CAAOgG,KAAK,YAAYhL,UAAW4I,QAGrC,qCACE,cAAC,IAAD,CAAOoC,KAAK,WAAWC,OAAQ,kBAAM,cAAC,IAAD,CAAU1B,GAAG,SAClD,cAAC,IAAD,CAAOyB,KAAK,WAAWC,OAAQ,kBAAM,cAAC,IAAD,CAAU1B,GAAG,SAClD,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,SAKN,qCACE,cAAC,GAAD,IACA,cAAC,IAAD,CAAOyB,KAAK,WAAWhL,UAAWwJ,KAClC,cAAC,IAAD,CAAOwB,KAAK,WAAWhL,UAAW+J,KAClC,cAAC,IAAD,CAAOiB,KAAK,kBAAkBhL,UAAWkK,KAGzC,cAAC,IAAD,CAAUX,GAAG,oB,cC1BvBlT,IAAS6U,cAV+B,CACtCC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,iDACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,8CAKTC,IAAST,OACP,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,GAAD,QAGJxM,SAASQ,cAAc,W","file":"static/js/main.4c2228ed.chunk.js","sourcesContent":["export type Id = number;\r\n\r\nexport enum TooltipTypes {\r\n  Info = 'info',\r\n  Error = 'error',\r\n  Success = 'success',\r\n}\r\n\r\nexport enum ToggleModalTypes {\r\n  Default = 'default',\r\n  WithSelectedItemClearing = 'withSelectedItemClearing',\r\n}\r\n","import PageTitle from \"./page-title\";\r\nexport default PageTitle;\r\n","import React from 'react';\r\nimport './page-title.css';\r\n\r\ninterface PageTitleProps {\r\n  text: string;\r\n}\r\n\r\nconst PageTitle: React.FC<PageTitleProps> = ({ text }) => {\r\n  return <h1 className=\"page-title\">{text}</h1>;\r\n};\r\n\r\nexport default PageTitle;\r\n","import React from 'react';\r\nimport PageTitle from '../components/page-title/';\r\n\r\nconst MainPage: React.FC = () => (\r\n  <main className=\"main-page\">\r\n    <div className=\"container\">\r\n      <PageTitle text=\"Welcome to the greatest todo app ever!!!\" />\r\n    </div>\r\n  </main>\r\n);\r\n\r\nexport default MainPage;\r\n","import * as Yup from 'yup';\r\n\r\nexport const signUpValidationSchema = Yup.object({\r\n  email: Yup.string().email('Invalid email address').required('Required'),\r\n  password: Yup.string().min(6, 'Must be 6 characters or more').required('Required'),\r\n  repeatPassword: Yup.string()\r\n    .oneOf([Yup.ref('password')], `Passwords don't match`)\r\n    .required('Required'),\r\n});\r\n\r\nexport const signInValidationSchema = signUpValidationSchema.omit(['repeatPassword']).shape({\r\n  rememberMe: Yup.boolean(),\r\n});\r\n\r\nexport const resetPasswordValidationSchema = signUpValidationSchema.pick(['email']);\r\n\r\n// @todo Вынести эти значения в constants.ts\r\nexport const MINUTES_COUNT_IN_HOUR = 60;\r\n\r\n// Корректная длина даты для value календаря в форме todo-шек\r\nexport const CORRECT_DATE_LENGTH = 10;\r\n\r\n// Максимальная длина заголовка, при которой todo-шка смотрится норм\r\nexport const MAX_TITLE_LENGTH = 40;\r\n\r\nexport const todoFormValidationSchema = Yup.object({\r\n  description: Yup.string()\r\n    .max(MAX_TITLE_LENGTH, `Must be ${MAX_TITLE_LENGTH} characters or less`)\r\n    .required('Required'),\r\n  priority: Yup.string().oneOf([`Low`, `Medium`, `High`], `Unexpected value`).required('Required'),\r\n  status: Yup.string()\r\n    .oneOf([`New`, `In progress`, `Done`], `Unexpected value`)\r\n    .required('Required'),\r\n  endDatePlan: Yup.string().max(CORRECT_DATE_LENGTH, 'Incorrect date').required('Required'),\r\n});\r\n\r\nexport const noteFormValidationSchema = Yup.object({\r\n  description: Yup.string().required('Required'),\r\n});\r\n\r\nexport const changeEmailFormStepOneValidationSchema = Yup.object({\r\n  oldEmail: Yup.string().email('Invalid email address').required('Required'),\r\n  password: Yup.string().min(6, 'Must be 6 characters or more').required('Required'),\r\n});\r\n\r\nexport const changeEmailFormStepTwoValidationSchema = Yup.object({\r\n  newEmail: Yup.string().email('Invalid email address').required('Required'),\r\n});\r\n\r\nexport const changePasswordFormStepOneValidationSchema = Yup.object({\r\n  email: Yup.string().email('Invalid email address').required('Required'),\r\n  oldPassword: Yup.string().min(6, 'Must be 6 characters or more').required('Required'),\r\n});\r\n\r\nexport const changePasswordFormStepTwoValidationSchema = Yup.object({\r\n  newPassword: Yup.string().min(6, 'Must be 6 characters or more').required('Required'),\r\n});\r\n\r\nexport const deleteAccountFormStepOneValidationSchema = Yup.object({\r\n  email: Yup.string().email('Invalid email address').required('Required'),\r\n  password: Yup.string().min(6, 'Must be 6 characters or more').required('Required'),\r\n});\r\n","import { MINUTES_COUNT_IN_HOUR } from './validationSchemas';\r\n\r\nexport const getFormattedDate = (date: Date, type: string): string => {\r\n  const currentMonth: number = date.getMonth() + 1;\r\n  const currentDay: number = date.getDate();\r\n  if (type === 'calendar') {\r\n    return `${date.getFullYear()}-${\r\n      String(currentMonth).length === 2 ? currentMonth : '0' + currentMonth\r\n    }-${String(currentDay).length === 2 ? currentDay : '0' + currentDay}`;\r\n  }\r\n  return `${String(currentDay).length === 2 ? currentDay : '0' + currentDay}.${\r\n    String(currentMonth).length === 2 ? currentMonth : '0' + currentMonth\r\n  }.${date.getFullYear()}`;\r\n};\r\n\r\nexport const getFormattedTimeOffset = (): string => {\r\n  // Смещение UTC относительно нашего часового пояса. Например, в Иркутске -8\r\n  let formattedTimeOffset = String(new Date().getTimezoneOffset() / MINUTES_COUNT_IN_HOUR);\r\n\r\n  if (formattedTimeOffset.includes('-')) {\r\n    // Присваеваем formattedTimeOffset смещение относительно UTC, а не нашего часового пояса, меняя знак\r\n    formattedTimeOffset.length === 2\r\n      ? (formattedTimeOffset = formattedTimeOffset.replace('-', '+0'))\r\n      : (formattedTimeOffset = formattedTimeOffset.replace('-', '+'));\r\n  } else {\r\n    formattedTimeOffset.length === 1\r\n      ? (formattedTimeOffset = `-0${formattedTimeOffset}`)\r\n      : (formattedTimeOffset = `-${formattedTimeOffset}`);\r\n  }\r\n  return formattedTimeOffset;\r\n};\r\n\r\nexport const clsx = (classNames: any[]): string =>\r\n  classNames\r\n    .filter((v) => !!v)\r\n    .join(` `)\r\n    .trim();\r\n","var _path, _path2;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgChangeIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a.996.996 0 000-1.41l-2.34-2.34a.996.996 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n  })));\n}\n\nexport default SvgChangeIcon;","import firebase from 'firebase/app';\r\n\r\nimport {\r\n  INoteItem,\r\n  INotesPageState,\r\n  ITodoFieldsContent,\r\n  ITodoItem,\r\n  ITodosPageState,\r\n} from '../interfaces';\r\nimport { TooltipTypes, Id } from '../types';\r\n\r\nexport const firebaseCreateUser = (values: any, showTooltip: any, setSubmitting: any) =>\r\n  firebase\r\n    .auth()\r\n    .createUserWithEmailAndPassword(values.email, values.password)\r\n    .then(() => localStorage.setItem('rememberMe', 'true'))\r\n    .catch((err) =>\r\n      showTooltip(TooltipTypes.Error, `Your account didn't be created: ${err.message}`)\r\n    )\r\n    .finally(() => setSubmitting(false));\r\n\r\nexport const firebaseSignIn = (values: any, showTooltip: any, setSubmitting: any) => {\r\n  if (values.rememberMe) {\r\n    localStorage.setItem('rememberMe', 'true');\r\n  } else {\r\n    localStorage.removeItem('rememberMe');\r\n  }\r\n\r\n  firebase\r\n    .auth()\r\n    .signInWithEmailAndPassword(values.email, values.password)\r\n    .catch((err) => showTooltip(TooltipTypes.Error, err.message))\r\n    .finally(() => setSubmitting(false));\r\n};\r\n\r\n// @todo Do i need in almost the same Google signIn/Up?\r\n// @todo  setSubmitting(false)\r\nexport const firebaseCreateUserWithGoogle = (showTooltip: any): void => {\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  firebase\r\n    .auth()\r\n    .signInWithPopup(provider)\r\n    .then(() => localStorage.setItem('rememberMe', 'true'))\r\n    .catch((error) => {\r\n      showTooltip(TooltipTypes.Error, error.message);\r\n    });\r\n};\r\n\r\n// @todo  setSubmitting(false)\r\nexport const firebaseGoogleSignIn = (showTooltip: any): void => {\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n  firebase\r\n    .auth()\r\n    .signInWithPopup(provider)\r\n    .catch((error) => {\r\n      showTooltip(TooltipTypes.Error, error.message);\r\n    });\r\n};\r\n\r\n// @todo  setSubmitting(false)\r\nexport const firebaseSignOut = (\r\n  showTooltip: (type: TooltipTypes, message: string) => void\r\n): Promise<void> =>\r\n  firebase\r\n    .auth()\r\n    .signOut()\r\n    .catch((error) => {\r\n      showTooltip(TooltipTypes.Error, error.message);\r\n    });\r\n\r\nexport const firebaseSendPasswordResetEmail = (\r\n  values: any,\r\n  actionCodeSettings: any,\r\n  showTooltip: any,\r\n  setSubmitting: any\r\n) =>\r\n  firebase\r\n    .auth()\r\n    .sendPasswordResetEmail(values.email, actionCodeSettings)\r\n    .then(() => {\r\n      showTooltip(TooltipTypes.Info, 'The email to reset your password was send');\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(TooltipTypes.Error, err.message);\r\n    })\r\n    .finally(() => setSubmitting(false));\r\n\r\n// Todos page --------------------------------------------\r\nexport const firebaseConnectDisconnectTodoList = (\r\n  type: 'connect' | 'disconnect',\r\n  currentUser: any,\r\n  showTooltip: any,\r\n  setTodoPageState: React.Dispatch<React.SetStateAction<ITodosPageState>>\r\n) => {\r\n  const getTodos = (elem: firebase.database.DataSnapshot) => {\r\n    setTodoPageState(({ isDataLoaded, ...restParams }) => ({\r\n      isDataLoaded: true,\r\n      ...restParams,\r\n      todosList: elem.child('list').val(),\r\n      lastTodoId: elem.child('lastTodoId').val(),\r\n    }));\r\n  };\r\n\r\n  const todosRef = firebase.database().ref('users/' + currentUser.uid + '/todos');\r\n  if (type === 'connect') {\r\n    try {\r\n      todosRef.on('value', getTodos);\r\n    } catch (error: any) {\r\n      showTooltip(TooltipTypes.Error, `Couldn't fetch the todo list: ${error.message}`);\r\n    }\r\n  } else {\r\n    todosRef.off('value', getTodos);\r\n  }\r\n};\r\n\r\nexport const firebaseDeleteTodo = (id: Id, currentUser: any, showTooltip: any): void => {\r\n  const todosRef = firebase.database().ref('users/' + currentUser.uid + '/todos/list');\r\n  todosRef\r\n    .once('value')\r\n    .then((snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        const childData = childSnapshot.val();\r\n        if (childData.id === id) {\r\n          const todoRef = firebase.database().ref('users/' + currentUser.uid + `/todos`);\r\n\r\n          // Если от=стался последний элемент, который мы сейчас удалим\r\n          if (Object.keys(snapshot.val()).length - 1 === 0) {\r\n            todoRef.update({\r\n              [`/list/${childSnapshot.key}`]: null,\r\n              '/lastTodoId': null,\r\n            });\r\n          } else {\r\n            firebase\r\n              .database()\r\n              .ref('users/' + currentUser.uid + `/todos/list/${childSnapshot.key}`)\r\n              .remove();\r\n          }\r\n\r\n          return true;\r\n        }\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(TooltipTypes.Error, `Removing the todo was failed: ${err.message}`);\r\n    });\r\n};\r\n\r\nexport const firebaseAddTodo = (currentUser: any, newItem: ITodoItem, showTooltip: any): void => {\r\n  const todosRef = firebase.database().ref(`users/${currentUser.uid}/todos`);\r\n  const newTodoKey = todosRef.child(`list`).push().key;\r\n\r\n  todosRef\r\n    .update({\r\n      [`list/${newTodoKey}`]: newItem,\r\n      lastTodoId: newItem.id,\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(TooltipTypes.Error, `Todo wasn't added: ${err.message}`);\r\n    });\r\n};\r\n\r\nexport const firebaseEditTodo = (\r\n  currentUser: any,\r\n  selectedItemId: Id | null,\r\n  fieldsContent: ITodoFieldsContent,\r\n  showTooltip: any\r\n) => {\r\n  const todosListRef = firebase.database().ref('users/' + currentUser.uid + '/todos/list');\r\n  todosListRef\r\n    .once('value')\r\n    .then((snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        const childData = childSnapshot.val();\r\n        if (childData.id === selectedItemId) {\r\n          todosListRef.child(`${childSnapshot.key}/fieldsContent`).set({ ...fieldsContent });\r\n\r\n          return true;\r\n        }\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(TooltipTypes.Error, `Editing the task was failed: ${err.message}`);\r\n    });\r\n};\r\n\r\nexport const firebaseGetTodoValue = (\r\n  currentUser: any,\r\n  selectedItemId: Id,\r\n  setInitialState: React.Dispatch<React.SetStateAction<ITodoFieldsContent>>,\r\n  showTooltip: any\r\n) => {\r\n  const todosRef = firebase.database().ref('users/' + currentUser.uid + '/todos/list');\r\n  todosRef\r\n    .once('value')\r\n    .then((snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        const childData = childSnapshot.val();\r\n        if (childData.id === selectedItemId) {\r\n          setInitialState({\r\n            ...childData.fieldsContent,\r\n          });\r\n\r\n          return true;\r\n        }\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(TooltipTypes.Error, `Couldn't take the data about this todo: ${err.message}`);\r\n    });\r\n};\r\n\r\n// Notes page --------------------------------------------\r\nexport const firebaseConnectDisconnectNoteList = (\r\n  type: 'connect' | 'disconnect',\r\n  currentUser: any,\r\n  showTooltip: any,\r\n  setNotesPageState: React.Dispatch<React.SetStateAction<INotesPageState>>\r\n) => {\r\n  const getNotes = (elem: firebase.database.DataSnapshot) => {\r\n    setNotesPageState(({ isDataLoaded, ...restParams }) => ({\r\n      isDataLoaded: true,\r\n      ...restParams,\r\n      noteList: elem.child('list').val(),\r\n      lastNoteId: elem.child('lastNoteId').val(),\r\n    }));\r\n  };\r\n\r\n  const notesRef = firebase.database().ref('users/' + currentUser.uid + '/notes');\r\n  if (type === 'connect') {\r\n    try {\r\n      notesRef.on('value', getNotes);\r\n    } catch (error: any) {\r\n      showTooltip(TooltipTypes.Error, `Couldn't fetch the note list: ${error.message}`);\r\n    }\r\n  } else {\r\n    notesRef.off('value', getNotes);\r\n  }\r\n};\r\n\r\n// @todo Стоит объединить с такой же функцией для удаления todo\r\nexport const firebaseDeleteNote = (id: Id, currentUser: any, showTooltip: any): void => {\r\n  const notesRef = firebase.database().ref('users/' + currentUser.uid + '/notes/list');\r\n  notesRef\r\n    .once('value')\r\n    .then((snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        const childData = childSnapshot.val();\r\n        if (childData.id === id) {\r\n          const noteRef = firebase.database().ref('users/' + currentUser.uid + `/notes`);\r\n\r\n          // Если остался последний элемент, который мы сейчас удалим\r\n          if (Object.keys(snapshot.val()).length - 1 === 0) {\r\n            noteRef.update({\r\n              [`/list/${childSnapshot.key}`]: null,\r\n              '/lastNoteId': null,\r\n            });\r\n          } else {\r\n            firebase\r\n              .database()\r\n              .ref('users/' + currentUser.uid + `/notes/list/${childSnapshot.key}`)\r\n              .remove();\r\n          }\r\n\r\n          return true;\r\n        }\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      showTooltip(TooltipTypes.Error, `Removing the note failed: ${error.message}`);\r\n    });\r\n};\r\n\r\nexport const firebaseGetNoteValue = (\r\n  currentUser: any,\r\n  selectedItemId: Id,\r\n  setInitialDescription: React.Dispatch<React.SetStateAction<string>>,\r\n  showTooltip: any\r\n) => {\r\n  const notesRef = firebase.database().ref('users/' + currentUser.uid + '/notes/list');\r\n  notesRef\r\n    .once('value')\r\n    .then((snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        const childData = childSnapshot.val();\r\n        if (childData.id === selectedItemId) {\r\n          setInitialDescription(childData.description);\r\n\r\n          return true;\r\n        }\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      showTooltip(TooltipTypes.Error, `Couldn't take the data about this note: ${error.message}`);\r\n    });\r\n};\r\n// @todo Стоит объединить с такой же функцией для добавления todo\r\nexport const firebaseAddNote = (currentUser: any, newNote: INoteItem, showTooltip: any): void => {\r\n  const notesRef = firebase.database().ref(`users/${currentUser.uid}/notes`);\r\n  const newNoteKey = notesRef.child(`list`).push().key;\r\n\r\n  notesRef\r\n    .update({\r\n      [`list/${newNoteKey}`]: newNote,\r\n      lastNoteId: newNote.id,\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(TooltipTypes.Error, `Note wasn't added: ${err.message}`);\r\n    });\r\n};\r\n\r\n// @todo Стоит объединить с такой же функцией для добавления todo\r\nexport const firebaseEditNote = (\r\n  currentUser: any,\r\n  selectedItemId: Id | null,\r\n  description: string,\r\n  showTooltip: any\r\n) => {\r\n  const noteListRef = firebase.database().ref('users/' + currentUser.uid + '/notes/list');\r\n  noteListRef\r\n    .once('value')\r\n    .then((snapshot) => {\r\n      snapshot.forEach((childSnapshot) => {\r\n        const childData = childSnapshot.val();\r\n        if (childData.id === selectedItemId) {\r\n          noteListRef.child(`${childSnapshot.key}/description`).set(description);\r\n          return true;\r\n        }\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      showTooltip(TooltipTypes.Error, `Editing the note was failed: ${error.message}`);\r\n    });\r\n};\r\n\r\n// Settings page --------------------------------------------\r\n\r\nexport const firebaseSendEmailForResetingPassword = (\r\n  userEmail: string,\r\n  actionCodeSettings: any,\r\n  showTooltip: any\r\n) =>\r\n  firebase\r\n    .auth()\r\n    .sendPasswordResetEmail(userEmail, actionCodeSettings)\r\n    .then(() => {\r\n      showTooltip(TooltipTypes.Info, 'The email for reseting your password was send');\r\n    })\r\n    .catch((err) => {\r\n      showTooltip(\r\n        TooltipTypes.Error,\r\n        `Email for reseting your password didn't send ${err.message}`\r\n      );\r\n    });\r\n\r\nexport const firebaseConfirmUserCredentials = (\r\n  user: any,\r\n  setIsFirstModal: any,\r\n  showTooltip: any,\r\n  values: any,\r\n  setSubmitting: any\r\n): void => {\r\n  const { email, password } = values;\r\n\r\n  const credential = firebase.auth.EmailAuthProvider.credential(email, password);\r\n\r\n  user\r\n    .reauthenticateWithCredential(credential)\r\n    .then(() => {\r\n      setIsFirstModal(false);\r\n    })\r\n    .catch((error: any) => {\r\n      showTooltip(TooltipTypes.Error, `Reauth didn't pass: ${error.message}`);\r\n      setSubmitting(false);\r\n    });\r\n};\r\n\r\nexport const firebaseSetNewUsersEmail = (\r\n  user: any,\r\n  actionCodeSettings: any,\r\n  showTooltip: any,\r\n  onToggleModal: any,\r\n  values: any,\r\n  setSubmitting: any\r\n): void => {\r\n  user\r\n    .verifyBeforeUpdateEmail(values.newEmail, actionCodeSettings)\r\n    .then(() => {\r\n      showTooltip(\r\n        TooltipTypes.Info,\r\n        'Check your new email and confirm it to finish the change the email'\r\n      );\r\n      onToggleModal();\r\n    })\r\n    .catch(function (err: any) {\r\n      showTooltip(TooltipTypes.Error, `Your email didn't update: ${err.message}`);\r\n      setSubmitting(false);\r\n    });\r\n};\r\n\r\nexport const firebaseSetNewUsersPassword = (\r\n  user: any,\r\n  showTooltip: any,\r\n  onToggleModal: any,\r\n  values: any,\r\n  setSubmitting: any\r\n): void => {\r\n  // @todo Вылазит предупреждение от гугл, что в результате утечки даннных, пароль оказался раскрыт. Скорее всего связано с отсутствием шифрования с моей стороны\r\n  user\r\n    .updatePassword(values.newPassword)\r\n    .then(() => {\r\n      showTooltip(TooltipTypes.Success, 'Your password was successfully updated!');\r\n      onToggleModal();\r\n    })\r\n    .catch((err: any) => {\r\n      showTooltip(TooltipTypes.Error, `Your password didn't be update: ${err.message}`);\r\n      setSubmitting(false);\r\n    });\r\n};\r\n\r\nexport const firebaseDeleteUserAccount = (\r\n  user: any,\r\n  showTooltip: any,\r\n  setSubmitting: any\r\n): void => {\r\n  user.delete().catch((err: any) => {\r\n    showTooltip(TooltipTypes.Error, `Your account didn't be deleted: ${err.message}`);\r\n    setSubmitting(false);\r\n  });\r\n};\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport firebase from 'firebase/app';\r\n\r\nimport { useTooltipContext } from './index';\r\nimport { TooltipTypes } from '../types';\r\nimport { firebaseSignOut } from '../services/firebase-service';\r\n\r\ninterface AppContextProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\n// @todo По идее мне не нужно указывать тип и аргумент. Нужно посмотреть, как сделать нормально\r\nconst AppContext = React.createContext<any>({});\r\n\r\nexport const useAppContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\n// @todo Не уверен, что корректно давать контексту тип React.FC\r\nexport const AppProvider: React.FC<AppContextProps> = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [currentUser, setCurrentUser] = useState(false);\r\n  const [isUserGet, setUserGet] = useState(false);\r\n\r\n  const actionCodeSettings = {\r\n    url: 'https://vladmokrousov.github.io/doit/build/#/sign-in',\r\n    // url: 'http://localhost:3000/sign-in',\r\n  };\r\n\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        if (!user.emailVerified) {\r\n          user.sendEmailVerification(actionCodeSettings).catch((err) => {\r\n            showTooltip(TooltipTypes.Error, `The email didn't send. ${err.message}`);\r\n          });\r\n        }\r\n        if (!localStorage.getItem('rememberMe')) {\r\n          const lastSignInTime = new Date(user.metadata.lastSignInTime!);\r\n          const lastSignInTimeTimeStamp = Math.round(lastSignInTime.getTime() / 1000);\r\n          const yesterdayTimeStamp = Math.round(new Date().getTime() / 1000) - 24 * 3600;\r\n\r\n          if (lastSignInTimeTimeStamp < yesterdayTimeStamp) {\r\n            firebaseSignOut(showTooltip);\r\n          } else {\r\n            onLogIn(user);\r\n          }\r\n        } else {\r\n          onLogIn(user);\r\n        }\r\n      } else {\r\n        onLogOut();\r\n      }\r\n      setUserGet(true);\r\n    });\r\n  }, []);\r\n\r\n  const onLogIn = (user: any): void => {\r\n    setIsLoggedIn(true);\r\n    setCurrentUser(user);\r\n  };\r\n  const onLogOut = (): void => {\r\n    setIsLoggedIn(false);\r\n    setCurrentUser(false);\r\n  };\r\n\r\n  return isUserGet ? (\r\n    <AppContext.Provider value={{ isLoggedIn, currentUser, actionCodeSettings }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  ) : null;\r\n};\r\n","import React, { useState, useContext } from 'react';\r\nimport { TooltipTypes } from '../types';\r\n\r\ninterface TooltipContextProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\n//По идее мне не нужно указывать тип и аргумент. Нужно посмотреть, как сделать нормально\r\nconst TooltipContext = React.createContext<any>({});\r\n\r\nexport const useTooltipContext = () => {\r\n  return useContext(TooltipContext);\r\n};\r\n\r\n//Не уверен, что корректно давать контексту тип React.FC\r\nexport const TooltipProvider: React.FC<TooltipContextProps> = ({ children }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [type, setType] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  const showTooltip = (type: TooltipTypes, message: string): void => {\r\n    setType(type);\r\n    setMessage(message);\r\n    setIsOpen(true);\r\n  };\r\n  const hideTooltip = (): void => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <TooltipContext.Provider value={{ isOpen, type, message, showTooltip, hideTooltip }}>\r\n      {children}\r\n    </TooltipContext.Provider>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/delete-icon.13e1f8ab.svg\";","import TodoItemContent from \"./todo-item-content\";\r\nexport default TodoItemContent;\r\n","import React from 'react';\r\n\r\nimport { ITodoFieldsContent } from 'interfaces';\r\nimport { Id } from 'types';\r\nimport { getFormattedDate } from 'helpers';\r\nimport { useAppContext, useTooltipContext } from 'context';\r\nimport { firebaseDeleteTodo } from 'services/firebase-service';\r\nimport deleteIcon from 'assets/img/delete-icon.svg';\r\n\r\nimport './todo-item-content.css';\r\n\r\ninterface TodoItemContentProps {\r\n  fieldsContent: ITodoFieldsContent;\r\n  id: Id;\r\n}\r\n\r\nconst TodoItemContent: React.FC<TodoItemContentProps> = ({ fieldsContent, id }) => {\r\n  const { description, status, priority, endDatePlan, endDateActual } = fieldsContent;\r\n\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const classNames = 'table__item-cell';\r\n\r\n  return (\r\n    <>\r\n      <td className={classNames}>\r\n        <span className={`${classNames}--description`}>{description}</span>\r\n      </td>\r\n      <td className={classNames}>\r\n        <span className={`${classNames}--status`}>{status}</span>\r\n      </td>\r\n      <td className={classNames}>\r\n        <span className={`${classNames}--priority`}>{priority}</span>\r\n      </td>\r\n      <td className={classNames}>\r\n        <span className={`${classNames}--datePlan`}>\r\n          {getFormattedDate(new Date(endDatePlan), 'task')}\r\n        </span>\r\n      </td>\r\n      <td className={classNames}>\r\n        <span className={`${classNames}--actualDate`}>\r\n          {endDateActual === '-'\r\n            ? endDateActual\r\n            : getFormattedDate(new Date(endDateActual), 'task')}\r\n        </span>\r\n      </td>\r\n      <td className={classNames}>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn table__btn table__btn--del\"\r\n          onClick={() => firebaseDeleteTodo(id, currentUser, showTooltip)}\r\n        >\r\n          <img src={deleteIcon} className=\"delete-icon\" width=\"24\" height=\"24\" alt=\"Delete todo\" />\r\n        </button>\r\n      </td>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoItemContent;\r\n","interface ITableHeaderConfig {\r\n  text: string;\r\n  class: string;\r\n}\r\n\r\nconst classTemplate = 'table__header--';\r\nconst tableHeadersConfig: ITableHeaderConfig[] = [\r\n  {\r\n    text: 'Description',\r\n    class: `${classTemplate}description`,\r\n  },\r\n  {\r\n    text: 'Status',\r\n    class: `${classTemplate}status`,\r\n  },\r\n  {\r\n    text: 'Priority',\r\n    class: `${classTemplate}priority`,\r\n  },\r\n  {\r\n    text: 'End date plan',\r\n    class: `${classTemplate}planDate`,\r\n  },\r\n  {\r\n    text: 'End date actual',\r\n    class: `${classTemplate}actualDate`,\r\n  },\r\n  {\r\n    text: 'Action',\r\n    class: `${classTemplate}action`,\r\n  },\r\n];\r\n\r\nexport default tableHeadersConfig;\r\n","import TodosTable from './todos-table';\r\nexport default TodosTable;\r\n","import React, { useMemo } from 'react';\r\n\r\nimport TodoItemContent from '../todo-item-content';\r\nimport tableHeadersConfig from './tableHeaderConfig';\r\nimport { ITodoItem, ITodosPageState } from 'interfaces';\r\nimport { Id, ToggleModalTypes } from 'types';\r\n\r\nimport './todos-table.css';\r\n\r\ninterface TodosTableProps {\r\n  todosPageState: ITodosPageState;\r\n  toggleModal: (type?: ToggleModalTypes) => void;\r\n  todosPageSetState: React.Dispatch<React.SetStateAction<ITodosPageState>>;\r\n}\r\n\r\nconst TodosTable: React.FC<TodosTableProps> = ({\r\n  todosPageState,\r\n  toggleModal,\r\n  todosPageSetState,\r\n}) => {\r\n  const tableHeaders: JSX.Element[] = tableHeadersConfig.map((item) => (\r\n    <th key={item.text} className={`table__header ${item.class}`} scope=\"col\">\r\n      {item.text}\r\n    </th>\r\n  ));\r\n\r\n  const { todosList, term, filter } = todosPageState;\r\n\r\n  const searchTodos = (items: ITodoItem[], term: string): ITodoItem[] =>\r\n    term.length === 0\r\n      ? items\r\n      : items.filter(\r\n          (item) => item.fieldsContent.description.toLowerCase().indexOf(term.toLowerCase()) > -1\r\n        );\r\n\r\n  const filterTodos = (items: ITodoItem[], filter: string): ITodoItem[] => {\r\n    switch (filter) {\r\n      case 'all':\r\n        return items;\r\n      case 'new':\r\n        return items.filter((item) => item.fieldsContent.status === 'New');\r\n      case 'inProgress':\r\n        return items.filter((item) => item.fieldsContent.status === 'In progress');\r\n      case 'done':\r\n        return items.filter((item) => item.fieldsContent.status === 'Done');\r\n\r\n      default:\r\n        return items;\r\n    }\r\n  };\r\n\r\n  // @todo Опять не учтена работа с большим количеством элементов. Reverse - не выход\r\n  let visibleTodos: ITodoItem[] | undefined = useMemo(\r\n    () =>\r\n      todosList\r\n        ? filterTodos(searchTodos(Object.values(todosList), term), filter).reverse()\r\n        : undefined,\r\n    [todosList, term, filter]\r\n  );\r\n  let tableRows: JSX.Element[] | undefined;\r\n\r\n  if (visibleTodos) {\r\n    const selectItem = (id: Id): void => {\r\n      todosPageSetState((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          selectedItemId: id,\r\n        };\r\n      });\r\n\r\n      toggleModal();\r\n    };\r\n\r\n    tableRows = visibleTodos.map((item: ITodoItem): JSX.Element => {\r\n      const { id, fieldsContent } = item;\r\n\r\n      const importantClass = fieldsContent.priority === 'High' ? 'table__item--important' : '';\r\n      const doneClass = fieldsContent.status === 'Done' ? 'table__item--done' : '';\r\n      const expiredClass =\r\n        fieldsContent.endDateActual !== '-'\r\n          ? fieldsContent.endDateActual < fieldsContent.endDatePlan\r\n            ? ''\r\n            : 'table__item--expired'\r\n          : new Date().toISOString() > fieldsContent.endDatePlan\r\n          ? 'table__item--expired'\r\n          : '';\r\n\r\n      return (\r\n        <tr\r\n          className={`table__item ${doneClass} ${importantClass} ${expiredClass}`}\r\n          key={id}\r\n          onDoubleClick={() => selectItem(id)}\r\n        >\r\n          <TodoItemContent fieldsContent={fieldsContent} id={id} />\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      <table className=\"table table--todo\">\r\n        <thead>\r\n          <tr className=\"table__headers table--todo__headers\">{tableHeaders}</tr>\r\n        </thead>\r\n        <tbody>{visibleTodos && tableRows}</tbody>\r\n      </table>\r\n      {!visibleTodos && <span>You can sleep soundly</span>}\r\n    </>\r\n  );\r\n};\r\nexport default TodosTable;\r\n","import Portal from \"./portal\";\r\nexport default Portal;\r\n","import React, { ReactNode, useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nimport './portal.css';\r\n\r\ninterface PortalProps {\r\n  children: ReactNode;\r\n}\r\n\r\nconst Portal: React.FC<PortalProps> = ({ children }) => {\r\n  const el: HTMLDivElement = document.createElement('div');\r\n  el.classList.add('overlay');\r\n\r\n  useEffect(() => {\r\n    document.body.style.overflow = 'hidden';\r\n    // document.querySelector(\"#modal\").append(el);\r\n\r\n    const modalHtml: HTMLDivElement | null = document.querySelector('#modal');\r\n    if (modalHtml) {\r\n      modalHtml.append(el);\r\n    }\r\n\r\n    return () => {\r\n      el.remove();\r\n      document.body.style.overflow = 'visible';\r\n    };\r\n  }, [children]);\r\n\r\n  return createPortal(children, el);\r\n};\r\n\r\nexport default Portal;\r\n","import React from 'react';\r\nimport { Field, ErrorMessage } from 'formik';\r\n\r\nimport { ICustomInput } from '../../interfaces';\r\nimport { clsx } from 'helpers';\r\n\r\nimport './customInput.css';\r\n\r\nconst CustomInput: React.FC<ICustomInput> = ({\r\n  label,\r\n  labelClass,\r\n  isRequired,\r\n  fieldClass,\r\n  type,\r\n  fieldName,\r\n  placeholder,\r\n  isError,\r\n  isTouched,\r\n  as,\r\n  children,\r\n}) => (\r\n  <>\r\n    <label className={clsx([`label`, labelClass])} htmlFor={fieldName}>\r\n      {label}\r\n      {isRequired && <sup className=\"label-required\">*</sup>}:\r\n    </label>\r\n    <div className=\"field-with-error-wrapper\">\r\n      <Field\r\n        className={clsx([`field`, fieldClass, isError && isTouched && `field--error`])}\r\n        id={fieldName}\r\n        type={type}\r\n        name={fieldName}\r\n        placeholder={placeholder}\r\n        as={as}\r\n      >\r\n        {children}\r\n      </Field>\r\n\r\n      <ErrorMessage name={fieldName} component=\"span\" className=\"error-message\" />\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default CustomInput;\r\n","import TodosModalContent from './todos-modal-content';\r\nexport default TodosModalContent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport { useAppContext, useTooltipContext } from 'context';\r\nimport { ITodoFieldsContent, ITodoItem, ITodosPageState } from 'interfaces';\r\nimport { Id, ToggleModalTypes } from 'types';\r\nimport { getFormattedDate, getFormattedTimeOffset } from 'helpers';\r\nimport { todoFormValidationSchema } from 'validationSchemas';\r\nimport CustomInput from 'components/customInput';\r\nimport { firebaseAddTodo, firebaseEditTodo, firebaseGetTodoValue } from 'services/firebase-service';\r\n\r\nimport './todos-modal-content.css';\r\n\r\ninterface IPartOfFormikBag {\r\n  setSubmitting: (isSubmitting: boolean) => void;\r\n}\r\n\r\ninterface ITodosModalProps {\r\n  selectedItemId: Id | null;\r\n  newItemId: Id;\r\n  onToggleModal: (type?: ToggleModalTypes) => void;\r\n  setState: React.Dispatch<React.SetStateAction<ITodosPageState>>;\r\n}\r\n\r\nconst TodosModalContent: React.FC<ITodosModalProps> = ({\r\n  selectedItemId,\r\n  newItemId,\r\n  onToggleModal,\r\n  setState,\r\n}) => {\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [initialState, setInitialState] = useState<ITodoFieldsContent>({\r\n    description: '',\r\n    priority: 'Low',\r\n    status: 'New',\r\n    endDatePlan: '',\r\n    endDateActual: '-',\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedItemId) {\r\n      firebaseGetTodoValue(currentUser, selectedItemId, setInitialState, showTooltip);\r\n    }\r\n  }, []);\r\n\r\n  const createCustomInput = (\r\n    label: string,\r\n    isRequired: boolean,\r\n    type: string | undefined,\r\n    fieldName: string,\r\n    placeholder: string | undefined,\r\n    errors: any,\r\n    touched: any,\r\n    as: any,\r\n    children?: React.ReactNode\r\n  ) => (\r\n    <div className=\"todos-form__field-wrapper\">\r\n      <CustomInput\r\n        label={label}\r\n        labelClass=\"todos-form__label\"\r\n        isRequired={isRequired}\r\n        fieldClass=\"todos-form__field\"\r\n        type={type}\r\n        fieldName={fieldName}\r\n        placeholder={placeholder}\r\n        isError={fieldName in errors}\r\n        isTouched={fieldName in touched}\r\n        as={as}\r\n        children={children}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  const addTodo = (fieldsContent: ITodoFieldsContent): void => {\r\n    const newItem: ITodoItem = {\r\n      fieldsContent,\r\n      id: newItemId,\r\n    };\r\n\r\n    firebaseAddTodo(currentUser, newItem, showTooltip);\r\n  };\r\n\r\n  const editTodo = (fieldsContent: ITodoFieldsContent): void => {\r\n    firebaseEditTodo(currentUser, selectedItemId, fieldsContent, showTooltip);\r\n    // @todo Сетать нужно когда взаимодействие с firebase успешно завершится\r\n    setState(({ selectedItemId, ...restParams }) => ({\r\n      selectedItemId: null,\r\n      ...restParams,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (\r\n    values: Omit<ITodoFieldsContent, 'endDateActual'>,\r\n    { setSubmitting }: IPartOfFormikBag\r\n  ) => {\r\n    // Пример даты, которая хранится в values.endDatePlan 2021-09-10\r\n    // Формат ниже нужен, чтобы задача считалась просроченной только тогда, когда у нас наступит 00:00 дня, следующего за тем, который мы обозначили в endDatePlan\r\n    const endDatePlan = new Date(\r\n      `${values.endDatePlan}T23:59:59.000${getFormattedTimeOffset()}:00`\r\n    ).toISOString();\r\n\r\n    const endDateActual =\r\n      values.status === 'Done' && initialState.endDateActual === '-'\r\n        ? new Date().toISOString()\r\n        : initialState.endDateActual;\r\n\r\n    const todo = {\r\n      ...values,\r\n      endDatePlan,\r\n      endDateActual,\r\n    };\r\n    if (selectedItemId) {\r\n      editTodo(todo);\r\n    } else {\r\n      addTodo(todo);\r\n    }\r\n\r\n    // @todo По идее, нужно выполнять действия снизу только когда взаимодействие с firebase из addTodo и editTodo успешно завершится\r\n    // Пока не сделаю todo выше, setSubmitting не нужен\r\n    // setSubmitting(false);\r\n\r\n    onToggleModal();\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        description: initialState.description,\r\n        priority: initialState.priority,\r\n        status: initialState.status,\r\n        endDatePlan: initialState.endDatePlan\r\n          ? getFormattedDate(new Date(initialState.endDatePlan), 'calendar')\r\n          : initialState.endDatePlan,\r\n      }}\r\n      enableReinitialize={true}\r\n      validationSchema={todoFormValidationSchema}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {({ isSubmitting, errors, touched }) => (\r\n        <Form className=\"todos-form\">\r\n          {createCustomInput(\r\n            `Description`,\r\n            true,\r\n            `text`,\r\n            `description`,\r\n            `What must be to do?`,\r\n            errors,\r\n            touched,\r\n            undefined\r\n          )}\r\n          <div className=\"todos-form__fields-group-wrapper\">\r\n            {createCustomInput(\r\n              `Priority`,\r\n              true,\r\n              undefined,\r\n              `priority`,\r\n              undefined,\r\n              errors,\r\n              touched,\r\n              `select`,\r\n              [\r\n                <option key=\"Low\" value=\"Low\">\r\n                  Low\r\n                </option>,\r\n                <option key=\"Medium\" value=\"Medium\">\r\n                  Medium\r\n                </option>,\r\n                <option key=\"High\" value=\"High\">\r\n                  High\r\n                </option>,\r\n              ]\r\n            )}\r\n            {createCustomInput(\r\n              `Status`,\r\n              true,\r\n              undefined,\r\n              `status`,\r\n              undefined,\r\n              errors,\r\n              touched,\r\n              `select`,\r\n              [\r\n                <option key=\"New\" value=\"New\">\r\n                  New\r\n                </option>,\r\n                <option key=\"In progress\" value=\"In progress\">\r\n                  In progress\r\n                </option>,\r\n                <option key=\"Done\" value=\"Done\">\r\n                  Done\r\n                </option>,\r\n              ]\r\n            )}\r\n          </div>\r\n\r\n          {/* @todo Эта проверка была раньше на календаре. Нужно перенести ее на кастомный календарь\r\n          min={getFormattedDate(new Date(), 'calendar')}\r\n           */}\r\n          {createCustomInput(\r\n            `End Date`,\r\n            true,\r\n            `date`,\r\n            `endDatePlan`,\r\n            undefined,\r\n            errors,\r\n            touched,\r\n            undefined\r\n          )}\r\n\r\n          <button className=\"todos-form__submit-btn\" type=\"submit\" disabled={isSubmitting}>\r\n            Save\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default TodosModalContent;\r\n","import SearchPanel from \"./search-panel\";\r\nexport default SearchPanel;\r\n","import React, { useState } from 'react';\r\n\r\nimport { ITodosPageState } from '../../../../interfaces';\r\n\r\nimport './search-panel.css';\r\n\r\ninterface SearchPanelProps {\r\n  setState: React.Dispatch<React.SetStateAction<ITodosPageState>>;\r\n}\r\n\r\nconst SearchPanel: React.FC<SearchPanelProps> = ({ setState }) => {\r\n  const [term, setTerm] = useState('');\r\n\r\n  const onSearchReplace = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const changedTerm = evt.target.value;\r\n    setTerm(changedTerm);\r\n\r\n    setState((prevState) => ({ ...prevState, term: changedTerm }));\r\n  };\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Search by description\"\r\n      className=\"search-input\"\r\n      value={term}\r\n      onChange={onSearchReplace}\r\n    />\r\n  );\r\n};\r\nexport default SearchPanel;\r\n","import StatusFilter from \"./status-filter\";\r\nexport default StatusFilter;\r\n","import React from 'react';\r\n\r\nimport { ITodosList, ITodosPageState } from '../../../../interfaces';\r\n\r\nimport './status-filter.css';\r\n\r\ninterface IBtnProps {\r\n  name: string;\r\n  label: string;\r\n  todosCount?: number;\r\n}\r\n\r\ninterface StatusFilterProps {\r\n  todosList: ITodosList;\r\n  filter: string;\r\n  setState: React.Dispatch<React.SetStateAction<ITodosPageState>>;\r\n}\r\n\r\nconst StatusFilter: React.FC<StatusFilterProps> = ({ todosList, filter, setState }) => {\r\n  // @todo пагинация и большое количество items не предусмотрены\r\n  const todos = Object.values(todosList);\r\n  const getTodosLengthWithStatusFilter = (status: 'New' | 'In progress' | 'Done') =>\r\n    todos.filter((item) => item.fieldsContent.status === status).length;\r\n\r\n  const btnProps: IBtnProps[] = [\r\n    {\r\n      name: 'inProgress',\r\n      label: 'In progress',\r\n      todosCount: getTodosLengthWithStatusFilter('In progress'),\r\n    },\r\n    { name: 'new', label: 'New', todosCount: getTodosLengthWithStatusFilter('New') },\r\n    { name: 'done', label: 'Done', todosCount: getTodosLengthWithStatusFilter('Done') },\r\n    { name: 'all', label: 'All', todosCount: todos.length },\r\n  ];\r\n\r\n  const onFilterChange = (filter: string): void =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      filter,\r\n    }));\r\n\r\n  const buttons: JSX.Element[] = btnProps.map(({ name, label, todosCount }) => {\r\n    const isActive = filter === name;\r\n    const clazz = isActive ? 'status-filter__btn--active' : '';\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        className={`status-filter__btn btn ${clazz}`}\r\n        key={name}\r\n        onClick={() => onFilterChange(name)}\r\n      >\r\n        {`${label} - ${todosCount}`}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return <div className=\"status-filter\">{buttons}</div>;\r\n};\r\n\r\nexport default StatusFilter;\r\n","import React from 'react';\r\n\r\nimport { ITodosList, ITodosPageState } from 'interfaces';\r\nimport SearchPanel from '../search-panel';\r\nimport StatusFilter from '../status-filter';\r\n\r\nimport './todos-control-panel.css';\r\n\r\ninterface TodosControlPanelProps {\r\n  todosList: ITodosList | null;\r\n  filter: string;\r\n  onToggleModal: (evt?: any) => void;\r\n  setState: React.Dispatch<React.SetStateAction<ITodosPageState>>;\r\n}\r\n\r\nconst TodosControlPanel: React.FC<TodosControlPanelProps> = ({\r\n  todosList,\r\n  filter,\r\n  onToggleModal,\r\n  setState,\r\n}) => (\r\n  <div className={`todos-page__control-panel ${!todosList ? 'flex-wrapper' : ``}`}>\r\n    <button className=\"todos-page__add-task-btn\" onClick={onToggleModal}>\r\n      Add task\r\n    </button>\r\n    {todosList && (\r\n      <>\r\n        <SearchPanel setState={setState} />\r\n        <StatusFilter todosList={todosList} filter={filter} setState={setState} />\r\n      </>\r\n    )}\r\n  </div>\r\n);\r\nexport default TodosControlPanel;\r\n","import Modal from './modal';\r\nexport default Modal;\r\n","import React, { ReactNode } from 'react';\r\nimport './modal.css';\r\n\r\ninterface IModal {\r\n  classes: string;\r\n  title: string;\r\n  onCloseBtnClick?: (evt: any) => void;\r\n  children: ReactNode;\r\n}\r\n\r\nconst Modal: React.FC<IModal> = ({ classes, title, onCloseBtnClick, children }) => (\r\n  <section className={`modal ${classes}`}>\r\n    <h2 className=\"modal__title\">{title}</h2>\r\n    {onCloseBtnClick && (\r\n      <button className=\"modal__close\" onClick={onCloseBtnClick}>\r\n        <span className=\"visually-hidden\">Закрыть</span>\r\n      </button>\r\n    )}\r\n    {children}\r\n  </section>\r\n);\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport PageTitle from 'components/page-title';\r\nimport TodosTable from './components/todos-table';\r\nimport Portal from 'components/portal';\r\nimport TodosModalContent from './components/todos-modal-content';\r\nimport TodosControlPanel from './components/todos-control-panel';\r\nimport Modal from 'components/modal';\r\nimport { useAppContext, useTooltipContext } from 'context';\r\nimport { ITodosPageState } from 'interfaces';\r\nimport { Id, ToggleModalTypes } from 'types';\r\nimport { firebaseConnectDisconnectTodoList } from 'services/firebase-service';\r\n\r\nconst TodosPage: React.FC = () => {\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [state, setState] = useState<ITodosPageState>({\r\n    term: '',\r\n    filter: 'inProgress',\r\n    showModal: false,\r\n    selectedItemId: null,\r\n    isDataLoaded: false,\r\n    todosList: null,\r\n    lastTodoId: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    firebaseConnectDisconnectTodoList('connect', currentUser, showTooltip, setState);\r\n\r\n    return () => {\r\n      firebaseConnectDisconnectTodoList('disconnect', currentUser, showTooltip, setState);\r\n    };\r\n  }, []);\r\n\r\n  let newItemId: Id = state.lastTodoId ? state.lastTodoId + 1 : 100;\r\n\r\n  const toggleModal = (type: ToggleModalTypes = ToggleModalTypes.Default): void => {\r\n    setState(({ showModal, selectedItemId, ...restParams }) => ({\r\n      ...restParams,\r\n      showModal: !showModal,\r\n      selectedItemId: type === ToggleModalTypes.WithSelectedItemClearing ? null : selectedItemId,\r\n    }));\r\n  };\r\n\r\n  const { todosList, filter, showModal, selectedItemId } = state;\r\n\r\n  return (\r\n    <main className=\"todos-page\">\r\n      <div className=\"container\">\r\n        <PageTitle text=\"Todo List\" />\r\n        {state.isDataLoaded ? (\r\n          <>\r\n            <TodosControlPanel\r\n              todosList={todosList}\r\n              filter={filter}\r\n              onToggleModal={() => toggleModal()}\r\n              setState={setState}\r\n            />\r\n\r\n            <TodosTable\r\n              todosPageState={state}\r\n              toggleModal={toggleModal}\r\n              todosPageSetState={setState}\r\n            />\r\n\r\n            {showModal && (\r\n              <Portal>\r\n                <Modal\r\n                  classes=\"modal--todos\"\r\n                  title={selectedItemId ? 'Edit task' : 'Add task'}\r\n                  onCloseBtnClick={() => toggleModal(ToggleModalTypes.WithSelectedItemClearing)}\r\n                >\r\n                  <TodosModalContent\r\n                    newItemId={newItemId}\r\n                    onToggleModal={toggleModal}\r\n                    selectedItemId={selectedItemId}\r\n                    setState={setState}\r\n                  />\r\n                </Modal>\r\n              </Portal>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <span>Loading...</span>\r\n        )}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default TodosPage;\r\n","import NoteItemContent from './note-item-content';\r\nexport default NoteItemContent;\r\n","import React from 'react';\r\n\r\nimport { firebaseDeleteNote } from 'services/firebase-service';\r\nimport { getFormattedDate } from 'helpers';\r\nimport { useAppContext, useTooltipContext } from 'context';\r\nimport deleteIcon from 'assets/img/delete-icon.svg';\r\nimport { INoteItem } from 'interfaces';\r\n\r\nimport './note-item-content.css';\r\n\r\ninterface NoteItemContentProps {\r\n  note: INoteItem;\r\n}\r\n\r\nconst NoteItemContent: React.FC<NoteItemContentProps> = ({ note }) => {\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"note__header\">\r\n        <span>{getFormattedDate(new Date(note.creationDate), 'note')}</span>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn note__btn note__btn--del\"\r\n          onClick={() => firebaseDeleteNote(note.id, currentUser, showTooltip)}\r\n        >\r\n          <img src={deleteIcon} className=\"delete-icon\" width=\"24\" height=\"24\" alt=\"Delete note\" />\r\n        </button>\r\n      </div>\r\n      <p className=\"note__description\">{note.description}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoteItemContent;\r\n","import NotesList from './notes-list';\r\nexport default NotesList;\r\n","import React, { useMemo } from 'react';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\n\r\nimport NoteItemContent from '../note-item-content';\r\nimport { INoteItem, INoteList, INotesPageState } from 'interfaces';\r\nimport { Id, ToggleModalTypes } from 'types';\r\nimport './notes-list.css';\r\n\r\ninterface NotesListProps {\r\n  notes: INoteList | null;\r\n  notesPageSetState: React.Dispatch<React.SetStateAction<INotesPageState>>;\r\n  toggleModal: (type?: ToggleModalTypes) => void;\r\n}\r\n\r\nconst NotesList: React.FC<NotesListProps> = ({ notes, notesPageSetState, toggleModal }) => {\r\n  // @todo Опять не учтена работа с большим количеством элементов. Reverse - не выход\r\n  let visibleNotes: INoteItem[] | undefined = useMemo(() => notes ? Object.values(notes).reverse() : undefined, [notes]);\r\n  let noteList: JSX.Element[] | undefined;\r\n\r\n  if (visibleNotes) {\r\n    const selectItem = (id: Id): void => {\r\n      notesPageSetState((prevState) => ({\r\n        ...prevState,\r\n        selectedItemId: id,\r\n      }));\r\n\r\n      toggleModal();\r\n    };\r\n\r\n    noteList = visibleNotes.map((item): JSX.Element => {\r\n      const { id } = item;\r\n\r\n      return (\r\n        <CSSTransition key={id} timeout={500} classNames=\"list__item\">\r\n          <li className=\"list__item\" onDoubleClick={() => selectItem(id)}>\r\n            <NoteItemContent note={item} />\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"list list--notes\">\r\n        <TransitionGroup component={null}>{noteList}</TransitionGroup>\r\n      </ul>\r\n      {!visibleNotes && <span>You can sleep soundly</span>}\r\n    </>\r\n  );\r\n};\r\nexport default NotesList;\r\n","import NotesModalContent from './notes-modal-content';\r\nexport default NotesModalContent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Formik } from 'formik';\r\n\r\nimport CustomInput from 'components/customInput';\r\nimport { useAppContext, useTooltipContext } from 'context';\r\nimport { firebaseAddNote, firebaseEditNote, firebaseGetNoteValue } from 'services/firebase-service';\r\nimport { INoteItem, INotesPageState } from 'interfaces';\r\nimport { Id, ToggleModalTypes } from 'types';\r\nimport { noteFormValidationSchema } from 'validationSchemas';\r\n\r\nimport './notes-modal-content.css';\r\n\r\ninterface IPartOfFormikBag {\r\n  setSubmitting: (isSubmitting: boolean) => void;\r\n}\r\n\r\ninterface NotesModalProps {\r\n  selectedItemId: Id | null;\r\n  newItemId: Id;\r\n  onToggleModal: (type?: ToggleModalTypes) => void;\r\n  setNotesPageState: React.Dispatch<React.SetStateAction<INotesPageState>>;\r\n}\r\n\r\nconst NotesModalContent: React.FC<NotesModalProps> = ({\r\n  selectedItemId,\r\n  newItemId,\r\n  onToggleModal,\r\n  setNotesPageState,\r\n}) => {\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n  const [initialDescription, setInitialDescription] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (selectedItemId) {\r\n      firebaseGetNoteValue(currentUser, selectedItemId, setInitialDescription, showTooltip);\r\n    }\r\n  }, []);\r\n\r\n  const addNote = (description: string): void => {\r\n    const newNote: INoteItem = {\r\n      description,\r\n      creationDate: new Date().toISOString(),\r\n      id: newItemId,\r\n    };\r\n\r\n    firebaseAddNote(currentUser, newNote, showTooltip);\r\n  };\r\n\r\n  const editNote = (description: string): void => {\r\n    firebaseEditNote(currentUser, selectedItemId, description, showTooltip);\r\n    // @todo Сетать нужно когда взаимодействие с firebase успешно завершится\r\n    setNotesPageState(({ selectedItemId, ...restParams }) => ({\r\n      selectedItemId: null,\r\n      ...restParams,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (values: { description: string }, { setSubmitting }: IPartOfFormikBag) => {\r\n    if (selectedItemId) {\r\n      editNote(values.description);\r\n    } else {\r\n      addNote(values.description);\r\n    }\r\n\r\n    // @todo По идее, нужно выполнять действия снизу только когда взаимодействие с firebase из addNote и editNote успешно завершится\r\n    // Пока не сделаю todo выше, setSubmitting не нужен\r\n    // setSubmitting(false);\r\n\r\n    onToggleModal();\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        description: initialDescription,\r\n      }}\r\n      enableReinitialize={true}\r\n      validationSchema={noteFormValidationSchema}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {({ isSubmitting, errors, touched }) => (\r\n        <Form className=\"notes-form\">\r\n          <CustomInput\r\n            label={'Description'}\r\n            labelClass=\"notes-form__label\"\r\n            isRequired={true}\r\n            fieldClass=\"notes-form__field notes-form__field--description\"\r\n            type={undefined}\r\n            fieldName={'description'}\r\n            placeholder={'Type something :)'}\r\n            isError={'description' in errors}\r\n            isTouched={'description' in touched}\r\n            as={'textarea'}\r\n            children={undefined}\r\n          />\r\n\r\n          <button className=\"notes-form__submit-btn\" type=\"submit\" disabled={isSubmitting}>\r\n            Save\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default NotesModalContent;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport PageTitle from 'components/page-title';\r\nimport NotesList from './components/notes-list';\r\nimport Portal from 'components/portal';\r\nimport NotesModalContent from './components/notes-modal-content';\r\nimport Modal from 'components/modal';\r\nimport { useAppContext, useTooltipContext } from 'context';\r\nimport { INotesPageState } from 'interfaces';\r\nimport { Id, ToggleModalTypes } from 'types';\r\nimport { firebaseConnectDisconnectNoteList } from 'services/firebase-service';\r\n\r\nimport './index.css';\r\n\r\nconst NotesPage: React.FC = () => {\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n  const [state, setState] = useState<INotesPageState>({\r\n    showModal: false,\r\n    selectedItemId: null,\r\n    isDataLoaded: false,\r\n    noteList: null,\r\n    lastNoteId: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    firebaseConnectDisconnectNoteList('connect', currentUser, showTooltip, setState);\r\n\r\n    return () => {\r\n      firebaseConnectDisconnectNoteList('disconnect', currentUser, showTooltip, setState);\r\n    };\r\n  }, []);\r\n\r\n  // Заменить потом на uuid\r\n  let newItemId: Id = state.lastNoteId ? state.lastNoteId + 1 : 100;\r\n  const toggleModal = (type: ToggleModalTypes = ToggleModalTypes.Default): void => {\r\n    setState(({ showModal, selectedItemId, ...restParams }) => ({\r\n      ...restParams,\r\n      showModal: !showModal,\r\n      selectedItemId: type === ToggleModalTypes.WithSelectedItemClearing ? null : selectedItemId,\r\n    }));\r\n  };\r\n\r\n  const { noteList, showModal, selectedItemId } = state;\r\n\r\n  return (\r\n    <main className=\"notes-page\">\r\n      <div className=\"container\">\r\n        <PageTitle text=\"Notes\" />\r\n        {state.isDataLoaded ? (\r\n          <>\r\n            <button className=\"notes-page__add-note-btn\" onClick={() => toggleModal()}>\r\n              Add note\r\n            </button>\r\n            <NotesList notes={noteList} notesPageSetState={setState} toggleModal={toggleModal} />\r\n            {showModal && (\r\n              <Portal>\r\n                <Modal\r\n                  classes=\"modal--notes\"\r\n                  title={selectedItemId ? 'Edit note' : 'Add note'}\r\n                  onCloseBtnClick={() => toggleModal(ToggleModalTypes.WithSelectedItemClearing)}\r\n                >\r\n                  <NotesModalContent\r\n                    newItemId={newItemId}\r\n                    onToggleModal={toggleModal}\r\n                    selectedItemId={selectedItemId}\r\n                    setNotesPageState={setState}\r\n                  />\r\n                </Modal>\r\n              </Portal>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <span>Loading...</span>\r\n        )}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default NotesPage;\r\n","export default __webpack_public_path__ + \"static/media/anonymous.a4137231.jpg\";","import React, { useState } from 'react';\r\n\r\nimport { useAppContext, useTooltipContext } from 'context';\r\nimport { TooltipTypes } from 'types';\r\nimport ChangeIcon from '!@svgr/webpack!assets/img/change-icon.svg';\r\nimport anonymousImg from 'assets/img/anonymous.jpg';\r\n\r\nconst UserAvatar: React.FC = () => {\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [photoUrl, setPhotoUrl] = useState(currentUser.photoURL ?? '');\r\n  const [isAvatarClicked, setIsAvatarClicked] = useState(false);\r\n\r\n  const onPhotoUrlSave = (): void => {\r\n    currentUser\r\n      .updateProfile({\r\n        photoURL: photoUrl,\r\n      })\r\n      .then(() => setIsAvatarClicked(false))\r\n      .catch((err: any) => {\r\n        showTooltip(TooltipTypes.Error, `User avatar didn't update: ${err.message}`);\r\n      });\r\n  };\r\n\r\n  const onCancelingPhotoUrlChange = (): void => {\r\n    setPhotoUrl(currentUser.photoURL ?? '');\r\n    setIsAvatarClicked(false);\r\n  };\r\n\r\n  const onPhotoUrlChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setPhotoUrl(evt.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-item settings-item__avatar-wrapper\">\r\n      <img\r\n        className=\"settings-item__avatar\"\r\n        src={currentUser.photoURL ?? anonymousImg}\r\n        width=\"100\"\r\n        height=\"100\"\r\n        alt=\"User's avatar\"\r\n      />\r\n\r\n      {isAvatarClicked ? (\r\n        <>\r\n          {/* @todo Стоит сделать ref на инпут, чтобы бахать фокус сразу после его появления? */}\r\n          <input\r\n            className=\"settings-item__field settings-item__field--avatar\"\r\n            type=\"text\"\r\n            name=\"avatar\"\r\n            onChange={onPhotoUrlChange}\r\n            placeholder=\"Type the link on your avatar\"\r\n            value={photoUrl}\r\n          />\r\n          <button className=\"settings-item__btn\" onClick={onPhotoUrlSave}>\r\n            Save\r\n          </button>\r\n          <button\r\n            className=\"settings-item__btn settings-item__btn--cancel\"\r\n            onClick={onCancelingPhotoUrlChange}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <button\r\n          className=\"settings-item__edit-btn settings-item__edit-btn--avatar\"\r\n          onClick={() => setIsAvatarClicked(true)}\r\n        >\r\n          <ChangeIcon width=\"24px\" height=\"24px\" />\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserAvatar;\r\n","import React, { useState } from 'react';\r\n\r\nimport { useAppContext, useTooltipContext } from 'context';\r\nimport { TooltipTypes } from 'types';\r\nimport ChangeIcon from '!@svgr/webpack!assets/img/change-icon.svg';\r\n\r\nconst UserName: React.FC = () => {\r\n  const { currentUser } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [name, setName] = useState(currentUser.displayName ?? '');\r\n  const [isNameClicked, setIsNameClicked] = useState(false);\r\n\r\n  const onNameSave = (): void => {\r\n    currentUser\r\n      .updateProfile({\r\n        displayName: name,\r\n      })\r\n      .then(() => setIsNameClicked(false))\r\n      .catch((err: any) => {\r\n        showTooltip(TooltipTypes.Error, `User name didn't update: ${err.message}`);\r\n      });\r\n  };\r\n  const onCancelingNameChange = (): void => {\r\n    setName(currentUser.displayName ?? '');\r\n    setIsNameClicked(false);\r\n  };\r\n\r\n  const onNameChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setName(evt.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-item\">\r\n      {isNameClicked ? (\r\n        <>\r\n          <input\r\n            className=\"settings-item__field settings-item__field--name\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={onNameChange}\r\n            placeholder=\"What is your name?\"\r\n            value={name}\r\n          />\r\n          <button className=\"settings-item__btn\" onClick={onNameSave}>\r\n            Save\r\n          </button>\r\n          <button\r\n            className=\"settings-item__btn settings-item__btn--cancel\"\r\n            onClick={onCancelingNameChange}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <div>\r\n          <span className=\"settings-item__text\">\r\n            <b>Your name: </b>\r\n            {currentUser.displayName ?? 'Anonymous'}\r\n          </span>\r\n          <button\r\n            className=\"settings-item__edit-btn settings-item__edit-btn--name\"\r\n            onClick={() => setIsNameClicked(true)}\r\n          >\r\n            <ChangeIcon width=\"18px\" height=\"18px\" />\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserName;\r\n","import ChangeEmailModalContent from './change-email-modal-content';\r\nexport default ChangeEmailModalContent;\r\n","import React, { useState } from 'react';\r\nimport { Form, Formik } from 'formik';\r\n\r\nimport CustomInput from 'components/customInput';\r\nimport { useTooltipContext } from 'context';\r\nimport {\r\n  firebaseConfirmUserCredentials,\r\n  firebaseSetNewUsersEmail,\r\n} from 'services/firebase-service';\r\nimport {\r\n  changeEmailFormStepOneValidationSchema,\r\n  changeEmailFormStepTwoValidationSchema,\r\n} from 'validationSchemas';\r\n\r\nimport './change-email-modal-content.css';\r\n\r\ninterface ChangeEmailModalProps {\r\n  onToggleModal: () => void;\r\n  user: any;\r\n  actionCodeSettings: any;\r\n}\r\n\r\nexport interface IPartOfFormikBag {\r\n  setSubmitting: (isSubmitting: boolean) => void;\r\n}\r\n\r\nconst ChangeEmailModalContent: React.FC<ChangeEmailModalProps> = ({\r\n  onToggleModal,\r\n  user,\r\n  actionCodeSettings,\r\n}) => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [isFirstModal, setIsFirstModal] = useState(true);\r\n\r\n  const onConfirmCredentials = (values: any, { setSubmitting }: IPartOfFormikBag): void =>\r\n    firebaseConfirmUserCredentials(\r\n      user,\r\n      setIsFirstModal,\r\n      showTooltip,\r\n      { email: values.oldEmail, password: values.password },\r\n      setSubmitting\r\n    );\r\n\r\n  const onSetNewEmail = (values: any, { setSubmitting }: IPartOfFormikBag): void =>\r\n    firebaseSetNewUsersEmail(\r\n      user,\r\n      actionCodeSettings,\r\n      showTooltip,\r\n      onToggleModal,\r\n      values,\r\n      setSubmitting\r\n    );\r\n\r\n  // @todo Есть некий баг, связнанный с тем, что изначально newEmail = undefined из-за этого также нельзя прописать нормальные типы в onSubmit-функциях\r\n  // Судя по всему, самое правильное - разделить модалки на два компонента и тут, и в change the password, и в delete the account\r\n  return (\r\n    <Formik\r\n      initialValues={\r\n        isFirstModal\r\n          ? {\r\n              oldEmail: user.email,\r\n              password: '',\r\n            }\r\n          : {\r\n              newEmail: '',\r\n            }\r\n      }\r\n      enableReinitialize={true}\r\n      validationSchema={\r\n        isFirstModal\r\n          ? changeEmailFormStepOneValidationSchema\r\n          : changeEmailFormStepTwoValidationSchema\r\n      }\r\n      onSubmit={isFirstModal ? onConfirmCredentials : onSetNewEmail}\r\n    >\r\n      {({ isSubmitting, errors, touched }) => (\r\n        <Form className=\"change-email-form\">\r\n          {isFirstModal ? (\r\n            <>\r\n              <div className=\"change-email-form__field-wrapper\">\r\n                <CustomInput\r\n                  label={'Old email'}\r\n                  labelClass=\"change-email-form__label\"\r\n                  isRequired={true}\r\n                  fieldClass=\"change-email-form__field\"\r\n                  type={'email'}\r\n                  fieldName={'oldEmail'}\r\n                  placeholder={'Enter your old email'}\r\n                  isError={'oldEmail' in errors}\r\n                  isTouched={'oldEmail' in touched}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"change-email-form__field-wrapper\">\r\n                <CustomInput\r\n                  label={'Password'}\r\n                  labelClass=\"change-email-form__label\"\r\n                  isRequired={true}\r\n                  fieldClass=\"change-email-form__field\"\r\n                  type={'password'}\r\n                  fieldName={'password'}\r\n                  placeholder={'Enter your password'}\r\n                  isError={'password' in errors}\r\n                  isTouched={'password' in touched}\r\n                />\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"change-email-form__field-wrapper\">\r\n              <CustomInput\r\n                label={'New email'}\r\n                labelClass=\"change-email-form__label\"\r\n                isRequired={true}\r\n                fieldClass=\"change-email-form__field\"\r\n                type={'email'}\r\n                fieldName={'newEmail'}\r\n                placeholder={'Enter your new email'}\r\n                isError={'newEmail' in errors}\r\n                isTouched={'newEmail' in touched}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <button className=\"change-email-form__submit-btn\" type=\"submit\" disabled={isSubmitting}>\r\n            {isFirstModal ? 'Continue' : 'Save'}\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ChangeEmailModalContent;\r\n","import React, { useState } from 'react';\r\n\r\nimport Modal from 'components/modal';\r\nimport Portal from 'components/portal';\r\nimport ChangeEmailModalContent from '../change-email-modal-content';\r\nimport { useAppContext } from 'context';\r\nimport ChangeIcon from '!@svgr/webpack!assets/img/change-icon.svg';\r\n\r\nconst UserEmail: React.FC = () => {\r\n  const { currentUser, actionCodeSettings } = useAppContext();\r\n  const isGoogleUser = currentUser.providerData[0].providerId === 'google.com';\r\n\r\n  const [showModalEmailChange, setShowModalEmailChange] = useState(false);\r\n\r\n  const toggleEmailChangeModal = (): void => {\r\n    setShowModalEmailChange((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-item settings-item--email\">\r\n      <span className=\"settings-item__text\">\r\n        <b>Your email: </b>\r\n        {currentUser.email}\r\n      </span>\r\n\r\n      {!isGoogleUser && (\r\n        <button\r\n          className=\"settings-item__edit-btn settings-item__edit-btn--email\"\r\n          onClick={toggleEmailChangeModal}\r\n        >\r\n          <ChangeIcon width=\"18px\" height=\"18px\" />\r\n        </button>\r\n      )}\r\n\r\n      {showModalEmailChange && (\r\n        <Portal>\r\n          <Modal\r\n            classes=\"modal--change-email\"\r\n            title=\"Changing the email\"\r\n            onCloseBtnClick={toggleEmailChangeModal}\r\n          >\r\n            <ChangeEmailModalContent\r\n              onToggleModal={toggleEmailChangeModal}\r\n              user={currentUser}\r\n              actionCodeSettings={actionCodeSettings}\r\n            />\r\n          </Modal>\r\n        </Portal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserEmail;\r\n","import ChangePasswordModalContent from './change-password-modal-content';\r\nexport default ChangePasswordModalContent;\r\n","import React, { useState } from 'react';\r\nimport { Form, Formik } from 'formik';\r\n\r\nimport CustomInput from 'components/customInput';\r\nimport { useTooltipContext } from 'context';\r\nimport {\r\n  firebaseConfirmUserCredentials,\r\n  firebaseSetNewUsersPassword,\r\n} from 'services/firebase-service';\r\nimport {\r\n  changePasswordFormStepOneValidationSchema,\r\n  changePasswordFormStepTwoValidationSchema,\r\n} from 'validationSchemas';\r\n\r\nimport './change-password-modal-content.css';\r\n\r\ninterface ChangePasswordModalProps {\r\n  onToggleModal: () => void;\r\n  user: any;\r\n}\r\n\r\nexport interface IPartOfFormikBag {\r\n  setSubmitting: (isSubmitting: boolean) => void;\r\n}\r\n\r\nconst ChangePasswordModalContent: React.FC<ChangePasswordModalProps> = ({\r\n  onToggleModal,\r\n  user,\r\n}) => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [isFirstModal, setIsFirstModal] = useState(true);\r\n\r\n  const onConfirmCredentials = (values: any, { setSubmitting }: IPartOfFormikBag): void =>\r\n    firebaseConfirmUserCredentials(\r\n      user,\r\n      setIsFirstModal,\r\n      showTooltip,\r\n      { email: values.email, password: values.oldPassword },\r\n      setSubmitting\r\n    );\r\n\r\n  const onSetNewPassword = (values: any, { setSubmitting }: IPartOfFormikBag): void =>\r\n    firebaseSetNewUsersPassword(user, showTooltip, onToggleModal, values, setSubmitting);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={\r\n        isFirstModal\r\n          ? {\r\n              email: user.email,\r\n              oldPassword: '',\r\n            }\r\n          : {\r\n              newPassword: '',\r\n            }\r\n      }\r\n      enableReinitialize={true}\r\n      validationSchema={\r\n        isFirstModal\r\n          ? changePasswordFormStepOneValidationSchema\r\n          : changePasswordFormStepTwoValidationSchema\r\n      }\r\n      onSubmit={isFirstModal ? onConfirmCredentials : onSetNewPassword}\r\n    >\r\n      {({ isSubmitting, errors, touched }) => (\r\n        <Form className=\"change-password-form\">\r\n          {isFirstModal ? (\r\n            <>\r\n              <div className=\"change-password-form__field-wrapper\">\r\n                <CustomInput\r\n                  label={'Email'}\r\n                  labelClass=\"change-password-form__label\"\r\n                  isRequired={true}\r\n                  fieldClass=\"change-password-form__field change-password-form__email-field\"\r\n                  type={'email'}\r\n                  fieldName={'email'}\r\n                  placeholder={'Enter your email'}\r\n                  isError={'email' in errors}\r\n                  isTouched={'email' in touched}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"change-password-form__field-wrapper\">\r\n                <CustomInput\r\n                  label={'Old password'}\r\n                  labelClass=\"change-password-form__label\"\r\n                  isRequired={true}\r\n                  fieldClass=\"change-password-form__field change-password-form__old-password-field\"\r\n                  type={'password'}\r\n                  fieldName={'oldPassword'}\r\n                  placeholder={'Enter your old password'}\r\n                  isError={'oldPassword' in errors}\r\n                  isTouched={'oldPassword' in touched}\r\n                />\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"change-password-form__field-wrapper\">\r\n              <CustomInput\r\n                label={'New password'}\r\n                labelClass=\"change-password-form__label\"\r\n                isRequired={true}\r\n                fieldClass=\"change-password-form__field change-password-form__new-password-field\"\r\n                type={'password'}\r\n                fieldName={'newPassword'}\r\n                placeholder={'Enter your new password'}\r\n                isError={'newPassword' in errors}\r\n                isTouched={'newPassword' in touched}\r\n              />\r\n            </div>\r\n\r\n            /* @todo можно реализовать генерацию рандомного пароля\r\n          <button className=\"change-password-form__generate-password\" onClick={onGeneratePassword}>\r\n            Generate password\r\n          </button> */\r\n          )}\r\n\r\n          <button\r\n            className=\"change-password-form__submit-btn\"\r\n            type=\"submit\"\r\n            disabled={isSubmitting}\r\n          >\r\n            {isFirstModal ? 'Continue' : 'Save'}\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ChangePasswordModalContent;\r\n","import React, { useState } from 'react';\r\n\r\nimport Portal from 'components/portal';\r\nimport Modal from 'components/modal';\r\nimport ChangePasswordModalContent from '../change-password-modal-content';\r\nimport { useAppContext, useTooltipContext } from 'context';\r\nimport { firebaseSendEmailForResetingPassword } from 'services/firebase-service';\r\n\r\nconst UserPassword: React.FC = () => {\r\n  const { currentUser, actionCodeSettings } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  const [showModalPasswordChange, setShowModalPasswordChange] = useState(false);\r\n\r\n  const togglePasswordChangeModal = (): void => {\r\n    setShowModalPasswordChange((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"settings-item\">\r\n        <span>If you remember your password, you can</span>\r\n        <button className=\"settings-item__btn\" onClick={togglePasswordChangeModal}>\r\n          Change it\r\n        </button>\r\n      </div>\r\n      <div className=\"settings-item\">\r\n        <span>But if you forgot it, we can send the email to you to reset the password</span>\r\n        <button\r\n          className=\"settings-item__btn\"\r\n          onClick={() =>\r\n            firebaseSendEmailForResetingPassword(currentUser.email, actionCodeSettings, showTooltip)\r\n          }\r\n        >\r\n          Send the email\r\n        </button>\r\n      </div>\r\n\r\n      {showModalPasswordChange && (\r\n        <Portal>\r\n          <Modal\r\n            classes=\"modal--change-password\"\r\n            title=\"Changing the password\"\r\n            onCloseBtnClick={togglePasswordChangeModal}\r\n          >\r\n            <ChangePasswordModalContent\r\n              onToggleModal={togglePasswordChangeModal}\r\n              user={currentUser}\r\n            />\r\n          </Modal>\r\n        </Portal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserPassword;\r\n","import DeleteAccountModalContent from './delete-account-modal-content';\r\nexport default DeleteAccountModalContent;\r\n","import React, { useState } from 'react';\r\nimport { Form, Formik } from 'formik';\r\n\r\nimport { useTooltipContext } from 'context';\r\nimport CustomInput from 'components/customInput';\r\nimport { deleteAccountFormStepOneValidationSchema } from 'validationSchemas';\r\nimport {\r\n  firebaseConfirmUserCredentials,\r\n  firebaseDeleteUserAccount,\r\n} from 'services/firebase-service';\r\n\r\nimport './delete-account-modal-content.css';\r\n\r\ninterface ChangeAccountDeleteModalProps {\r\n  onToggleModal: () => void;\r\n  user: any;\r\n}\r\n\r\nexport interface IPartOfFormikBag {\r\n  setSubmitting: (isSubmitting: boolean) => void;\r\n}\r\n\r\nconst ChangeAccountDeleteModalContent: React.FC<ChangeAccountDeleteModalProps> = ({\r\n  onToggleModal,\r\n  user,\r\n}) => {\r\n  const { showTooltip } = useTooltipContext();\r\n  const [isFirstModal, setIsFirstModal] = useState(true);\r\n\r\n  const onConfirmCredentials = (values: any, { setSubmitting }: IPartOfFormikBag): void =>\r\n    firebaseConfirmUserCredentials(user, setIsFirstModal, showTooltip, values, setSubmitting);\r\n\r\n  const onDeleteAccount = (values: any, { setSubmitting }: IPartOfFormikBag): void =>\r\n    firebaseDeleteUserAccount(user, showTooltip, setSubmitting);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={\r\n        isFirstModal\r\n          ? {\r\n              email: user.email,\r\n              password: '',\r\n            }\r\n          : {}\r\n      }\r\n      enableReinitialize={true}\r\n      validationSchema={isFirstModal ? deleteAccountFormStepOneValidationSchema : undefined}\r\n      onSubmit={isFirstModal ? onConfirmCredentials : onDeleteAccount}\r\n    >\r\n      {({ isSubmitting, errors, touched }) => (\r\n        <Form className=\"delete-account-form\">\r\n          {isFirstModal ? (\r\n            <>\r\n              <div className=\"delete-account-form__field-wrapper\">\r\n                <CustomInput\r\n                  label={'Email'}\r\n                  labelClass=\"delete-account-form__label\"\r\n                  isRequired={true}\r\n                  fieldClass=\"delete-account-form__field delete-account-form__email-field\"\r\n                  type={'email'}\r\n                  fieldName={'email'}\r\n                  placeholder={'Enter your email'}\r\n                  isError={'email' in errors}\r\n                  isTouched={'email' in touched}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"delete-account-form__field-wrapper\">\r\n                <CustomInput\r\n                  label={'Password'}\r\n                  labelClass=\"delete-account-form__label\"\r\n                  isRequired={true}\r\n                  fieldClass=\"delete-account-form__field change-password-form__password-field\"\r\n                  type={'password'}\r\n                  fieldName={'password'}\r\n                  placeholder={'Enter your password'}\r\n                  isError={'password' in errors}\r\n                  isTouched={'password' in touched}\r\n                />\r\n              </div>\r\n\r\n              <button\r\n                className=\"delete-account-form__btn delete-account-form__submit-btn\"\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n              >\r\n                Continue\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <span className=\"delete-account-form__warning-text\">\r\n                Do you want <b>to delete</b> your account <b>forever</b>? This action is\r\n                irreversibly...\r\n              </span>\r\n              <div className=\"delete-account-form__btn-wrapper\">\r\n                <button\r\n                  className=\"delete-account-form__btn delete-account-form__agree-btn\"\r\n                  type=\"submit\"\r\n                  disabled={isSubmitting}\r\n                >\r\n                  Yes\r\n                </button>\r\n                <button\r\n                  className=\"delete-account-form__btn delete-account-form__disagree-btn\"\r\n                  type=\"button\"\r\n                  onClick={() => onToggleModal()}\r\n                >\r\n                  No\r\n                </button>\r\n              </div>\r\n            </>\r\n          )}\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ChangeAccountDeleteModalContent;\r\n","import React, { useState } from 'react';\r\n\r\nimport Modal from 'components/modal';\r\nimport Portal from 'components/portal';\r\nimport DeleteAccountModalContent from '../delete-account-modal-content';\r\nimport { useAppContext } from 'context';\r\n\r\nconst UserDelete: React.FC = () => {\r\n  const { currentUser } = useAppContext();\r\n\r\n  const [showModalAccountDelete, setShowModalAccountDelete] = useState(false);\r\n\r\n  const toggleAccountDeleteModal = (): void => {\r\n    setShowModalAccountDelete((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-item\">\r\n      <button\r\n        className=\"settings-item__btn settings-item__btn--cancel settings-item__btn--delete-account\"\r\n        onClick={toggleAccountDeleteModal}\r\n      >\r\n        Delete account\r\n      </button>\r\n\r\n      {showModalAccountDelete && (\r\n        <Portal>\r\n          <Modal\r\n            classes=\"modal--delete-account\"\r\n            title=\"Deleting the account\"\r\n            onCloseBtnClick={toggleAccountDeleteModal}\r\n          >\r\n            <DeleteAccountModalContent\r\n              user={currentUser}\r\n              onToggleModal={toggleAccountDeleteModal}\r\n            />\r\n          </Modal>\r\n        </Portal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserDelete;\r\n","import React from 'react';\r\n\r\nimport PageTitle from 'components/page-title';\r\nimport UserAvatar from './components/user-avatar';\r\nimport UserName from './components/user-name';\r\nimport UserEmail from './components/user-email';\r\nimport UserPassword from './components/user-password';\r\nimport UserDelete from './components/user-delete';\r\nimport { useAppContext } from 'context';\r\n\r\nimport './index.css';\r\n\r\nconst SettingsPage: React.FC = () => {\r\n  const { currentUser } = useAppContext();\r\n  const isGoogleUser = currentUser.providerData[0].providerId === 'google.com';\r\n\r\n  return (\r\n    <main className=\"settings-page\">\r\n      <div className=\"container\">\r\n        <PageTitle text=\"Settings\" />\r\n        <h2 className=\"settings-page__subtitle\">Account</h2>\r\n\r\n        <div className=\"settings-wrapper\">\r\n          <UserAvatar />\r\n          <UserName />\r\n          <UserEmail />\r\n\r\n          {!isGoogleUser && <UserPassword />}\r\n          <UserDelete />\r\n        </div>\r\n        <h2 className=\"settings-page__subtitle\">App</h2>\r\n        {/* @todo Здесь будет тогглер цветовой схемы сайта */}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default SettingsPage;\r\n","import { ICustomInput } from '../../../../interfaces';\r\n\r\nconst inputsConfig: Omit<ICustomInput, 'isError' | 'isTouched'>[] = [\r\n  {\r\n    label: 'Email',\r\n    isRequired: true,\r\n    type: 'email',\r\n    fieldName: 'email',\r\n    placeholder: 'Enter your email',\r\n  },\r\n  {\r\n    label: 'Password',\r\n    isRequired: true,\r\n    type: 'password',\r\n    fieldName: 'password',\r\n    placeholder: 'Create a password',\r\n  },\r\n  {\r\n    label: 'Repeat password',\r\n    isRequired: true,\r\n    type: 'password',\r\n    fieldName: 'repeatPassword',\r\n    placeholder: 'Repeat your password',\r\n  },\r\n];\r\n\r\nexport default inputsConfig;\r\n","import SignUpModalContent from './sign-up-modal-content';\r\nexport default SignUpModalContent;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport { useTooltipContext } from 'context';\r\nimport { signUpValidationSchema } from 'validationSchemas';\r\nimport { firebaseCreateUser, firebaseCreateUserWithGoogle } from 'services/firebase-service';\r\nimport CustomInput from 'components/customInput';\r\nimport inputsConfig from './inputs-config';\r\n\r\nimport './sign-up-modal-content.css';\r\n\r\nconst SignUpModalContent: React.FC = () => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{ email: '', password: '', repeatPassword: '' }}\r\n        validationSchema={signUpValidationSchema}\r\n        onSubmit={(values, { setSubmitting }) =>\r\n          firebaseCreateUser(values, showTooltip, setSubmitting)\r\n        }\r\n      >\r\n        {({ isSubmitting, errors, touched }) => (\r\n          <Form className=\"sign-up-form\">\r\n            {inputsConfig.map((item) => (\r\n              <div className=\"sign-up-form__field-wrapper\" key={item.fieldName}>\r\n                <CustomInput\r\n                  label={item.label}\r\n                  labelClass=\"sign-up-form__label\"\r\n                  isRequired={item.isRequired}\r\n                  fieldClass=\"sign-up-form__field\"\r\n                  type={item.type}\r\n                  fieldName={item.fieldName}\r\n                  placeholder={item.placeholder}\r\n                  isError={item.fieldName in errors}\r\n                  isTouched={item.fieldName in touched}\r\n                />\r\n              </div>\r\n            ))}\r\n\r\n            <button className=\"sign-up-form__submit-btn\" type=\"submit\" disabled={isSubmitting}>\r\n              Sign up\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      <div className=\"modal--sign-up__sign-up-with-google\">\r\n        <span className=\"sign-up-with-google__text\">Also you can</span>\r\n        <button\r\n          className=\"sign-up-with-google__btn\"\r\n          onClick={() => firebaseCreateUserWithGoogle(showTooltip)}\r\n        >\r\n          Sign up with\r\n        </button>\r\n      </div>\r\n\r\n      <span className=\"modal--sign-up__go-to-sign-in\">\r\n        Already have an account?{' '}\r\n        <Link className=\"modal--sign-up__sign-in-link\" to=\"/sign-in\">\r\n          Sign in\r\n        </Link>\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignUpModalContent;\r\n","import React from 'react';\r\nimport Modal from '../../components/modal';\r\nimport SignUpModalContent from './components/sign-up-modal-content';\r\n\r\nconst SignUpPage: React.FC = () => (\r\n  <main className=\"sign-up-page\">\r\n    <Modal classes=\"modal--sign-up\" title=\"Sign up\">\r\n      <SignUpModalContent />\r\n    </Modal>\r\n  </main>\r\n);\r\n\r\nexport default SignUpPage;\r\n","import { ICustomInput } from '../../../../interfaces';\r\n\r\nconst inputsConfig: Omit<ICustomInput, 'isError' | 'isTouched'>[] = [\r\n  {\r\n    label: 'Email',\r\n    isRequired: true,\r\n    type: 'email',\r\n    fieldName: 'email',\r\n    placeholder: 'Enter your email',\r\n  },\r\n  {\r\n    label: 'Password',\r\n    isRequired: true,\r\n    type: 'password',\r\n    fieldName: 'password',\r\n    placeholder: 'Enter your password',\r\n  },\r\n  {\r\n    label: 'Remember me',\r\n    isRequired: false,\r\n    type: 'checkbox',\r\n    fieldName: 'rememberMe',\r\n  },\r\n];\r\n\r\nexport default inputsConfig;\r\n","import SignInModalContent from './sign-in-modal-content';\r\nexport default SignInModalContent;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport { useTooltipContext } from 'context';\r\nimport { signInValidationSchema } from 'validationSchemas';\r\nimport { firebaseSignIn, firebaseGoogleSignIn } from 'services/firebase-service';\r\nimport inputsConfig from './inputs-config';\r\nimport CustomInput from 'components/customInput';\r\nimport { clsx } from 'helpers';\r\n\r\nimport './sign-in-modal-content.css';\r\n\r\nconst SignInModalContent: React.FC = () => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          email: '',\r\n          password: '',\r\n          rememberMe: Boolean(localStorage.getItem('rememberMe')),\r\n        }}\r\n        validationSchema={signInValidationSchema}\r\n        onSubmit={(values, { setSubmitting }) => firebaseSignIn(values, showTooltip, setSubmitting)}\r\n      >\r\n        {({ isSubmitting, errors, touched }) => (\r\n          <Form className=\"sign-in-form\">\r\n            {inputsConfig.map((item) => (\r\n              <div\r\n                className={clsx([\r\n                  `sign-in-form__field-wrapper`,\r\n                  item.fieldName === `rememberMe` && `sign-in-form__field-wrapper--checkbox`,\r\n                ])}\r\n                key={item.fieldName}\r\n              >\r\n                <CustomInput\r\n                  label={item.label}\r\n                  labelClass=\"sign-in-form__label\"\r\n                  isRequired={item.isRequired}\r\n                  fieldClass={clsx([\r\n                    `sign-up-form__field`,\r\n                    item.fieldName === `rememberMe` && `sign-in-form__field--checkbox`,\r\n                  ])}\r\n                  type={item.type}\r\n                  fieldName={item.fieldName}\r\n                  placeholder={item.placeholder}\r\n                  isError={item.fieldName in errors}\r\n                  isTouched={item.fieldName in touched}\r\n                />\r\n              </div>\r\n            ))}\r\n\r\n            <button className=\"sign-in-form__submit-btn\" type=\"submit\" disabled={isSubmitting}>\r\n              Sign in\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      <button\r\n        className=\"modal--sign-in__google-btn\"\r\n        onClick={() => firebaseGoogleSignIn(showTooltip)}\r\n      >\r\n        Sign in with\r\n      </button>\r\n\r\n      <span className=\"modal--sign-in__go-to-reset\">\r\n        Forgot password?{' '}\r\n        <Link className=\"modal--sign-in__link\" to=\"/reset-password\">\r\n          Reset\r\n        </Link>\r\n      </span>\r\n      <span className=\"modal--sign-in__go-to-sign-up\">\r\n        Back to{' '}\r\n        <Link className=\"modal--sign-in__link\" to=\"/sign-up\">\r\n          Sign up\r\n        </Link>\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignInModalContent;\r\n","import React from 'react';\r\nimport Modal from '../../components/modal';\r\nimport SignInModalContent from './components/sign-in-modal-content';\r\n\r\nconst SignInPage: React.FC = () => (\r\n  <main className=\"sign-in-page\">\r\n    <Modal classes=\"modal--sign-in\" title=\"Sign in\">\r\n      <SignInModalContent />\r\n    </Modal>\r\n  </main>\r\n);\r\n\r\nexport default SignInPage;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport { useAppContext, useTooltipContext } from 'context/';\r\nimport { resetPasswordValidationSchema } from 'validationSchemas';\r\nimport { firebaseSendPasswordResetEmail } from 'services/firebase-service';\r\nimport CustomInput from 'components/customInput';\r\n\r\nimport './reset-password-modal-content.css';\r\n\r\nconst ResetPasswordModalContent: React.FC = () => {\r\n  const { actionCodeSettings } = useAppContext();\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          email: '',\r\n        }}\r\n        validationSchema={resetPasswordValidationSchema}\r\n        onSubmit={(values, { setSubmitting }) =>\r\n          firebaseSendPasswordResetEmail(values, actionCodeSettings, showTooltip, setSubmitting)\r\n        }\r\n      >\r\n        {({ isSubmitting, errors, touched }) => (\r\n          <Form className=\"reset-password-form\">\r\n            <div className=\"reset-password-form__field-wrapper\">\r\n              <CustomInput\r\n                label=\"Email\"\r\n                labelClass=\"reset-password-form__label\"\r\n                isRequired={true}\r\n                fieldClass=\"reset-password-form__field\"\r\n                type=\"email\"\r\n                fieldName=\"email\"\r\n                placeholder=\"Enter your email\"\r\n                isError={'email' in errors}\r\n                isTouched={'email' in touched}\r\n              />\r\n            </div>\r\n\r\n            <button\r\n              className=\"reset-password-form__submit-btn\"\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n            >\r\n              Reset password\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      <Link className=\"modal--reset-password__sign-in-link\" to=\"/sign-in\">\r\n        I've just remembered :)\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordModalContent;\r\n","import React from 'react';\r\nimport Modal from 'components/modal';\r\nimport ResetPasswordModalContent from './components/reset-password-modal-content';\r\n\r\nconst ResetPasswordPage: React.FC = () => (\r\n  <main className=\"reset-password-page\">\r\n    <Modal classes=\"modal--reset-password\" title=\"Reset password\">\r\n      <ResetPasswordModalContent />\r\n    </Modal>\r\n  </main>\r\n);\r\n\r\nexport default ResetPasswordPage;\r\n","import Header from \"./header\";\r\nexport default Header;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useTooltipContext } from '../../context';\r\nimport { firebaseSignOut } from '../../services/firebase-service';\r\n\r\nimport './header.css';\r\n\r\nconst Header: React.FC = () => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  return (\r\n    <header className=\"page-header\">\r\n      <div className=\"container flex-wrapper\">\r\n        <nav className=\"main-nav\">\r\n          <NavLink exact to=\"/\" className=\"main-nav__link\" activeClassName=\"main-nav__active-link\">\r\n            Doit!\r\n          </NavLink>\r\n          <ul className=\"main-nav__list\">\r\n            <li className=\"main-nav__item\">\r\n              <NavLink\r\n                to=\"/todo\"\r\n                className=\"main-nav__link\"\r\n                activeClassName=\"main-nav__active-link\"\r\n              >\r\n                Todo\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"main-nav__item\">\r\n              <NavLink\r\n                to=\"/notes\"\r\n                className=\"main-nav__link\"\r\n                activeClassName=\"main-nav__active-link\"\r\n              >\r\n                Notes\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"main-nav__item\">\r\n              <NavLink\r\n                to=\"/settings\"\r\n                className=\"main-nav__link\"\r\n                activeClassName=\"main-nav__active-link\"\r\n              >\r\n                Settings\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <button className=\"page-header__sign-out-btn\" onClick={() => firebaseSignOut(showTooltip)}>\r\n          Sign out\r\n        </button>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { useTooltipContext } from '../../context';\r\nimport { firebaseSignOut } from '../../services/firebase-service';\r\n\r\nimport './emailUnverifiedOverlay.css';\r\n\r\nconst EmailUnverifiedOverlay = () => {\r\n  const { showTooltip } = useTooltipContext();\r\n\r\n  return (\r\n    <div className=\"app-overlay\">\r\n      <div className=\"app-overlay__content\">\r\n        Please confirm your email to use the app or{' '}\r\n        <button className=\"app-overlay__sign-out-btn\" onClick={() => firebaseSignOut(showTooltip)}>\r\n          Sign out\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailUnverifiedOverlay;\r\n","import Tooltip from './tooltip';\r\nexport default Tooltip;\r\n","import React, { useEffect } from 'react';\r\nimport { Transition } from 'react-transition-group';\r\nimport { useTooltipContext } from '../../context';\r\nimport './tooltip.css';\r\n\r\nconst Tooltip: React.FC = () => {\r\n  const { message, type, isOpen, hideTooltip } = useTooltipContext();\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      let timerId = setTimeout(hideTooltip, 10000);\r\n      return () => {\r\n        clearTimeout(timerId);\r\n      };\r\n    }\r\n  }, [isOpen]);\r\n\r\n  return (\r\n    <Transition in={isOpen} timeout={300} unmountOnExit>\r\n      {(transitionState: string) => (\r\n        <div className={`tooltip ${transitionState} tooltip--${type}`}>\r\n          <span className=\"tooltip__message\">{message}</span>\r\n          <button className=\"tooltip__close\" onClick={() => hideTooltip()}></button>\r\n        </div>\r\n      )}\r\n    </Transition>\r\n  );\r\n};\r\nexport default Tooltip;\r\n","import App from \"./app\";\r\nexport default App;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Redirect, Route } from 'react-router-dom';\r\nimport {\r\n  MainPage,\r\n  TodosPage,\r\n  NotesPage,\r\n  SettingsPage,\r\n  SignUpPage,\r\n  SignInPage,\r\n  ResetPasswordPage,\r\n} from '../pages';\r\nimport { useAppContext } from '../context';\r\nimport Header from '../components/header';\r\nimport EmailUnverifiedOverlay from '../components/emailUnverifiedOverlay';\r\nimport Tooltip from '../components/tooltip';\r\n\r\nimport '../assets/css/normalize.css';\r\nimport './scaffolding.css';\r\n\r\nconst App: React.FC = () => {\r\n  const { isLoggedIn, currentUser } = useAppContext();\r\n\r\n  return (\r\n    <Router>\r\n      {isLoggedIn ? (\r\n        <>\r\n          {currentUser.emailVerified ? (\r\n            <>\r\n              <Route path=\"/sign-in\" render={() => <Redirect to=\"/\" />} />\r\n              <Route path=\"/sign-up\" render={() => <Redirect to=\"/\" />} />\r\n              <Header />\r\n              <Tooltip />\r\n              <Route path=\"/\" component={MainPage} exact />\r\n              <Route path=\"/todo\" component={TodosPage} />\r\n              <Route path=\"/notes\" component={NotesPage} />\r\n              <Route path=\"/settings\" component={SettingsPage} />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Route path=\"/sign-in\" render={() => <Redirect to=\"/\" />} />\r\n              <Route path=\"/sign-up\" render={() => <Redirect to=\"/\" />} />\r\n              <Header />\r\n              <Tooltip />\r\n              <EmailUnverifiedOverlay />\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Tooltip />\r\n          <Route path=\"/sign-up\" component={SignUpPage} />\r\n          <Route path=\"/sign-in\" component={SignInPage} />\r\n          <Route path=\"/reset-password\" component={ResetPasswordPage} />\r\n          {/* @todo Использовать switch из react-router-dom*/}\r\n          {/* <Route path=\"*\" render={() => <Redirect to=\"/sign-up\" />} /> */}\r\n          <Redirect to=\"/sign-up\" />\r\n        </>\r\n      )}\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app';\r\nimport { AppProvider, TooltipProvider } from './context';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\ninterface IFirebaseConfig {\r\n  apiKey: string;\r\n  authDomain: string;\r\n  databaseURL: string;\r\n  projectId: string;\r\n  storageBucket: string;\r\n  messagingSenderId: string;\r\n  appId: string;\r\n}\r\n\r\nconst firebaseConfig: IFirebaseConfig = {\r\n  apiKey: 'AIzaSyD4KDh3FaOBTHDF_oleVT06eUTvbDCStNY',\r\n  authDomain: 'todo-1c323.firebaseapp.com',\r\n  databaseURL: 'https://todo-1c323-default-rtdb.firebaseio.com',\r\n  projectId: 'todo-1c323',\r\n  storageBucket: 'todo-1c323.appspot.com',\r\n  messagingSenderId: '372839437605',\r\n  appId: '1:372839437605:web:31ef34b6e882e585f576cc',\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nReactDOM.render(\r\n  <TooltipProvider>\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  </TooltipProvider>,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}